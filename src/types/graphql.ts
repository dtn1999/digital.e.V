export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
};

export type Accordion = {
  __typename?: 'Accordion';
  /** The unique identifier */
  id: Scalars['ID'];
  items: Array<AccordionItem>;
  /** System stage field */
  stage: Stage;
};


export type AccordionItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AccordionItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AccordionItemWhereInput>;
};

export type AccordionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AccordionWhereUniqueInput;
};

/** A connection to a list of items. */
export type AccordionConnection = {
  __typename?: 'AccordionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AccordionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AccordionCreateInput = {
  items?: InputMaybe<AccordionItemCreateManyInlineInput>;
};

export type AccordionCreateManyInlineInput = {
  /** Create and connect multiple existing Accordion documents */
  create?: InputMaybe<Array<AccordionCreateInput>>;
};

export type AccordionCreateOneInlineInput = {
  /** Create and connect one Accordion document */
  create?: InputMaybe<AccordionCreateInput>;
};

export type AccordionCreateWithPositionInput = {
  /** Document to create */
  data: AccordionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AccordionEdge = {
  __typename?: 'AccordionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Accordion;
};

export type AccordionItem = {
  __typename?: 'AccordionItem';
  description: RichText;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<AccordionItem>;
  /** System stage field */
  stage: Stage;
  summary: Scalars['String'];
};


export type AccordionItemLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type AccordionItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AccordionItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type AccordionItemConnection = {
  __typename?: 'AccordionItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AccordionItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AccordionItemCreateInput = {
  /** description input for default locale (en) */
  description: Scalars['RichTextAST'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AccordionItemCreateLocalizationsInput>;
  /** summary input for default locale (en) */
  summary: Scalars['String'];
};

export type AccordionItemCreateLocalizationDataInput = {
  description: Scalars['RichTextAST'];
  summary: Scalars['String'];
};

export type AccordionItemCreateLocalizationInput = {
  /** Localization input */
  data: AccordionItemCreateLocalizationDataInput;
  locale: Locale;
};

export type AccordionItemCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AccordionItemCreateLocalizationInput>>;
};

export type AccordionItemCreateManyInlineInput = {
  /** Create and connect multiple existing AccordionItem documents */
  create?: InputMaybe<Array<AccordionItemCreateInput>>;
};

export type AccordionItemCreateOneInlineInput = {
  /** Create and connect one AccordionItem document */
  create?: InputMaybe<AccordionItemCreateInput>;
};

export type AccordionItemCreateWithPositionInput = {
  /** Document to create */
  data: AccordionItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AccordionItemEdge = {
  __typename?: 'AccordionItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: AccordionItem;
};

/** Identifies documents */
export type AccordionItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum AccordionItemOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SummaryAsc = 'summary_ASC',
  SummaryDesc = 'summary_DESC'
}

export type AccordionItemParent = Accordion;

export type AccordionItemParentConnectInput = {
  Accordion?: InputMaybe<AccordionConnectInput>;
};

export type AccordionItemParentCreateInput = {
  Accordion?: InputMaybe<AccordionCreateInput>;
};

export type AccordionItemParentCreateManyInlineInput = {
  /** Create and connect multiple existing AccordionItemParent documents */
  create?: InputMaybe<Array<AccordionItemParentCreateInput>>;
};

export type AccordionItemParentCreateOneInlineInput = {
  /** Create and connect one AccordionItemParent document */
  create?: InputMaybe<AccordionItemParentCreateInput>;
};

export type AccordionItemParentCreateWithPositionInput = {
  Accordion?: InputMaybe<AccordionCreateWithPositionInput>;
};

export type AccordionItemParentUpdateInput = {
  Accordion?: InputMaybe<AccordionUpdateInput>;
};

export type AccordionItemParentUpdateManyInlineInput = {
  /** Create and connect multiple AccordionItemParent component instances */
  create?: InputMaybe<Array<AccordionItemParentCreateWithPositionInput>>;
  /** Delete multiple AccordionItemParent documents */
  delete?: InputMaybe<Array<AccordionItemParentWhereUniqueInput>>;
  /** Update multiple AccordionItemParent component instances */
  update?: InputMaybe<Array<AccordionItemParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AccordionItemParent component instances */
  upsert?: InputMaybe<Array<AccordionItemParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionItemParentUpdateManyWithNestedWhereInput = {
  Accordion?: InputMaybe<AccordionUpdateManyWithNestedWhereInput>;
};

export type AccordionItemParentUpdateOneInlineInput = {
  /** Create and connect one AccordionItemParent document */
  create?: InputMaybe<AccordionItemParentCreateInput>;
  /** Delete currently connected AccordionItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionItemParent document */
  update?: InputMaybe<AccordionItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionItemParent document */
  upsert?: InputMaybe<AccordionItemParentUpsertWithNestedWhereUniqueInput>;
};

export type AccordionItemParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionItemParentUpdateWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
};

export type AccordionItemParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionItemParentUpsertWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
};

export type AccordionItemParentWhereInput = {
  Accordion?: InputMaybe<AccordionWhereInput>;
};

export type AccordionItemParentWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionWhereUniqueInput>;
};

export type AccordionItemUpdateInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** Manage document localizations */
  localizations?: InputMaybe<AccordionItemUpdateLocalizationsInput>;
  /** summary input for default locale (en) */
  summary?: InputMaybe<Scalars['String']>;
};

export type AccordionItemUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  summary?: InputMaybe<Scalars['String']>;
};

export type AccordionItemUpdateLocalizationInput = {
  data: AccordionItemUpdateLocalizationDataInput;
  locale: Locale;
};

export type AccordionItemUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AccordionItemCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AccordionItemUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AccordionItemUpsertLocalizationInput>>;
};

export type AccordionItemUpdateManyInlineInput = {
  /** Create and connect multiple AccordionItem component instances */
  create?: InputMaybe<Array<AccordionItemCreateWithPositionInput>>;
  /** Delete multiple AccordionItem documents */
  delete?: InputMaybe<Array<AccordionItemWhereUniqueInput>>;
  /** Update multiple AccordionItem component instances */
  update?: InputMaybe<Array<AccordionItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AccordionItem component instances */
  upsert?: InputMaybe<Array<AccordionItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionItemUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AccordionItemUpdateManyLocalizationsInput>;
  /** summary input for default locale (en) */
  summary?: InputMaybe<Scalars['String']>;
};

export type AccordionItemUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  summary?: InputMaybe<Scalars['String']>;
};

export type AccordionItemUpdateManyLocalizationInput = {
  data: AccordionItemUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AccordionItemUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AccordionItemUpdateManyLocalizationInput>>;
};

export type AccordionItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AccordionItemUpdateManyInput;
  /** Document search */
  where: AccordionItemWhereInput;
};

export type AccordionItemUpdateOneInlineInput = {
  /** Create and connect one AccordionItem document */
  create?: InputMaybe<AccordionItemCreateInput>;
  /** Delete currently connected AccordionItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionItem document */
  update?: InputMaybe<AccordionItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionItem document */
  upsert?: InputMaybe<AccordionItemUpsertWithNestedWhereUniqueInput>;
};

export type AccordionItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AccordionItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionItemWhereUniqueInput;
};

export type AccordionItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AccordionItemUpdateInput;
  /** Unique document search */
  where: AccordionItemWhereUniqueInput;
};

export type AccordionItemUpsertInput = {
  /** Create document if it didn't exist */
  create: AccordionItemCreateInput;
  /** Update document if it exists */
  update: AccordionItemUpdateInput;
};

export type AccordionItemUpsertLocalizationInput = {
  create: AccordionItemCreateLocalizationDataInput;
  locale: Locale;
  update: AccordionItemUpdateLocalizationDataInput;
};

export type AccordionItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AccordionItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionItemWhereUniqueInput;
};

export type AccordionItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AccordionItemUpsertInput;
  /** Unique document search */
  where: AccordionItemWhereUniqueInput;
};

/** Identifies documents */
export type AccordionItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  summary?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  summary_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  summary_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  summary_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  summary_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  summary_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  summary_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  summary_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  summary_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  summary_starts_with?: InputMaybe<Scalars['String']>;
};

/** References AccordionItem record uniquely */
export type AccordionItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type AccordionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  items_every?: InputMaybe<AccordionItemWhereInput>;
  items_none?: InputMaybe<AccordionItemWhereInput>;
  items_some?: InputMaybe<AccordionItemWhereInput>;
};

export enum AccordionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type AccordionParent = SectionWithImage;

export type AccordionParentConnectInput = {
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
};

export type AccordionParentCreateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
};

export type AccordionParentCreateManyInlineInput = {
  /** Create and connect multiple existing AccordionParent documents */
  create?: InputMaybe<Array<AccordionParentCreateInput>>;
};

export type AccordionParentCreateOneInlineInput = {
  /** Create and connect one AccordionParent document */
  create?: InputMaybe<AccordionParentCreateInput>;
};

export type AccordionParentCreateWithPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
};

export type AccordionParentUpdateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
};

export type AccordionParentUpdateManyInlineInput = {
  /** Create and connect multiple AccordionParent component instances */
  create?: InputMaybe<Array<AccordionParentCreateWithPositionInput>>;
  /** Delete multiple AccordionParent documents */
  delete?: InputMaybe<Array<AccordionParentWhereUniqueInput>>;
  /** Update multiple AccordionParent component instances */
  update?: InputMaybe<Array<AccordionParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AccordionParent component instances */
  upsert?: InputMaybe<Array<AccordionParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionParentUpdateManyWithNestedWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
};

export type AccordionParentUpdateOneInlineInput = {
  /** Create and connect one AccordionParent document */
  create?: InputMaybe<AccordionParentCreateInput>;
  /** Delete currently connected AccordionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionParent document */
  update?: InputMaybe<AccordionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionParent document */
  upsert?: InputMaybe<AccordionParentUpsertWithNestedWhereUniqueInput>;
};

export type AccordionParentUpdateWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionParentUpdateWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
};

export type AccordionParentUpsertWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type AccordionParentUpsertWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type AccordionParentWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
};

export type AccordionParentWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
};

export type AccordionUpdateInput = {
  items?: InputMaybe<AccordionItemUpdateManyInlineInput>;
};

export type AccordionUpdateManyInlineInput = {
  /** Create and connect multiple Accordion component instances */
  create?: InputMaybe<Array<AccordionCreateWithPositionInput>>;
  /** Delete multiple Accordion documents */
  delete?: InputMaybe<Array<AccordionWhereUniqueInput>>;
  /** Update multiple Accordion component instances */
  update?: InputMaybe<Array<AccordionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Accordion component instances */
  upsert?: InputMaybe<Array<AccordionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type AccordionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AccordionUpdateManyInput;
  /** Document search */
  where: AccordionWhereInput;
};

export type AccordionUpdateOneInlineInput = {
  /** Create and connect one Accordion document */
  create?: InputMaybe<AccordionCreateInput>;
  /** Delete currently connected Accordion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Accordion document */
  update?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Accordion document */
  upsert?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
};

export type AccordionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AccordionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AccordionUpdateInput;
  /** Unique document search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpsertInput = {
  /** Create document if it didn't exist */
  create: AccordionCreateInput;
  /** Update document if it exists */
  update: AccordionUpdateInput;
};

export type AccordionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AccordionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionWhereUniqueInput;
};

export type AccordionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AccordionUpsertInput;
  /** Unique document search */
  where: AccordionWhereUniqueInput;
};

/** Identifies documents */
export type AccordionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  items_every?: InputMaybe<AccordionItemWhereInput>;
  items_none?: InputMaybe<AccordionItemWhereInput>;
  items_some?: InputMaybe<AccordionItemWhereInput>;
};

/** References Accordion record uniquely */
export type AccordionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int'];
};

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset';
  /** This text will be displayed in case a specific asset cannot be properly shown */
  alt?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  featuredImageEvent: Array<Event>;
  featuredImageProject: Array<Project>;
  /** The file name */
  fileName: Scalars['String'];
  galleryEvent: Array<Event>;
  galleryProject: Array<Project>;
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageBanner: Array<Banner>;
  imageSeo: Array<Seo>;
  imageService: Array<Service>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  logoAssociationDetails: Array<AssociationDetails>;
  logoCollaborator: Array<Collaborator>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  profileImageMember: Array<Member>;
  profileImageTestimonial: Array<Testimonial>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetFeaturedImageEventArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetFeaturedImageProjectArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};


/** Asset system model */
export type AssetGalleryEventArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


/** Asset system model */
export type AssetGalleryProjectArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetImageBannerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BannerWhereInput>;
};


/** Asset system model */
export type AssetImageSeoArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SeoWhereInput>;
};


/** Asset system model */
export type AssetImageServiceArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ServiceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ServiceWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetLogoAssociationDetailsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssociationDetailsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssociationDetailsWhereInput>;
};


/** Asset system model */
export type AssetLogoCollaboratorArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorWhereInput>;
};


/** Asset system model */
export type AssetProfileImageMemberArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<MemberOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MemberWhereInput>;
};


/** Asset system model */
export type AssetProfileImageTestimonialArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  alt?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  featuredImageEvent?: InputMaybe<EventCreateManyInlineInput>;
  featuredImageProject?: InputMaybe<ProjectCreateManyInlineInput>;
  fileName: Scalars['String'];
  galleryEvent?: InputMaybe<EventCreateManyInlineInput>;
  galleryProject?: InputMaybe<ProjectCreateManyInlineInput>;
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  imageBanner?: InputMaybe<BannerCreateManyInlineInput>;
  imageCarouselSlide?: InputMaybe<CarouselSlideCreateManyInlineInput>;
  imageSectionWithImagess?: InputMaybe<SectionWithImageCreateManyInlineInput>;
  imageSeo?: InputMaybe<SeoCreateManyInlineInput>;
  imageService?: InputMaybe<ServiceCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  logoAssociationDetails?: InputMaybe<AssociationDetailsCreateManyInlineInput>;
  logoCollaborator?: InputMaybe<CollaboratorCreateManyInlineInput>;
  logoNavigation?: InputMaybe<NavigationCreateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  profileImageMember?: InputMaybe<MemberCreateManyInlineInput>;
  profileImageTestimonial?: InputMaybe<TestimonialCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  alt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  alt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  alt_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  alt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  alt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  alt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  alt_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  alt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  alt_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  featuredImageEvent_every?: InputMaybe<EventWhereInput>;
  featuredImageEvent_none?: InputMaybe<EventWhereInput>;
  featuredImageEvent_some?: InputMaybe<EventWhereInput>;
  featuredImageProject_every?: InputMaybe<ProjectWhereInput>;
  featuredImageProject_none?: InputMaybe<ProjectWhereInput>;
  featuredImageProject_some?: InputMaybe<ProjectWhereInput>;
  galleryEvent_every?: InputMaybe<EventWhereInput>;
  galleryEvent_none?: InputMaybe<EventWhereInput>;
  galleryEvent_some?: InputMaybe<EventWhereInput>;
  galleryProject_every?: InputMaybe<ProjectWhereInput>;
  galleryProject_none?: InputMaybe<ProjectWhereInput>;
  galleryProject_some?: InputMaybe<ProjectWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageSeo_every?: InputMaybe<SeoWhereInput>;
  imageSeo_none?: InputMaybe<SeoWhereInput>;
  imageSeo_some?: InputMaybe<SeoWhereInput>;
  imageService_every?: InputMaybe<ServiceWhereInput>;
  imageService_none?: InputMaybe<ServiceWhereInput>;
  imageService_some?: InputMaybe<ServiceWhereInput>;
  logoAssociationDetails_every?: InputMaybe<AssociationDetailsWhereInput>;
  logoAssociationDetails_none?: InputMaybe<AssociationDetailsWhereInput>;
  logoAssociationDetails_some?: InputMaybe<AssociationDetailsWhereInput>;
  logoCollaborator_every?: InputMaybe<CollaboratorWhereInput>;
  logoCollaborator_none?: InputMaybe<CollaboratorWhereInput>;
  logoCollaborator_some?: InputMaybe<CollaboratorWhereInput>;
  profileImageMember_every?: InputMaybe<MemberWhereInput>;
  profileImageMember_none?: InputMaybe<MemberWhereInput>;
  profileImageMember_some?: InputMaybe<MemberWhereInput>;
  profileImageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  profileImageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  profileImageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AssetOrderByInput {
  AltAsc = 'alt_ASC',
  AltDesc = 'alt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  alt?: InputMaybe<Scalars['String']>;
  featuredImageEvent?: InputMaybe<EventUpdateManyInlineInput>;
  featuredImageProject?: InputMaybe<ProjectUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']>;
  galleryEvent?: InputMaybe<EventUpdateManyInlineInput>;
  galleryProject?: InputMaybe<ProjectUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  imageBanner?: InputMaybe<BannerUpdateManyInlineInput>;
  imageCarouselSlide?: InputMaybe<CarouselSlideUpdateManyInlineInput>;
  imageSectionWithImagess?: InputMaybe<SectionWithImageUpdateManyInlineInput>;
  imageSeo?: InputMaybe<SeoUpdateManyInlineInput>;
  imageService?: InputMaybe<ServiceUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  logoAssociationDetails?: InputMaybe<AssociationDetailsUpdateManyInlineInput>;
  logoCollaborator?: InputMaybe<CollaboratorUpdateManyInlineInput>;
  logoNavigation?: InputMaybe<NavigationUpdateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  profileImageMember?: InputMaybe<MemberUpdateManyInlineInput>;
  profileImageTestimonial?: InputMaybe<TestimonialUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  alt?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  alt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  alt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  alt_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  alt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  alt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  alt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  alt_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  alt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  alt_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  featuredImageEvent_every?: InputMaybe<EventWhereInput>;
  featuredImageEvent_none?: InputMaybe<EventWhereInput>;
  featuredImageEvent_some?: InputMaybe<EventWhereInput>;
  featuredImageProject_every?: InputMaybe<ProjectWhereInput>;
  featuredImageProject_none?: InputMaybe<ProjectWhereInput>;
  featuredImageProject_some?: InputMaybe<ProjectWhereInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  galleryEvent_every?: InputMaybe<EventWhereInput>;
  galleryEvent_none?: InputMaybe<EventWhereInput>;
  galleryEvent_some?: InputMaybe<EventWhereInput>;
  galleryProject_every?: InputMaybe<ProjectWhereInput>;
  galleryProject_none?: InputMaybe<ProjectWhereInput>;
  galleryProject_some?: InputMaybe<ProjectWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageSeo_every?: InputMaybe<SeoWhereInput>;
  imageSeo_none?: InputMaybe<SeoWhereInput>;
  imageSeo_some?: InputMaybe<SeoWhereInput>;
  imageService_every?: InputMaybe<ServiceWhereInput>;
  imageService_none?: InputMaybe<ServiceWhereInput>;
  imageService_some?: InputMaybe<ServiceWhereInput>;
  logoAssociationDetails_every?: InputMaybe<AssociationDetailsWhereInput>;
  logoAssociationDetails_none?: InputMaybe<AssociationDetailsWhereInput>;
  logoAssociationDetails_some?: InputMaybe<AssociationDetailsWhereInput>;
  logoCollaborator_every?: InputMaybe<CollaboratorWhereInput>;
  logoCollaborator_none?: InputMaybe<CollaboratorWhereInput>;
  logoCollaborator_some?: InputMaybe<CollaboratorWhereInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  profileImageMember_every?: InputMaybe<MemberWhereInput>;
  profileImageMember_none?: InputMaybe<MemberWhereInput>;
  profileImageMember_some?: InputMaybe<MemberWhereInput>;
  profileImageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  profileImageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  profileImageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type AssociationDetails = Node & {
  __typename?: 'AssociationDetails';
  address: Scalars['String'];
  contactEmail: Scalars['String'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<AssociationDetails>;
  form?: Maybe<Form>;
  /** List of AssociationDetails versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<AssociationDetails>;
  location: Location;
  logo: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slogan?: Maybe<Scalars['String']>;
  socialHandles: Array<SocialHandle>;
  /** System stage field */
  stage: Stage;
  telephone: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type AssociationDetailsCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type AssociationDetailsCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AssociationDetailsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type AssociationDetailsFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AssociationDetailsHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type AssociationDetailsLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type AssociationDetailsLogoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AssociationDetailsPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type AssociationDetailsPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AssociationDetailsScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type AssociationDetailsSocialHandlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SocialHandleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialHandleWhereInput>;
};


export type AssociationDetailsUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type AssociationDetailsUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type AssociationDetailsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssociationDetailsWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssociationDetailsConnection = {
  __typename?: 'AssociationDetailsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssociationDetailsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssociationDetailsCreateInput = {
  address: Scalars['String'];
  contactEmail: Scalars['String'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssociationDetailsCreateLocalizationsInput>;
  location: LocationInput;
  logo: AssetCreateOneInlineInput;
  /** slogan input for default locale (en) */
  slogan?: InputMaybe<Scalars['String']>;
  socialHandles?: InputMaybe<SocialHandleCreateManyInlineInput>;
  telephone: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type AssociationDetailsCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  slogan?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type AssociationDetailsCreateLocalizationInput = {
  /** Localization input */
  data: AssociationDetailsCreateLocalizationDataInput;
  locale: Locale;
};

export type AssociationDetailsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssociationDetailsCreateLocalizationInput>>;
};

export type AssociationDetailsCreateManyInlineInput = {
  /** Connect multiple existing AssociationDetails documents */
  connect?: InputMaybe<Array<AssociationDetailsWhereUniqueInput>>;
  /** Create and connect multiple existing AssociationDetails documents */
  create?: InputMaybe<Array<AssociationDetailsCreateInput>>;
};

export type AssociationDetailsCreateOneInlineInput = {
  /** Connect one existing AssociationDetails document */
  connect?: InputMaybe<AssociationDetailsWhereUniqueInput>;
  /** Create and connect one AssociationDetails document */
  create?: InputMaybe<AssociationDetailsCreateInput>;
};

/** An edge in a connection. */
export type AssociationDetailsEdge = {
  __typename?: 'AssociationDetailsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: AssociationDetails;
};

/** Identifies documents */
export type AssociationDetailsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  address_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  address_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  address_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  address_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssociationDetailsWhereStageInput>;
  documentInStages_none?: InputMaybe<AssociationDetailsWhereStageInput>;
  documentInStages_some?: InputMaybe<AssociationDetailsWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  socialHandles_every?: InputMaybe<SocialHandleWhereInput>;
  socialHandles_none?: InputMaybe<SocialHandleWhereInput>;
  socialHandles_some?: InputMaybe<SocialHandleWhereInput>;
  telephone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  telephone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  telephone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  telephone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  telephone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  telephone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  telephone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  telephone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  telephone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  telephone_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AssociationDetailsOrderByInput {
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  ContactEmailAsc = 'contactEmail_ASC',
  ContactEmailDesc = 'contactEmail_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SloganAsc = 'slogan_ASC',
  SloganDesc = 'slogan_DESC',
  TelephoneAsc = 'telephone_ASC',
  TelephoneDesc = 'telephone_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type AssociationDetailsUpdateInput = {
  address?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssociationDetailsUpdateLocalizationsInput>;
  location?: InputMaybe<LocationInput>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  /** slogan input for default locale (en) */
  slogan?: InputMaybe<Scalars['String']>;
  socialHandles?: InputMaybe<SocialHandleUpdateManyInlineInput>;
  telephone?: InputMaybe<Scalars['String']>;
};

export type AssociationDetailsUpdateLocalizationDataInput = {
  slogan?: InputMaybe<Scalars['String']>;
};

export type AssociationDetailsUpdateLocalizationInput = {
  data: AssociationDetailsUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssociationDetailsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssociationDetailsCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssociationDetailsUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssociationDetailsUpsertLocalizationInput>>;
};

export type AssociationDetailsUpdateManyInlineInput = {
  /** Connect multiple existing AssociationDetails documents */
  connect?: InputMaybe<Array<AssociationDetailsConnectInput>>;
  /** Create and connect multiple AssociationDetails documents */
  create?: InputMaybe<Array<AssociationDetailsCreateInput>>;
  /** Delete multiple AssociationDetails documents */
  delete?: InputMaybe<Array<AssociationDetailsWhereUniqueInput>>;
  /** Disconnect multiple AssociationDetails documents */
  disconnect?: InputMaybe<Array<AssociationDetailsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AssociationDetails documents */
  set?: InputMaybe<Array<AssociationDetailsWhereUniqueInput>>;
  /** Update multiple AssociationDetails documents */
  update?: InputMaybe<Array<AssociationDetailsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AssociationDetails documents */
  upsert?: InputMaybe<Array<AssociationDetailsUpsertWithNestedWhereUniqueInput>>;
};

export type AssociationDetailsUpdateManyInput = {
  address?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssociationDetailsUpdateManyLocalizationsInput>;
  location?: InputMaybe<LocationInput>;
  /** slogan input for default locale (en) */
  slogan?: InputMaybe<Scalars['String']>;
  telephone?: InputMaybe<Scalars['String']>;
};

export type AssociationDetailsUpdateManyLocalizationDataInput = {
  slogan?: InputMaybe<Scalars['String']>;
};

export type AssociationDetailsUpdateManyLocalizationInput = {
  data: AssociationDetailsUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssociationDetailsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssociationDetailsUpdateManyLocalizationInput>>;
};

export type AssociationDetailsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssociationDetailsUpdateManyInput;
  /** Document search */
  where: AssociationDetailsWhereInput;
};

export type AssociationDetailsUpdateOneInlineInput = {
  /** Connect existing AssociationDetails document */
  connect?: InputMaybe<AssociationDetailsWhereUniqueInput>;
  /** Create and connect one AssociationDetails document */
  create?: InputMaybe<AssociationDetailsCreateInput>;
  /** Delete currently connected AssociationDetails document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected AssociationDetails document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single AssociationDetails document */
  update?: InputMaybe<AssociationDetailsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AssociationDetails document */
  upsert?: InputMaybe<AssociationDetailsUpsertWithNestedWhereUniqueInput>;
};

export type AssociationDetailsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssociationDetailsUpdateInput;
  /** Unique document search */
  where: AssociationDetailsWhereUniqueInput;
};

export type AssociationDetailsUpsertInput = {
  /** Create document if it didn't exist */
  create: AssociationDetailsCreateInput;
  /** Update document if it exists */
  update: AssociationDetailsUpdateInput;
};

export type AssociationDetailsUpsertLocalizationInput = {
  create: AssociationDetailsCreateLocalizationDataInput;
  locale: Locale;
  update: AssociationDetailsUpdateLocalizationDataInput;
};

export type AssociationDetailsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssociationDetailsUpsertInput;
  /** Unique document search */
  where: AssociationDetailsWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssociationDetailsWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssociationDetailsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssociationDetailsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  address_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  address_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  address_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  address_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  contactEmail_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  contactEmail_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contactEmail_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  contactEmail_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  contactEmail_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  contactEmail_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  contactEmail_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  contactEmail_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  contactEmail_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssociationDetailsWhereStageInput>;
  documentInStages_none?: InputMaybe<AssociationDetailsWhereStageInput>;
  documentInStages_some?: InputMaybe<AssociationDetailsWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slogan?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slogan_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slogan_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slogan_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slogan_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slogan_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slogan_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slogan_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slogan_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slogan_starts_with?: InputMaybe<Scalars['String']>;
  socialHandles_every?: InputMaybe<SocialHandleWhereInput>;
  socialHandles_none?: InputMaybe<SocialHandleWhereInput>;
  socialHandles_some?: InputMaybe<SocialHandleWhereInput>;
  telephone?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  telephone_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  telephone_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  telephone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  telephone_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  telephone_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  telephone_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  telephone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  telephone_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  telephone_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssociationDetailsWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssociationDetailsWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssociationDetailsWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssociationDetailsWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssociationDetailsWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References AssociationDetails record uniquely */
export type AssociationDetailsWhereUniqueInput = {
  contactEmail?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export enum BackgroundColorVariant {
  Secondary = 'SECONDARY',
  SecondaryDark = 'SECONDARY_DARK',
  White = 'WHITE'
}

export type Banner = Node & {
  __typename?: 'Banner';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  cta?: Maybe<Button>;
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<Banner>;
  headline: Scalars['String'];
  /** List of Banner versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  image: Asset;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Banner>;
  page?: Maybe<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type BannerCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type BannerHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type BannerImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type BannerPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BannerUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type BannerConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BannerWhereUniqueInput;
};

/** A connection to a list of items. */
export type BannerConnection = {
  __typename?: 'BannerConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BannerEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  cta?: InputMaybe<ButtonCreateOneInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  image: AssetCreateOneInlineInput;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<BannerCreateLocalizationsInput>;
  page?: InputMaybe<PageCreateOneInlineInput>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type BannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  headline: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type BannerCreateLocalizationInput = {
  /** Localization input */
  data: BannerCreateLocalizationDataInput;
  locale: Locale;
};

export type BannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
};

export type BannerCreateManyInlineInput = {
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Create and connect multiple existing Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
};

export type BannerCreateOneInlineInput = {
  /** Connect one existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
};

/** An edge in a connection. */
export type BannerEdge = {
  __typename?: 'BannerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Banner;
};

/** Identifies documents */
export type BannerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cta?: InputMaybe<ButtonWhereInput>;
  documentInStages_every?: InputMaybe<BannerWhereStageInput>;
  documentInStages_none?: InputMaybe<BannerWhereStageInput>;
  documentInStages_some?: InputMaybe<BannerWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum BannerOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum BannerSize {
  Large = 'LARGE',
  Small = 'SMALL'
}

export type BannerUpdateInput = {
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<BannerUpdateLocalizationsInput>;
  page?: InputMaybe<PageUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type BannerUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type BannerUpdateLocalizationInput = {
  data: BannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<BannerUpsertLocalizationInput>>;
};

export type BannerUpdateManyInlineInput = {
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerConnectInput>>;
  /** Create and connect multiple Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
  /** Delete multiple Banner documents */
  delete?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Disconnect multiple Banner documents */
  disconnect?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Banner documents */
  set?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Update multiple Banner documents */
  update?: InputMaybe<Array<BannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Banner documents */
  upsert?: InputMaybe<Array<BannerUpsertWithNestedWhereUniqueInput>>;
};

export type BannerUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<BannerUpdateManyLocalizationsInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type BannerUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
};

export type BannerUpdateManyLocalizationInput = {
  data: BannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateManyLocalizationInput>>;
};

export type BannerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BannerUpdateManyInput;
  /** Document search */
  where: BannerWhereInput;
};

export type BannerUpdateOneInlineInput = {
  /** Connect existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
  /** Delete currently connected Banner document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Banner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Banner document */
  update?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Banner document */
  upsert?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
};

export type BannerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BannerUpdateInput;
  /** Unique document search */
  where: BannerWhereUniqueInput;
};

export type BannerUpsertInput = {
  /** Create document if it didn't exist */
  create: BannerCreateInput;
  /** Update document if it exists */
  update: BannerUpdateInput;
};

export type BannerUpsertLocalizationInput = {
  create: BannerCreateLocalizationDataInput;
  locale: Locale;
  update: BannerUpdateLocalizationDataInput;
};

export type BannerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BannerUpsertInput;
  /** Unique document search */
  where: BannerWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BannerWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BannerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cta?: InputMaybe<ButtonWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<BannerWhereStageInput>;
  documentInStages_none?: InputMaybe<BannerWhereStageInput>;
  documentInStages_some?: InputMaybe<BannerWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BannerWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BannerWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Banner record uniquely */
export type BannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

export type Button = {
  __typename?: 'Button';
  /** The unique identifier */
  id: Scalars['ID'];
  link?: Maybe<Link>;
  /** System stage field */
  stage: Stage;
  theme?: Maybe<ThemeColor>;
  variant?: Maybe<ButtonVariant>;
};


export type ButtonLinkArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type ButtonConnection = {
  __typename?: 'ButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ButtonCreateInput = {
  link?: InputMaybe<LinkCreateOneInlineInput>;
  theme?: InputMaybe<ThemeColor>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonCreateManyInlineInput = {
  /** Create and connect multiple existing Button documents */
  create?: InputMaybe<Array<ButtonCreateInput>>;
};

export type ButtonCreateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
};

export type ButtonCreateWithPositionInput = {
  /** Document to create */
  data: ButtonCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ButtonEdge = {
  __typename?: 'ButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Button;
};

/** Identifies documents */
export type ButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<LinkWhereInput>;
  theme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  theme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  theme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  theme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum ButtonOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ThemeAsc = 'theme_ASC',
  ThemeDesc = 'theme_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type ButtonParent = Banner | CarouselSlide | Footer | Navigation | ProjectSection | SectionWithImage | ServiceSection | TeamSection;

export type ButtonParentConnectInput = {
  Banner?: InputMaybe<BannerConnectInput>;
  CarouselSlide?: InputMaybe<CarouselSlideConnectInput>;
  Footer?: InputMaybe<FooterConnectInput>;
  Navigation?: InputMaybe<NavigationConnectInput>;
  ProjectSection?: InputMaybe<ProjectSectionConnectInput>;
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
  ServiceSection?: InputMaybe<ServiceSectionConnectInput>;
  TeamSection?: InputMaybe<TeamSectionConnectInput>;
};

export type ButtonParentCreateInput = {
  Banner?: InputMaybe<BannerCreateInput>;
  CarouselSlide?: InputMaybe<CarouselSlideCreateInput>;
  Footer?: InputMaybe<FooterCreateInput>;
  Navigation?: InputMaybe<NavigationCreateInput>;
  ProjectSection?: InputMaybe<ProjectSectionCreateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
  ServiceSection?: InputMaybe<ServiceSectionCreateInput>;
  TeamSection?: InputMaybe<TeamSectionCreateInput>;
};

export type ButtonParentCreateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Create and connect multiple existing ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
};

export type ButtonParentCreateOneInlineInput = {
  /** Connect one existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
};

export type ButtonParentUpdateInput = {
  Banner?: InputMaybe<BannerUpdateInput>;
  CarouselSlide?: InputMaybe<CarouselSlideUpdateInput>;
  Footer?: InputMaybe<FooterUpdateInput>;
  Navigation?: InputMaybe<NavigationUpdateInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateInput>;
};

export type ButtonParentUpdateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentConnectInput>>;
  /** Create and connect multiple ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
  /** Delete multiple ButtonParent documents */
  delete?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Disconnect multiple ButtonParent documents */
  disconnect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ButtonParent documents */
  set?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Update multiple ButtonParent documents */
  update?: InputMaybe<Array<ButtonParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ButtonParent documents */
  upsert?: InputMaybe<Array<ButtonParentUpsertWithNestedWhereUniqueInput>>;
};

export type ButtonParentUpdateManyWithNestedWhereInput = {
  Banner?: InputMaybe<BannerUpdateManyWithNestedWhereInput>;
  CarouselSlide?: InputMaybe<CarouselSlideUpdateManyWithNestedWhereInput>;
  Footer?: InputMaybe<FooterUpdateManyWithNestedWhereInput>;
  Navigation?: InputMaybe<NavigationUpdateManyWithNestedWhereInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateManyWithNestedWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateManyWithNestedWhereInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateManyWithNestedWhereInput>;
};

export type ButtonParentUpdateOneInlineInput = {
  /** Connect existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
  /** Delete currently connected ButtonParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ButtonParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ButtonParent document */
  update?: InputMaybe<ButtonParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ButtonParent document */
  upsert?: InputMaybe<ButtonParentUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentUpdateWithNestedWhereUniqueInput = {
  Banner?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
  CarouselSlide?: InputMaybe<CarouselSlideUpdateWithNestedWhereUniqueInput>;
  Footer?: InputMaybe<FooterUpdateWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateWithNestedWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateWithNestedWhereUniqueInput>;
};

export type ButtonParentUpsertWithNestedWhereUniqueInput = {
  Banner?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
  CarouselSlide?: InputMaybe<CarouselSlideUpsertWithNestedWhereUniqueInput>;
  Footer?: InputMaybe<FooterUpsertWithNestedWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpsertWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpsertWithNestedWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentWhereInput = {
  Banner?: InputMaybe<BannerWhereInput>;
  CarouselSlide?: InputMaybe<CarouselSlideWhereInput>;
  Footer?: InputMaybe<FooterWhereInput>;
  Navigation?: InputMaybe<NavigationWhereInput>;
  ProjectSection?: InputMaybe<ProjectSectionWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
  ServiceSection?: InputMaybe<ServiceSectionWhereInput>;
  TeamSection?: InputMaybe<TeamSectionWhereInput>;
};

export type ButtonParentWhereUniqueInput = {
  Banner?: InputMaybe<BannerWhereUniqueInput>;
  CarouselSlide?: InputMaybe<CarouselSlideWhereUniqueInput>;
  Footer?: InputMaybe<FooterWhereUniqueInput>;
  Navigation?: InputMaybe<NavigationWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionWhereUniqueInput>;
};

export type ButtonUpdateInput = {
  link?: InputMaybe<LinkUpdateOneInlineInput>;
  theme?: InputMaybe<ThemeColor>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyInlineInput = {
  /** Create and connect multiple Button component instances */
  create?: InputMaybe<Array<ButtonCreateWithPositionInput>>;
  /** Delete multiple Button documents */
  delete?: InputMaybe<Array<ButtonWhereUniqueInput>>;
  /** Update multiple Button component instances */
  update?: InputMaybe<Array<ButtonUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Button component instances */
  upsert?: InputMaybe<Array<ButtonUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ButtonUpdateManyInput = {
  theme?: InputMaybe<ThemeColor>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ButtonUpdateManyInput;
  /** Document search */
  where: ButtonWhereInput;
};

export type ButtonUpdateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
  /** Delete currently connected Button document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Button document */
  update?: InputMaybe<ButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Button document */
  upsert?: InputMaybe<ButtonUpsertWithNestedWhereUniqueInput>;
};

export type ButtonUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ButtonUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ButtonUpdateInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: ButtonCreateInput;
  /** Update document if it exists */
  update: ButtonUpdateInput;
};

export type ButtonUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ButtonUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ButtonUpsertInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export enum ButtonVariant {
  Outline = 'OUTLINE',
  Solid = 'SOLID'
}

/** Identifies documents */
export type ButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<LinkWhereInput>;
  theme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  theme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  theme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  theme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** References Button record uniquely */
export type ButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Carousel = Node & {
  __typename?: 'Carousel';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Carousel>;
  /** List of Carousel versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Carousel>;
  page?: Maybe<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slides: Array<CarouselSlide>;
  /** System stage field */
  stage: Stage;
  /** This field helps to organise the different carousels used in the application */
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CarouselCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CarouselCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CarouselDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type CarouselHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type CarouselLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type CarouselPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CarouselPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CarouselPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CarouselScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CarouselSlidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CarouselSlideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CarouselSlideWhereInput>;
};


export type CarouselUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CarouselUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CarouselConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CarouselWhereUniqueInput;
};

/** A connection to a list of items. */
export type CarouselConnection = {
  __typename?: 'CarouselConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CarouselEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CarouselCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CarouselCreateLocalizationsInput>;
  page?: InputMaybe<PageCreateOneInlineInput>;
  slides?: InputMaybe<CarouselSlideCreateManyInlineInput>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CarouselCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CarouselCreateLocalizationInput = {
  /** Localization input */
  data: CarouselCreateLocalizationDataInput;
  locale: Locale;
};

export type CarouselCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CarouselCreateLocalizationInput>>;
};

export type CarouselCreateManyInlineInput = {
  /** Connect multiple existing Carousel documents */
  connect?: InputMaybe<Array<CarouselWhereUniqueInput>>;
  /** Create and connect multiple existing Carousel documents */
  create?: InputMaybe<Array<CarouselCreateInput>>;
};

export type CarouselCreateOneInlineInput = {
  /** Connect one existing Carousel document */
  connect?: InputMaybe<CarouselWhereUniqueInput>;
  /** Create and connect one Carousel document */
  create?: InputMaybe<CarouselCreateInput>;
};

/** An edge in a connection. */
export type CarouselEdge = {
  __typename?: 'CarouselEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Carousel;
};

/** Identifies documents */
export type CarouselManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<CarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<CarouselWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slides_every?: InputMaybe<CarouselSlideWhereInput>;
  slides_none?: InputMaybe<CarouselSlideWhereInput>;
  slides_some?: InputMaybe<CarouselSlideWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CarouselOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CarouselSlide = {
  __typename?: 'CarouselSlide';
  cta: Button;
  description: Scalars['String'];
  headline: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  image: Asset;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<CarouselSlide>;
  /** System stage field */
  stage: Stage;
};


export type CarouselSlideCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CarouselSlideImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CarouselSlideLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type CarouselSlideConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CarouselSlideWhereUniqueInput;
};

/** A connection to a list of items. */
export type CarouselSlideConnection = {
  __typename?: 'CarouselSlideConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CarouselSlideEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CarouselSlideCreateInput = {
  cta: ButtonCreateOneInlineInput;
  /** description input for default locale (en) */
  description: Scalars['String'];
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  image: AssetCreateOneInlineInput;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CarouselSlideCreateLocalizationsInput>;
};

export type CarouselSlideCreateLocalizationDataInput = {
  description: Scalars['String'];
  headline: Scalars['String'];
};

export type CarouselSlideCreateLocalizationInput = {
  /** Localization input */
  data: CarouselSlideCreateLocalizationDataInput;
  locale: Locale;
};

export type CarouselSlideCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CarouselSlideCreateLocalizationInput>>;
};

export type CarouselSlideCreateManyInlineInput = {
  /** Create and connect multiple existing CarouselSlide documents */
  create?: InputMaybe<Array<CarouselSlideCreateInput>>;
};

export type CarouselSlideCreateOneInlineInput = {
  /** Create and connect one CarouselSlide document */
  create?: InputMaybe<CarouselSlideCreateInput>;
};

export type CarouselSlideCreateWithPositionInput = {
  /** Document to create */
  data: CarouselSlideCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CarouselSlideEdge = {
  __typename?: 'CarouselSlideEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CarouselSlide;
};

/** Identifies documents */
export type CarouselSlideManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
};

export enum CarouselSlideOrderByInput {
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CarouselSlideParent = Carousel;

export type CarouselSlideParentConnectInput = {
  Carousel?: InputMaybe<CarouselConnectInput>;
};

export type CarouselSlideParentCreateInput = {
  Carousel?: InputMaybe<CarouselCreateInput>;
};

export type CarouselSlideParentCreateManyInlineInput = {
  /** Connect multiple existing CarouselSlideParent documents */
  connect?: InputMaybe<Array<CarouselSlideParentWhereUniqueInput>>;
  /** Create and connect multiple existing CarouselSlideParent documents */
  create?: InputMaybe<Array<CarouselSlideParentCreateInput>>;
};

export type CarouselSlideParentCreateOneInlineInput = {
  /** Connect one existing CarouselSlideParent document */
  connect?: InputMaybe<CarouselSlideParentWhereUniqueInput>;
  /** Create and connect one CarouselSlideParent document */
  create?: InputMaybe<CarouselSlideParentCreateInput>;
};

export type CarouselSlideParentUpdateInput = {
  Carousel?: InputMaybe<CarouselUpdateInput>;
};

export type CarouselSlideParentUpdateManyInlineInput = {
  /** Connect multiple existing CarouselSlideParent documents */
  connect?: InputMaybe<Array<CarouselSlideParentConnectInput>>;
  /** Create and connect multiple CarouselSlideParent documents */
  create?: InputMaybe<Array<CarouselSlideParentCreateInput>>;
  /** Delete multiple CarouselSlideParent documents */
  delete?: InputMaybe<Array<CarouselSlideParentWhereUniqueInput>>;
  /** Disconnect multiple CarouselSlideParent documents */
  disconnect?: InputMaybe<Array<CarouselSlideParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CarouselSlideParent documents */
  set?: InputMaybe<Array<CarouselSlideParentWhereUniqueInput>>;
  /** Update multiple CarouselSlideParent documents */
  update?: InputMaybe<Array<CarouselSlideParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CarouselSlideParent documents */
  upsert?: InputMaybe<Array<CarouselSlideParentUpsertWithNestedWhereUniqueInput>>;
};

export type CarouselSlideParentUpdateManyWithNestedWhereInput = {
  Carousel?: InputMaybe<CarouselUpdateManyWithNestedWhereInput>;
};

export type CarouselSlideParentUpdateOneInlineInput = {
  /** Connect existing CarouselSlideParent document */
  connect?: InputMaybe<CarouselSlideParentWhereUniqueInput>;
  /** Create and connect one CarouselSlideParent document */
  create?: InputMaybe<CarouselSlideParentCreateInput>;
  /** Delete currently connected CarouselSlideParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CarouselSlideParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CarouselSlideParent document */
  update?: InputMaybe<CarouselSlideParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CarouselSlideParent document */
  upsert?: InputMaybe<CarouselSlideParentUpsertWithNestedWhereUniqueInput>;
};

export type CarouselSlideParentUpdateWithNestedWhereUniqueInput = {
  Carousel?: InputMaybe<CarouselUpdateWithNestedWhereUniqueInput>;
};

export type CarouselSlideParentUpsertWithNestedWhereUniqueInput = {
  Carousel?: InputMaybe<CarouselUpsertWithNestedWhereUniqueInput>;
};

export type CarouselSlideParentWhereInput = {
  Carousel?: InputMaybe<CarouselWhereInput>;
};

export type CarouselSlideParentWhereUniqueInput = {
  Carousel?: InputMaybe<CarouselWhereUniqueInput>;
};

export type CarouselSlideUpdateInput = {
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<CarouselSlideUpdateLocalizationsInput>;
};

export type CarouselSlideUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type CarouselSlideUpdateLocalizationInput = {
  data: CarouselSlideUpdateLocalizationDataInput;
  locale: Locale;
};

export type CarouselSlideUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CarouselSlideCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<CarouselSlideUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<CarouselSlideUpsertLocalizationInput>>;
};

export type CarouselSlideUpdateManyInlineInput = {
  /** Create and connect multiple CarouselSlide component instances */
  create?: InputMaybe<Array<CarouselSlideCreateWithPositionInput>>;
  /** Delete multiple CarouselSlide documents */
  delete?: InputMaybe<Array<CarouselSlideWhereUniqueInput>>;
  /** Update multiple CarouselSlide component instances */
  update?: InputMaybe<Array<CarouselSlideUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CarouselSlide component instances */
  upsert?: InputMaybe<Array<CarouselSlideUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CarouselSlideUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<CarouselSlideUpdateManyLocalizationsInput>;
};

export type CarouselSlideUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type CarouselSlideUpdateManyLocalizationInput = {
  data: CarouselSlideUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type CarouselSlideUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<CarouselSlideUpdateManyLocalizationInput>>;
};

export type CarouselSlideUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CarouselSlideUpdateManyInput;
  /** Document search */
  where: CarouselSlideWhereInput;
};

export type CarouselSlideUpdateOneInlineInput = {
  /** Create and connect one CarouselSlide document */
  create?: InputMaybe<CarouselSlideCreateInput>;
  /** Delete currently connected CarouselSlide document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CarouselSlide document */
  update?: InputMaybe<CarouselSlideUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CarouselSlide document */
  upsert?: InputMaybe<CarouselSlideUpsertWithNestedWhereUniqueInput>;
};

export type CarouselSlideUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CarouselSlideUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CarouselSlideWhereUniqueInput;
};

export type CarouselSlideUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CarouselSlideUpdateInput;
  /** Unique document search */
  where: CarouselSlideWhereUniqueInput;
};

export type CarouselSlideUpsertInput = {
  /** Create document if it didn't exist */
  create: CarouselSlideCreateInput;
  /** Update document if it exists */
  update: CarouselSlideUpdateInput;
};

export type CarouselSlideUpsertLocalizationInput = {
  create: CarouselSlideCreateLocalizationDataInput;
  locale: Locale;
  update: CarouselSlideUpdateLocalizationDataInput;
};

export type CarouselSlideUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CarouselSlideUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CarouselSlideWhereUniqueInput;
};

export type CarouselSlideUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CarouselSlideUpsertInput;
  /** Unique document search */
  where: CarouselSlideWhereUniqueInput;
};

/** Identifies documents */
export type CarouselSlideWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CarouselSlideWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
};

/** References CarouselSlide record uniquely */
export type CarouselSlideWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CarouselUpdateInput = {
  /** Manage document localizations */
  localizations?: InputMaybe<CarouselUpdateLocalizationsInput>;
  page?: InputMaybe<PageUpdateOneInlineInput>;
  slides?: InputMaybe<CarouselSlideUpdateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type CarouselUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CarouselCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type CarouselUpdateManyInlineInput = {
  /** Connect multiple existing Carousel documents */
  connect?: InputMaybe<Array<CarouselConnectInput>>;
  /** Create and connect multiple Carousel documents */
  create?: InputMaybe<Array<CarouselCreateInput>>;
  /** Delete multiple Carousel documents */
  delete?: InputMaybe<Array<CarouselWhereUniqueInput>>;
  /** Disconnect multiple Carousel documents */
  disconnect?: InputMaybe<Array<CarouselWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Carousel documents */
  set?: InputMaybe<Array<CarouselWhereUniqueInput>>;
  /** Update multiple Carousel documents */
  update?: InputMaybe<Array<CarouselUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Carousel documents */
  upsert?: InputMaybe<Array<CarouselUpsertWithNestedWhereUniqueInput>>;
};

export type CarouselUpdateManyInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type CarouselUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CarouselUpdateManyInput;
  /** Document search */
  where: CarouselWhereInput;
};

export type CarouselUpdateOneInlineInput = {
  /** Connect existing Carousel document */
  connect?: InputMaybe<CarouselWhereUniqueInput>;
  /** Create and connect one Carousel document */
  create?: InputMaybe<CarouselCreateInput>;
  /** Delete currently connected Carousel document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Carousel document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Carousel document */
  update?: InputMaybe<CarouselUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Carousel document */
  upsert?: InputMaybe<CarouselUpsertWithNestedWhereUniqueInput>;
};

export type CarouselUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CarouselUpdateInput;
  /** Unique document search */
  where: CarouselWhereUniqueInput;
};

export type CarouselUpsertInput = {
  /** Create document if it didn't exist */
  create: CarouselCreateInput;
  /** Update document if it exists */
  update: CarouselUpdateInput;
};

export type CarouselUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CarouselUpsertInput;
  /** Unique document search */
  where: CarouselWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CarouselWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CarouselWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<CarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<CarouselWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slides_every?: InputMaybe<CarouselSlideWhereInput>;
  slides_none?: InputMaybe<CarouselSlideWhereInput>;
  slides_some?: InputMaybe<CarouselSlideWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CarouselWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CarouselWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CarouselWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CarouselWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CarouselWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Carousel record uniquely */
export type CarouselWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** This model is used to group projects and events together */
export type Category = Node & {
  __typename?: 'Category';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description?: Maybe<CategoryDescriptionRichText>;
  /** Get the document in other stages */
  documentInStages: Array<Category>;
  events: Array<Event>;
  /** List of Category versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Category>;
  name: Scalars['String'];
  projects: Array<Project>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** This model is used to group projects and events together */
export type CategoryCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is used to group projects and events together */
export type CategoryCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model is used to group projects and events together */
export type CategoryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** This model is used to group projects and events together */
export type CategoryEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


/** This model is used to group projects and events together */
export type CategoryHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** This model is used to group projects and events together */
export type CategoryLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** This model is used to group projects and events together */
export type CategoryProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};


/** This model is used to group projects and events together */
export type CategoryPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is used to group projects and events together */
export type CategoryPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model is used to group projects and events together */
export type CategoryScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** This model is used to group projects and events together */
export type CategoryUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is used to group projects and events together */
export type CategoryUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CategoryConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CategoryWhereUniqueInput;
};

/** A connection to a list of items. */
export type CategoryConnection = {
  __typename?: 'CategoryConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CategoryEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CategoryCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  events?: InputMaybe<EventCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CategoryCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  projects?: InputMaybe<ProjectCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CategoryCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  name: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CategoryCreateLocalizationInput = {
  /** Localization input */
  data: CategoryCreateLocalizationDataInput;
  locale: Locale;
};

export type CategoryCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CategoryCreateLocalizationInput>>;
};

export type CategoryCreateManyInlineInput = {
  /** Connect multiple existing Category documents */
  connect?: InputMaybe<Array<CategoryWhereUniqueInput>>;
  /** Create and connect multiple existing Category documents */
  create?: InputMaybe<Array<CategoryCreateInput>>;
};

export type CategoryCreateOneInlineInput = {
  /** Connect one existing Category document */
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  /** Create and connect one Category document */
  create?: InputMaybe<CategoryCreateInput>;
};

export type CategoryDescriptionRichText = {
  __typename?: 'CategoryDescriptionRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<CategoryDescriptionRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type CategoryDescriptionRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type CategoryDescriptionRichTextEmbeddedTypes = Collaborator | Event | Project;

/** An edge in a connection. */
export type CategoryEdge = {
  __typename?: 'CategoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Category;
};

/** Identifies documents */
export type CategoryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CategoryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CategoryWhereStageInput>;
  documentInStages_none?: InputMaybe<CategoryWhereStageInput>;
  documentInStages_some?: InputMaybe<CategoryWhereStageInput>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CategoryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CategoryUpdateInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  events?: InputMaybe<EventUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<CategoryUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<ProjectUpdateManyInlineInput>;
};

export type CategoryUpdateLocalizationDataInput = {
  name?: InputMaybe<Scalars['String']>;
};

export type CategoryUpdateLocalizationInput = {
  data: CategoryUpdateLocalizationDataInput;
  locale: Locale;
};

export type CategoryUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CategoryCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<CategoryUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<CategoryUpsertLocalizationInput>>;
};

export type CategoryUpdateManyInlineInput = {
  /** Connect multiple existing Category documents */
  connect?: InputMaybe<Array<CategoryConnectInput>>;
  /** Create and connect multiple Category documents */
  create?: InputMaybe<Array<CategoryCreateInput>>;
  /** Delete multiple Category documents */
  delete?: InputMaybe<Array<CategoryWhereUniqueInput>>;
  /** Disconnect multiple Category documents */
  disconnect?: InputMaybe<Array<CategoryWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Category documents */
  set?: InputMaybe<Array<CategoryWhereUniqueInput>>;
  /** Update multiple Category documents */
  update?: InputMaybe<Array<CategoryUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Category documents */
  upsert?: InputMaybe<Array<CategoryUpsertWithNestedWhereUniqueInput>>;
};

export type CategoryUpdateManyInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
};

export type CategoryUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CategoryUpdateManyInput;
  /** Document search */
  where: CategoryWhereInput;
};

export type CategoryUpdateOneInlineInput = {
  /** Connect existing Category document */
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  /** Create and connect one Category document */
  create?: InputMaybe<CategoryCreateInput>;
  /** Delete currently connected Category document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Category document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Category document */
  update?: InputMaybe<CategoryUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Category document */
  upsert?: InputMaybe<CategoryUpsertWithNestedWhereUniqueInput>;
};

export type CategoryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CategoryUpdateInput;
  /** Unique document search */
  where: CategoryWhereUniqueInput;
};

export type CategoryUpsertInput = {
  /** Create document if it didn't exist */
  create: CategoryCreateInput;
  /** Update document if it exists */
  update: CategoryUpdateInput;
};

export type CategoryUpsertLocalizationInput = {
  create: CategoryCreateLocalizationDataInput;
  locale: Locale;
  update: CategoryUpdateLocalizationDataInput;
};

export type CategoryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CategoryUpsertInput;
  /** Unique document search */
  where: CategoryWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CategoryWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CategoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CategoryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CategoryWhereStageInput>;
  documentInStages_none?: InputMaybe<CategoryWhereStageInput>;
  documentInStages_some?: InputMaybe<CategoryWhereStageInput>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CategoryWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CategoryWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CategoryWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CategoryWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CategoryWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Category record uniquely */
export type CategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Collaborator = Node & {
  __typename?: 'Collaborator';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** description in detail of what the apport of the collaborator is  */
  description?: Maybe<CollaboratorDescriptionRichText>;
  /** Get the document in other stages */
  documentInStages: Array<Collaborator>;
  events: Array<Event>;
  /** List of Collaborator versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Collaborator>;
  logo: Asset;
  name: Scalars['String'];
  projects: Array<Project>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  type: CollaboratorType;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CollaboratorCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CollaboratorCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CollaboratorDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type CollaboratorEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


export type CollaboratorHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type CollaboratorLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type CollaboratorLogoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CollaboratorProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type CollaboratorPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CollaboratorPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CollaboratorScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CollaboratorUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type CollaboratorUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CollaboratorConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CollaboratorWhereUniqueInput;
};

/** A connection to a list of items. */
export type CollaboratorConnection = {
  __typename?: 'CollaboratorConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CollaboratorEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CollaboratorCreateInput = {
  cl86guedx1lak01t36q03hvug?: InputMaybe<CollaboratorSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  events?: InputMaybe<EventCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CollaboratorCreateLocalizationsInput>;
  logo: AssetCreateOneInlineInput;
  name: Scalars['String'];
  projects?: InputMaybe<ProjectCreateManyInlineInput>;
  type: CollaboratorType;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CollaboratorCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CollaboratorCreateLocalizationInput = {
  /** Localization input */
  data: CollaboratorCreateLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CollaboratorCreateLocalizationInput>>;
};

export type CollaboratorCreateManyInlineInput = {
  /** Connect multiple existing Collaborator documents */
  connect?: InputMaybe<Array<CollaboratorWhereUniqueInput>>;
  /** Create and connect multiple existing Collaborator documents */
  create?: InputMaybe<Array<CollaboratorCreateInput>>;
};

export type CollaboratorCreateOneInlineInput = {
  /** Connect one existing Collaborator document */
  connect?: InputMaybe<CollaboratorWhereUniqueInput>;
  /** Create and connect one Collaborator document */
  create?: InputMaybe<CollaboratorCreateInput>;
};

export type CollaboratorDescriptionRichText = {
  __typename?: 'CollaboratorDescriptionRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<CollaboratorDescriptionRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type CollaboratorDescriptionRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type CollaboratorDescriptionRichTextEmbeddedTypes = Event | Project;

/** An edge in a connection. */
export type CollaboratorEdge = {
  __typename?: 'CollaboratorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Collaborator;
};

/** Identifies documents */
export type CollaboratorManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CollaboratorWhereStageInput>;
  documentInStages_none?: InputMaybe<CollaboratorWhereStageInput>;
  documentInStages_some?: InputMaybe<CollaboratorWhereStageInput>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<CollaboratorType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<CollaboratorType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<CollaboratorType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<CollaboratorType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CollaboratorOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CollaboratorSection = {
  __typename?: 'CollaboratorSection';
  collaborators: Array<Collaborator>;
  headline?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<CollaboratorSection>;
  /** System stage field */
  stage: Stage;
};


export type CollaboratorSectionCollaboratorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorWhereInput>;
};


export type CollaboratorSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type CollaboratorSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CollaboratorSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CollaboratorSectionConnection = {
  __typename?: 'CollaboratorSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CollaboratorSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CollaboratorSectionCreateInput = {
  collaborators?: InputMaybe<CollaboratorCreateManyInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<CollaboratorSectionCreateLocalizationsInput>;
};

export type CollaboratorSectionCreateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type CollaboratorSectionCreateLocalizationInput = {
  /** Localization input */
  data: CollaboratorSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<CollaboratorSectionCreateLocalizationInput>>;
};

export type CollaboratorSectionCreateManyInlineInput = {
  /** Create and connect multiple existing CollaboratorSection documents */
  create?: InputMaybe<Array<CollaboratorSectionCreateInput>>;
};

export type CollaboratorSectionCreateOneInlineInput = {
  /** Create and connect one CollaboratorSection document */
  create?: InputMaybe<CollaboratorSectionCreateInput>;
};

export type CollaboratorSectionCreateWithPositionInput = {
  /** Document to create */
  data: CollaboratorSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CollaboratorSectionEdge = {
  __typename?: 'CollaboratorSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CollaboratorSection;
};

/** Identifies documents */
export type CollaboratorSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum CollaboratorSectionOrderByInput {
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CollaboratorSectionParent = Section;

export type CollaboratorSectionParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type CollaboratorSectionParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type CollaboratorSectionParentCreateManyInlineInput = {
  /** Connect multiple existing CollaboratorSectionParent documents */
  connect?: InputMaybe<Array<CollaboratorSectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing CollaboratorSectionParent documents */
  create?: InputMaybe<Array<CollaboratorSectionParentCreateInput>>;
};

export type CollaboratorSectionParentCreateOneInlineInput = {
  /** Connect one existing CollaboratorSectionParent document */
  connect?: InputMaybe<CollaboratorSectionParentWhereUniqueInput>;
  /** Create and connect one CollaboratorSectionParent document */
  create?: InputMaybe<CollaboratorSectionParentCreateInput>;
};

export type CollaboratorSectionParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type CollaboratorSectionParentUpdateManyInlineInput = {
  /** Connect multiple existing CollaboratorSectionParent documents */
  connect?: InputMaybe<Array<CollaboratorSectionParentConnectInput>>;
  /** Create and connect multiple CollaboratorSectionParent documents */
  create?: InputMaybe<Array<CollaboratorSectionParentCreateInput>>;
  /** Delete multiple CollaboratorSectionParent documents */
  delete?: InputMaybe<Array<CollaboratorSectionParentWhereUniqueInput>>;
  /** Disconnect multiple CollaboratorSectionParent documents */
  disconnect?: InputMaybe<Array<CollaboratorSectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CollaboratorSectionParent documents */
  set?: InputMaybe<Array<CollaboratorSectionParentWhereUniqueInput>>;
  /** Update multiple CollaboratorSectionParent documents */
  update?: InputMaybe<Array<CollaboratorSectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CollaboratorSectionParent documents */
  upsert?: InputMaybe<Array<CollaboratorSectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type CollaboratorSectionParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type CollaboratorSectionParentUpdateOneInlineInput = {
  /** Connect existing CollaboratorSectionParent document */
  connect?: InputMaybe<CollaboratorSectionParentWhereUniqueInput>;
  /** Create and connect one CollaboratorSectionParent document */
  create?: InputMaybe<CollaboratorSectionParentCreateInput>;
  /** Delete currently connected CollaboratorSectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CollaboratorSectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollaboratorSectionParent document */
  update?: InputMaybe<CollaboratorSectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollaboratorSectionParent document */
  upsert?: InputMaybe<CollaboratorSectionParentUpsertWithNestedWhereUniqueInput>;
};

export type CollaboratorSectionParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type CollaboratorSectionParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type CollaboratorSectionParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type CollaboratorSectionParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type CollaboratorSectionUpdateInput = {
  collaborators?: InputMaybe<CollaboratorUpdateManyInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<CollaboratorSectionUpdateLocalizationsInput>;
};

export type CollaboratorSectionUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type CollaboratorSectionUpdateLocalizationInput = {
  data: CollaboratorSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CollaboratorSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<CollaboratorSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<CollaboratorSectionUpsertLocalizationInput>>;
};

export type CollaboratorSectionUpdateManyInlineInput = {
  /** Create and connect multiple CollaboratorSection component instances */
  create?: InputMaybe<Array<CollaboratorSectionCreateWithPositionInput>>;
  /** Delete multiple CollaboratorSection documents */
  delete?: InputMaybe<Array<CollaboratorSectionWhereUniqueInput>>;
  /** Update multiple CollaboratorSection component instances */
  update?: InputMaybe<Array<CollaboratorSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CollaboratorSection component instances */
  upsert?: InputMaybe<Array<CollaboratorSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CollaboratorSectionUpdateManyInput = {
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<CollaboratorSectionUpdateManyLocalizationsInput>;
};

export type CollaboratorSectionUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type CollaboratorSectionUpdateManyLocalizationInput = {
  data: CollaboratorSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<CollaboratorSectionUpdateManyLocalizationInput>>;
};

export type CollaboratorSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CollaboratorSectionUpdateManyInput;
  /** Document search */
  where: CollaboratorSectionWhereInput;
};

export type CollaboratorSectionUpdateOneInlineInput = {
  /** Create and connect one CollaboratorSection document */
  create?: InputMaybe<CollaboratorSectionCreateInput>;
  /** Delete currently connected CollaboratorSection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollaboratorSection document */
  update?: InputMaybe<CollaboratorSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollaboratorSection document */
  upsert?: InputMaybe<CollaboratorSectionUpsertWithNestedWhereUniqueInput>;
};

export type CollaboratorSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CollaboratorSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CollaboratorSectionWhereUniqueInput;
};

export type CollaboratorSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CollaboratorSectionUpdateInput;
  /** Unique document search */
  where: CollaboratorSectionWhereUniqueInput;
};

export type CollaboratorSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: CollaboratorSectionCreateInput;
  /** Update document if it exists */
  update: CollaboratorSectionUpdateInput;
};

export type CollaboratorSectionUpsertLocalizationInput = {
  create: CollaboratorSectionCreateLocalizationDataInput;
  locale: Locale;
  update: CollaboratorSectionUpdateLocalizationDataInput;
};

export type CollaboratorSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CollaboratorSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CollaboratorSectionWhereUniqueInput;
};

export type CollaboratorSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CollaboratorSectionUpsertInput;
  /** Unique document search */
  where: CollaboratorSectionWhereUniqueInput;
};

/** Identifies documents */
export type CollaboratorSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollaboratorSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References CollaboratorSection record uniquely */
export type CollaboratorSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** A collaborator in the association is either a partner or a sponsor.  */
export enum CollaboratorType {
  Partner = 'PARTNER',
  Sponsor = 'SPONSOR'
}

export type CollaboratorUpdateInput = {
  cl86guedx1lak01t36q03hvug?: InputMaybe<CollaboratorSectionUpdateManyInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  events?: InputMaybe<EventUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<CollaboratorUpdateLocalizationsInput>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<ProjectUpdateManyInlineInput>;
  type?: InputMaybe<CollaboratorType>;
};

export type CollaboratorUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
};

export type CollaboratorUpdateLocalizationInput = {
  data: CollaboratorUpdateLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<CollaboratorCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<CollaboratorUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<CollaboratorUpsertLocalizationInput>>;
};

export type CollaboratorUpdateManyInlineInput = {
  /** Connect multiple existing Collaborator documents */
  connect?: InputMaybe<Array<CollaboratorConnectInput>>;
  /** Create and connect multiple Collaborator documents */
  create?: InputMaybe<Array<CollaboratorCreateInput>>;
  /** Delete multiple Collaborator documents */
  delete?: InputMaybe<Array<CollaboratorWhereUniqueInput>>;
  /** Disconnect multiple Collaborator documents */
  disconnect?: InputMaybe<Array<CollaboratorWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Collaborator documents */
  set?: InputMaybe<Array<CollaboratorWhereUniqueInput>>;
  /** Update multiple Collaborator documents */
  update?: InputMaybe<Array<CollaboratorUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Collaborator documents */
  upsert?: InputMaybe<Array<CollaboratorUpsertWithNestedWhereUniqueInput>>;
};

export type CollaboratorUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<CollaboratorUpdateManyLocalizationsInput>;
  type?: InputMaybe<CollaboratorType>;
};

export type CollaboratorUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
};

export type CollaboratorUpdateManyLocalizationInput = {
  data: CollaboratorUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type CollaboratorUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<CollaboratorUpdateManyLocalizationInput>>;
};

export type CollaboratorUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CollaboratorUpdateManyInput;
  /** Document search */
  where: CollaboratorWhereInput;
};

export type CollaboratorUpdateOneInlineInput = {
  /** Connect existing Collaborator document */
  connect?: InputMaybe<CollaboratorWhereUniqueInput>;
  /** Create and connect one Collaborator document */
  create?: InputMaybe<CollaboratorCreateInput>;
  /** Delete currently connected Collaborator document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Collaborator document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Collaborator document */
  update?: InputMaybe<CollaboratorUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Collaborator document */
  upsert?: InputMaybe<CollaboratorUpsertWithNestedWhereUniqueInput>;
};

export type CollaboratorUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CollaboratorUpdateInput;
  /** Unique document search */
  where: CollaboratorWhereUniqueInput;
};

export type CollaboratorUpsertInput = {
  /** Create document if it didn't exist */
  create: CollaboratorCreateInput;
  /** Update document if it exists */
  update: CollaboratorUpdateInput;
};

export type CollaboratorUpsertLocalizationInput = {
  create: CollaboratorCreateLocalizationDataInput;
  locale: Locale;
  update: CollaboratorUpdateLocalizationDataInput;
};

export type CollaboratorUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CollaboratorUpsertInput;
  /** Unique document search */
  where: CollaboratorWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CollaboratorWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CollaboratorWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollaboratorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CollaboratorWhereStageInput>;
  documentInStages_none?: InputMaybe<CollaboratorWhereStageInput>;
  documentInStages_some?: InputMaybe<CollaboratorWhereStageInput>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<CollaboratorType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<CollaboratorType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<CollaboratorType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<CollaboratorType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CollaboratorWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollaboratorWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollaboratorWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollaboratorWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CollaboratorWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Collaborator record uniquely */
export type CollaboratorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String'];
  hex: Scalars['Hex'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type Column = {
  __typename?: 'Column';
  blocks: Array<ColumnblocksUnion>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Column>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
  titleOnBottom?: Maybe<Scalars['Boolean']>;
};


export type ColumnBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type ColumnLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type ColumnConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ColumnWhereUniqueInput;
};

/** A connection to a list of items. */
export type ColumnConnection = {
  __typename?: 'ColumnConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ColumnEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ColumnCreateInput = {
  blocks?: InputMaybe<ColumnblocksUnionCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ColumnCreateLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  titleOnBottom?: InputMaybe<Scalars['Boolean']>;
};

export type ColumnCreateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type ColumnCreateLocalizationInput = {
  /** Localization input */
  data: ColumnCreateLocalizationDataInput;
  locale: Locale;
};

export type ColumnCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ColumnCreateLocalizationInput>>;
};

export type ColumnCreateManyInlineInput = {
  /** Create and connect multiple existing Column documents */
  create?: InputMaybe<Array<ColumnCreateInput>>;
};

export type ColumnCreateOneInlineInput = {
  /** Create and connect one Column document */
  create?: InputMaybe<ColumnCreateInput>;
};

export type ColumnCreateWithPositionInput = {
  /** Document to create */
  data: ColumnCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ColumnEdge = {
  __typename?: 'ColumnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Column;
};

/** Identifies documents */
export type ColumnManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  titleOnBottom?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  titleOnBottom_not?: InputMaybe<Scalars['Boolean']>;
};

export enum ColumnOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleOnBottomAsc = 'titleOnBottom_ASC',
  TitleOnBottomDesc = 'titleOnBottom_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type ColumnParent = MultiColumn;

export type ColumnParentConnectInput = {
  MultiColumn?: InputMaybe<MultiColumnConnectInput>;
};

export type ColumnParentCreateInput = {
  MultiColumn?: InputMaybe<MultiColumnCreateInput>;
};

export type ColumnParentCreateManyInlineInput = {
  /** Create and connect multiple existing ColumnParent documents */
  create?: InputMaybe<Array<ColumnParentCreateInput>>;
};

export type ColumnParentCreateOneInlineInput = {
  /** Create and connect one ColumnParent document */
  create?: InputMaybe<ColumnParentCreateInput>;
};

export type ColumnParentCreateWithPositionInput = {
  MultiColumn?: InputMaybe<MultiColumnCreateWithPositionInput>;
};

export type ColumnParentUpdateInput = {
  MultiColumn?: InputMaybe<MultiColumnUpdateInput>;
};

export type ColumnParentUpdateManyInlineInput = {
  /** Create and connect multiple ColumnParent component instances */
  create?: InputMaybe<Array<ColumnParentCreateWithPositionInput>>;
  /** Delete multiple ColumnParent documents */
  delete?: InputMaybe<Array<ColumnParentWhereUniqueInput>>;
  /** Update multiple ColumnParent component instances */
  update?: InputMaybe<Array<ColumnParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ColumnParent component instances */
  upsert?: InputMaybe<Array<ColumnParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ColumnParentUpdateManyWithNestedWhereInput = {
  MultiColumn?: InputMaybe<MultiColumnUpdateManyWithNestedWhereInput>;
};

export type ColumnParentUpdateOneInlineInput = {
  /** Create and connect one ColumnParent document */
  create?: InputMaybe<ColumnParentCreateInput>;
  /** Delete currently connected ColumnParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ColumnParent document */
  update?: InputMaybe<ColumnParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ColumnParent document */
  upsert?: InputMaybe<ColumnParentUpsertWithNestedWhereUniqueInput>;
};

export type ColumnParentUpdateWithNestedWhereUniqueAndPositionInput = {
  MultiColumn?: InputMaybe<MultiColumnUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ColumnParentUpdateWithNestedWhereUniqueInput = {
  MultiColumn?: InputMaybe<MultiColumnUpdateWithNestedWhereUniqueInput>;
};

export type ColumnParentUpsertWithNestedWhereUniqueAndPositionInput = {
  MultiColumn?: InputMaybe<MultiColumnUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ColumnParentUpsertWithNestedWhereUniqueInput = {
  MultiColumn?: InputMaybe<MultiColumnUpsertWithNestedWhereUniqueInput>;
};

export type ColumnParentWhereInput = {
  MultiColumn?: InputMaybe<MultiColumnWhereInput>;
};

export type ColumnParentWhereUniqueInput = {
  MultiColumn?: InputMaybe<MultiColumnWhereUniqueInput>;
};

export type ColumnUpdateInput = {
  blocks?: InputMaybe<ColumnblocksUnionUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<ColumnUpdateLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  titleOnBottom?: InputMaybe<Scalars['Boolean']>;
};

export type ColumnUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type ColumnUpdateLocalizationInput = {
  data: ColumnUpdateLocalizationDataInput;
  locale: Locale;
};

export type ColumnUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ColumnCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ColumnUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertLocalizationInput>>;
};

export type ColumnUpdateManyInlineInput = {
  /** Create and connect multiple Column component instances */
  create?: InputMaybe<Array<ColumnCreateWithPositionInput>>;
  /** Delete multiple Column documents */
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  /** Update multiple Column component instances */
  update?: InputMaybe<Array<ColumnUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Column component instances */
  upsert?: InputMaybe<Array<ColumnUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ColumnUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<ColumnUpdateManyLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  titleOnBottom?: InputMaybe<Scalars['Boolean']>;
};

export type ColumnUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type ColumnUpdateManyLocalizationInput = {
  data: ColumnUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ColumnUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ColumnUpdateManyLocalizationInput>>;
};

export type ColumnUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ColumnUpdateManyInput;
  /** Document search */
  where: ColumnWhereInput;
};

export type ColumnUpdateOneInlineInput = {
  /** Create and connect one Column document */
  create?: InputMaybe<ColumnCreateInput>;
  /** Delete currently connected Column document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Column document */
  update?: InputMaybe<ColumnUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Column document */
  upsert?: InputMaybe<ColumnUpsertWithNestedWhereUniqueInput>;
};

export type ColumnUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ColumnUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ColumnWhereUniqueInput;
};

export type ColumnUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ColumnUpdateInput;
  /** Unique document search */
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertInput = {
  /** Create document if it didn't exist */
  create: ColumnCreateInput;
  /** Update document if it exists */
  update: ColumnUpdateInput;
};

export type ColumnUpsertLocalizationInput = {
  create: ColumnCreateLocalizationDataInput;
  locale: Locale;
  update: ColumnUpdateLocalizationDataInput;
};

export type ColumnUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ColumnUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ColumnUpsertInput;
  /** Unique document search */
  where: ColumnWhereUniqueInput;
};

/** Identifies documents */
export type ColumnWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  titleOnBottom?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  titleOnBottom_not?: InputMaybe<Scalars['Boolean']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Column record uniquely */
export type ColumnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ColumnblocksUnion = CountUp | Paragraph;

export type ColumnblocksUnionConnectInput = {
  CountUp?: InputMaybe<CountUpConnectInput>;
  Paragraph?: InputMaybe<ParagraphConnectInput>;
};

export type ColumnblocksUnionCreateInput = {
  CountUp?: InputMaybe<CountUpCreateInput>;
  Paragraph?: InputMaybe<ParagraphCreateInput>;
};

export type ColumnblocksUnionCreateManyInlineInput = {
  /** Create and connect multiple existing ColumnblocksUnion documents */
  create?: InputMaybe<Array<ColumnblocksUnionCreateInput>>;
};

export type ColumnblocksUnionCreateOneInlineInput = {
  /** Create and connect one ColumnblocksUnion document */
  create?: InputMaybe<ColumnblocksUnionCreateInput>;
};

export type ColumnblocksUnionCreateWithPositionInput = {
  CountUp?: InputMaybe<CountUpCreateWithPositionInput>;
  Paragraph?: InputMaybe<ParagraphCreateWithPositionInput>;
};

export type ColumnblocksUnionUpdateInput = {
  CountUp?: InputMaybe<CountUpUpdateInput>;
  Paragraph?: InputMaybe<ParagraphUpdateInput>;
};

export type ColumnblocksUnionUpdateManyInlineInput = {
  /** Create and connect multiple ColumnblocksUnion component instances */
  create?: InputMaybe<Array<ColumnblocksUnionCreateWithPositionInput>>;
  /** Delete multiple ColumnblocksUnion documents */
  delete?: InputMaybe<Array<ColumnblocksUnionWhereUniqueInput>>;
  /** Update multiple ColumnblocksUnion component instances */
  update?: InputMaybe<Array<ColumnblocksUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ColumnblocksUnion component instances */
  upsert?: InputMaybe<Array<ColumnblocksUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ColumnblocksUnionUpdateManyWithNestedWhereInput = {
  CountUp?: InputMaybe<CountUpUpdateManyWithNestedWhereInput>;
  Paragraph?: InputMaybe<ParagraphUpdateManyWithNestedWhereInput>;
};

export type ColumnblocksUnionUpdateOneInlineInput = {
  /** Create and connect one ColumnblocksUnion document */
  create?: InputMaybe<ColumnblocksUnionCreateInput>;
  /** Delete currently connected ColumnblocksUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ColumnblocksUnion document */
  update?: InputMaybe<ColumnblocksUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ColumnblocksUnion document */
  upsert?: InputMaybe<ColumnblocksUnionUpsertWithNestedWhereUniqueInput>;
};

export type ColumnblocksUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CountUp?: InputMaybe<CountUpUpdateWithNestedWhereUniqueAndPositionInput>;
  Paragraph?: InputMaybe<ParagraphUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ColumnblocksUnionUpdateWithNestedWhereUniqueInput = {
  CountUp?: InputMaybe<CountUpUpdateWithNestedWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphUpdateWithNestedWhereUniqueInput>;
};

export type ColumnblocksUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CountUp?: InputMaybe<CountUpUpsertWithNestedWhereUniqueAndPositionInput>;
  Paragraph?: InputMaybe<ParagraphUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ColumnblocksUnionUpsertWithNestedWhereUniqueInput = {
  CountUp?: InputMaybe<CountUpUpsertWithNestedWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphUpsertWithNestedWhereUniqueInput>;
};

export type ColumnblocksUnionWhereInput = {
  CountUp?: InputMaybe<CountUpWhereInput>;
  Paragraph?: InputMaybe<ParagraphWhereInput>;
};

export type ColumnblocksUnionWhereUniqueInput = {
  CountUp?: InputMaybe<CountUpWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphWhereUniqueInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export type CountUp = {
  __typename?: 'CountUp';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  /** The value until which the counter up will count */
  value: Scalars['Int'];
};

export type CountUpConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CountUpWhereUniqueInput;
};

/** A connection to a list of items. */
export type CountUpConnection = {
  __typename?: 'CountUpConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CountUpEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CountUpCreateInput = {
  value: Scalars['Int'];
};

export type CountUpCreateManyInlineInput = {
  /** Create and connect multiple existing CountUp documents */
  create?: InputMaybe<Array<CountUpCreateInput>>;
};

export type CountUpCreateOneInlineInput = {
  /** Create and connect one CountUp document */
  create?: InputMaybe<CountUpCreateInput>;
};

export type CountUpCreateWithPositionInput = {
  /** Document to create */
  data: CountUpCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CountUpEdge = {
  __typename?: 'CountUpEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CountUp;
};

/** Identifies documents */
export type CountUpManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CountUpWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CountUpWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CountUpWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  value?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  value_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  value_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  value_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  value_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  value_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  value_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export enum CountUpOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC'
}

export type CountUpParent = Column | SectionWithImage;

export type CountUpParentConnectInput = {
  Column?: InputMaybe<ColumnConnectInput>;
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
};

export type CountUpParentCreateInput = {
  Column?: InputMaybe<ColumnCreateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
};

export type CountUpParentCreateManyInlineInput = {
  /** Create and connect multiple existing CountUpParent documents */
  create?: InputMaybe<Array<CountUpParentCreateInput>>;
};

export type CountUpParentCreateOneInlineInput = {
  /** Create and connect one CountUpParent document */
  create?: InputMaybe<CountUpParentCreateInput>;
};

export type CountUpParentCreateWithPositionInput = {
  Column?: InputMaybe<ColumnCreateWithPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
};

export type CountUpParentUpdateInput = {
  Column?: InputMaybe<ColumnUpdateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
};

export type CountUpParentUpdateManyInlineInput = {
  /** Create and connect multiple CountUpParent component instances */
  create?: InputMaybe<Array<CountUpParentCreateWithPositionInput>>;
  /** Delete multiple CountUpParent documents */
  delete?: InputMaybe<Array<CountUpParentWhereUniqueInput>>;
  /** Update multiple CountUpParent component instances */
  update?: InputMaybe<Array<CountUpParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CountUpParent component instances */
  upsert?: InputMaybe<Array<CountUpParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CountUpParentUpdateManyWithNestedWhereInput = {
  Column?: InputMaybe<ColumnUpdateManyWithNestedWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
};

export type CountUpParentUpdateOneInlineInput = {
  /** Create and connect one CountUpParent document */
  create?: InputMaybe<CountUpParentCreateInput>;
  /** Delete currently connected CountUpParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CountUpParent document */
  update?: InputMaybe<CountUpParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CountUpParent document */
  upsert?: InputMaybe<CountUpParentUpsertWithNestedWhereUniqueInput>;
};

export type CountUpParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Column?: InputMaybe<ColumnUpdateWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type CountUpParentUpdateWithNestedWhereUniqueInput = {
  Column?: InputMaybe<ColumnUpdateWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
};

export type CountUpParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Column?: InputMaybe<ColumnUpsertWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type CountUpParentUpsertWithNestedWhereUniqueInput = {
  Column?: InputMaybe<ColumnUpsertWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type CountUpParentWhereInput = {
  Column?: InputMaybe<ColumnWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
};

export type CountUpParentWhereUniqueInput = {
  Column?: InputMaybe<ColumnWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
};

export type CountUpUpdateInput = {
  value?: InputMaybe<Scalars['Int']>;
};

export type CountUpUpdateManyInlineInput = {
  /** Create and connect multiple CountUp component instances */
  create?: InputMaybe<Array<CountUpCreateWithPositionInput>>;
  /** Delete multiple CountUp documents */
  delete?: InputMaybe<Array<CountUpWhereUniqueInput>>;
  /** Update multiple CountUp component instances */
  update?: InputMaybe<Array<CountUpUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CountUp component instances */
  upsert?: InputMaybe<Array<CountUpUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CountUpUpdateManyInput = {
  value?: InputMaybe<Scalars['Int']>;
};

export type CountUpUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CountUpUpdateManyInput;
  /** Document search */
  where: CountUpWhereInput;
};

export type CountUpUpdateOneInlineInput = {
  /** Create and connect one CountUp document */
  create?: InputMaybe<CountUpCreateInput>;
  /** Delete currently connected CountUp document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CountUp document */
  update?: InputMaybe<CountUpUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CountUp document */
  upsert?: InputMaybe<CountUpUpsertWithNestedWhereUniqueInput>;
};

export type CountUpUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CountUpUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CountUpWhereUniqueInput;
};

export type CountUpUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CountUpUpdateInput;
  /** Unique document search */
  where: CountUpWhereUniqueInput;
};

export type CountUpUpsertInput = {
  /** Create document if it didn't exist */
  create: CountUpCreateInput;
  /** Update document if it exists */
  update: CountUpUpdateInput;
};

export type CountUpUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CountUpUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CountUpWhereUniqueInput;
};

export type CountUpUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CountUpUpsertInput;
  /** Unique document search */
  where: CountUpWhereUniqueInput;
};

/** Identifies documents */
export type CountUpWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CountUpWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CountUpWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CountUpWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  value?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  value_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  value_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  value_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  value_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  value_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  value_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

/** References CountUp record uniquely */
export type CountUpWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type Event = Node & {
  __typename?: 'Event';
  categories: Array<Category>;
  collaborators: Array<Collaborator>;
  color?: Maybe<Color>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: EventDescriptionRichText;
  /** Get the document in other stages */
  documentInStages: Array<Event>;
  end: Scalars['DateTime'];
  featuredImage: Asset;
  forms: Array<Form>;
  gallery: Array<Asset>;
  /** List of Event versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Event>;
  locations: Array<Location>;
  name: Scalars['String'];
  projects: Array<Project>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** This field is used to facilitate the search */
  shortDescription?: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  start: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EventCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CategoryWhereInput>;
};


export type EventCollaboratorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorWhereInput>;
};


export type EventCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EventDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type EventFeaturedImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EventFormsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormWhereInput>;
};


export type EventGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type EventHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type EventLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type EventProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type EventPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EventScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EventUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type EventUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type EventConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EventWhereUniqueInput;
};

/** A connection to a list of items. */
export type EventConnection = {
  __typename?: 'EventConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EventEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EventCreateInput = {
  categories?: InputMaybe<CategoryCreateManyInlineInput>;
  collaborators?: InputMaybe<CollaboratorCreateManyInlineInput>;
  color?: InputMaybe<ColorInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description: Scalars['RichTextAST'];
  end: Scalars['DateTime'];
  featuredImage: AssetCreateOneInlineInput;
  forms?: InputMaybe<FormCreateManyInlineInput>;
  gallery?: InputMaybe<AssetCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<EventCreateLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name: Scalars['String'];
  projects?: InputMaybe<ProjectCreateManyInlineInput>;
  shortDescription?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
  start: Scalars['DateTime'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type EventCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['RichTextAST'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type EventCreateLocalizationInput = {
  /** Localization input */
  data: EventCreateLocalizationDataInput;
  locale: Locale;
};

export type EventCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<EventCreateLocalizationInput>>;
};

export type EventCreateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Create and connect multiple existing Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
};

export type EventCreateOneInlineInput = {
  /** Connect one existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
};

export type EventDescriptionRichText = {
  __typename?: 'EventDescriptionRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<EventDescriptionRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type EventDescriptionRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type EventDescriptionRichTextEmbeddedTypes = Asset | Category | Collaborator | Event | Member | Page | Project | Service | SocialHandle;

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Event;
};

/** Identifies documents */
export type EventManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  categories_every?: InputMaybe<CategoryWhereInput>;
  categories_none?: InputMaybe<CategoryWhereInput>;
  categories_some?: InputMaybe<CategoryWhereInput>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  end?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  featuredImage?: InputMaybe<AssetWhereInput>;
  forms_every?: InputMaybe<FormWhereInput>;
  forms_none?: InputMaybe<FormWhereInput>;
  forms_some?: InputMaybe<FormWhereInput>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  shortDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shortDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  shortDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shortDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shortDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shortDescription_starts_with?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EndAsc = 'end_ASC',
  EndDesc = 'end_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StartAsc = 'start_ASC',
  StartDesc = 'start_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EventUpdateInput = {
  categories?: InputMaybe<CategoryUpdateManyInlineInput>;
  collaborators?: InputMaybe<CollaboratorUpdateManyInlineInput>;
  color?: InputMaybe<ColorInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  end?: InputMaybe<Scalars['DateTime']>;
  featuredImage?: InputMaybe<AssetUpdateOneInlineInput>;
  forms?: InputMaybe<FormUpdateManyInlineInput>;
  gallery?: InputMaybe<AssetUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<EventUpdateLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name?: InputMaybe<Scalars['String']>;
  projects?: InputMaybe<ProjectUpdateManyInlineInput>;
  shortDescription?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type EventUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
};

export type EventUpdateLocalizationInput = {
  data: EventUpdateLocalizationDataInput;
  locale: Locale;
};

export type EventUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<EventCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<EventUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<EventUpsertLocalizationInput>>;
};

export type EventUpdateManyInlineInput = {
  /** Connect multiple existing Event documents */
  connect?: InputMaybe<Array<EventConnectInput>>;
  /** Create and connect multiple Event documents */
  create?: InputMaybe<Array<EventCreateInput>>;
  /** Delete multiple Event documents */
  delete?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Disconnect multiple Event documents */
  disconnect?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Event documents */
  set?: InputMaybe<Array<EventWhereUniqueInput>>;
  /** Update multiple Event documents */
  update?: InputMaybe<Array<EventUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Event documents */
  upsert?: InputMaybe<Array<EventUpsertWithNestedWhereUniqueInput>>;
};

export type EventUpdateManyInput = {
  color?: InputMaybe<ColorInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  end?: InputMaybe<Scalars['DateTime']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<EventUpdateManyLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name?: InputMaybe<Scalars['String']>;
  shortDescription?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['DateTime']>;
};

export type EventUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
};

export type EventUpdateManyLocalizationInput = {
  data: EventUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type EventUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<EventUpdateManyLocalizationInput>>;
};

export type EventUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EventUpdateManyInput;
  /** Document search */
  where: EventWhereInput;
};

export type EventUpdateOneInlineInput = {
  /** Connect existing Event document */
  connect?: InputMaybe<EventWhereUniqueInput>;
  /** Create and connect one Event document */
  create?: InputMaybe<EventCreateInput>;
  /** Delete currently connected Event document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Event document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Event document */
  update?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Event document */
  upsert?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
};

export type EventUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EventUpdateInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

export type EventUpsertInput = {
  /** Create document if it didn't exist */
  create: EventCreateInput;
  /** Update document if it exists */
  update: EventUpdateInput;
};

export type EventUpsertLocalizationInput = {
  create: EventCreateLocalizationDataInput;
  locale: Locale;
  update: EventUpdateLocalizationDataInput;
};

export type EventUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EventUpsertInput;
  /** Unique document search */
  where: EventWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EventWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type EventWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  categories_every?: InputMaybe<CategoryWhereInput>;
  categories_none?: InputMaybe<CategoryWhereInput>;
  categories_some?: InputMaybe<CategoryWhereInput>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EventWhereStageInput>;
  documentInStages_none?: InputMaybe<EventWhereStageInput>;
  documentInStages_some?: InputMaybe<EventWhereStageInput>;
  end?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  featuredImage?: InputMaybe<AssetWhereInput>;
  forms_every?: InputMaybe<FormWhereInput>;
  forms_none?: InputMaybe<FormWhereInput>;
  forms_some?: InputMaybe<FormWhereInput>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  shortDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shortDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  shortDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shortDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shortDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shortDescription_starts_with?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EventWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EventWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EventWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EventWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Event record uniquely */
export type EventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Footer = {
  __typename?: 'Footer';
  cta: Button;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type FooterCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type FooterConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FooterWhereUniqueInput;
};

/** A connection to a list of items. */
export type FooterConnection = {
  __typename?: 'FooterConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FooterEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FooterCreateInput = {
  cta: ButtonCreateOneInlineInput;
};

export type FooterCreateManyInlineInput = {
  /** Create and connect multiple existing Footer documents */
  create?: InputMaybe<Array<FooterCreateInput>>;
};

export type FooterCreateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
};

export type FooterCreateWithPositionInput = {
  /** Document to create */
  data: FooterCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FooterEdge = {
  __typename?: 'FooterEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Footer;
};

/** Identifies documents */
export type FooterManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum FooterOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type FooterUpdateInput = {
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
};

export type FooterUpdateManyInlineInput = {
  /** Create and connect multiple Footer component instances */
  create?: InputMaybe<Array<FooterCreateWithPositionInput>>;
  /** Delete multiple Footer documents */
  delete?: InputMaybe<Array<FooterWhereUniqueInput>>;
  /** Update multiple Footer component instances */
  update?: InputMaybe<Array<FooterUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Footer component instances */
  upsert?: InputMaybe<Array<FooterUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FooterUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type FooterUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterUpdateManyInput;
  /** Document search */
  where: FooterWhereInput;
};

export type FooterUpdateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
  /** Delete currently connected Footer document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Footer document */
  update?: InputMaybe<FooterUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Footer document */
  upsert?: InputMaybe<FooterUpsertWithNestedWhereUniqueInput>;
};

export type FooterUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FooterUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FooterWhereUniqueInput;
};

export type FooterUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterUpdateInput;
  /** Unique document search */
  where: FooterWhereUniqueInput;
};

export type FooterUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterCreateInput;
  /** Update document if it exists */
  update: FooterUpdateInput;
};

export type FooterUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FooterUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FooterWhereUniqueInput;
};

export type FooterUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterUpsertInput;
  /** Unique document search */
  where: FooterWhereUniqueInput;
};

/** Identifies documents */
export type FooterWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References Footer record uniquely */
export type FooterWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Form = Node & {
  __typename?: 'Form';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Form>;
  event?: Maybe<FormEvent>;
  fields: Array<FormfieldsUnion>;
  formName: Scalars['String'];
  /** List of Form versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Form>;
  page?: Maybe<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  submissions: Array<Submission>;
  submitButtonLabel: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FormCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type FormCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type FormEventArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormFieldsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type FormHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type FormLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type FormPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type FormPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FormSubmissionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SubmissionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SubmissionWhereInput>;
};


export type FormUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type FormUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type FormCheckbox = {
  __typename?: 'FormCheckbox';
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormCheckbox>;
  name: Scalars['String'];
  required?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type FormCheckboxLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormCheckboxConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormCheckboxWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormCheckboxConnection = {
  __typename?: 'FormCheckboxConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormCheckboxEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormCheckboxCreateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormCheckboxCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormCheckboxCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export type FormCheckboxCreateLocalizationInput = {
  /** Localization input */
  data: FormCheckboxCreateLocalizationDataInput;
  locale: Locale;
};

export type FormCheckboxCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormCheckboxCreateLocalizationInput>>;
};

export type FormCheckboxCreateManyInlineInput = {
  /** Create and connect multiple existing FormCheckbox documents */
  create?: InputMaybe<Array<FormCheckboxCreateInput>>;
};

export type FormCheckboxCreateOneInlineInput = {
  /** Create and connect one FormCheckbox document */
  create?: InputMaybe<FormCheckboxCreateInput>;
};

export type FormCheckboxCreateWithPositionInput = {
  /** Document to create */
  data: FormCheckboxCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormCheckboxEdge = {
  __typename?: 'FormCheckboxEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormCheckbox;
};

/** Identifies documents */
export type FormCheckboxManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum FormCheckboxOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type FormCheckboxParent = Form | FormRow;

export type FormCheckboxParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
};

export type FormCheckboxParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
};

export type FormCheckboxParentCreateManyInlineInput = {
  /** Connect multiple existing FormCheckboxParent documents */
  connect?: InputMaybe<Array<FormCheckboxParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormCheckboxParent documents */
  create?: InputMaybe<Array<FormCheckboxParentCreateInput>>;
};

export type FormCheckboxParentCreateOneInlineInput = {
  /** Connect one existing FormCheckboxParent document */
  connect?: InputMaybe<FormCheckboxParentWhereUniqueInput>;
  /** Create and connect one FormCheckboxParent document */
  create?: InputMaybe<FormCheckboxParentCreateInput>;
};

export type FormCheckboxParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
};

export type FormCheckboxParentUpdateManyInlineInput = {
  /** Connect multiple existing FormCheckboxParent documents */
  connect?: InputMaybe<Array<FormCheckboxParentConnectInput>>;
  /** Create and connect multiple FormCheckboxParent documents */
  create?: InputMaybe<Array<FormCheckboxParentCreateInput>>;
  /** Delete multiple FormCheckboxParent documents */
  delete?: InputMaybe<Array<FormCheckboxParentWhereUniqueInput>>;
  /** Disconnect multiple FormCheckboxParent documents */
  disconnect?: InputMaybe<Array<FormCheckboxParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormCheckboxParent documents */
  set?: InputMaybe<Array<FormCheckboxParentWhereUniqueInput>>;
  /** Update multiple FormCheckboxParent documents */
  update?: InputMaybe<Array<FormCheckboxParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormCheckboxParent documents */
  upsert?: InputMaybe<Array<FormCheckboxParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormCheckboxParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
};

export type FormCheckboxParentUpdateOneInlineInput = {
  /** Connect existing FormCheckboxParent document */
  connect?: InputMaybe<FormCheckboxParentWhereUniqueInput>;
  /** Create and connect one FormCheckboxParent document */
  create?: InputMaybe<FormCheckboxParentCreateInput>;
  /** Delete currently connected FormCheckboxParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormCheckboxParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormCheckboxParent document */
  update?: InputMaybe<FormCheckboxParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormCheckboxParent document */
  upsert?: InputMaybe<FormCheckboxParentUpsertWithNestedWhereUniqueInput>;
};

export type FormCheckboxParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
};

export type FormCheckboxParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormCheckboxParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
};

export type FormCheckboxParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
};

export type FormCheckboxUpdateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormCheckboxUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormCheckboxUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormCheckboxUpdateLocalizationInput = {
  data: FormCheckboxUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormCheckboxUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormCheckboxCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormCheckboxUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormCheckboxUpsertLocalizationInput>>;
};

export type FormCheckboxUpdateManyInlineInput = {
  /** Create and connect multiple FormCheckbox component instances */
  create?: InputMaybe<Array<FormCheckboxCreateWithPositionInput>>;
  /** Delete multiple FormCheckbox documents */
  delete?: InputMaybe<Array<FormCheckboxWhereUniqueInput>>;
  /** Update multiple FormCheckbox component instances */
  update?: InputMaybe<Array<FormCheckboxUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormCheckbox component instances */
  upsert?: InputMaybe<Array<FormCheckboxUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormCheckboxUpdateManyInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormCheckboxUpdateManyLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormCheckboxUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormCheckboxUpdateManyLocalizationInput = {
  data: FormCheckboxUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormCheckboxUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormCheckboxUpdateManyLocalizationInput>>;
};

export type FormCheckboxUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormCheckboxUpdateManyInput;
  /** Document search */
  where: FormCheckboxWhereInput;
};

export type FormCheckboxUpdateOneInlineInput = {
  /** Create and connect one FormCheckbox document */
  create?: InputMaybe<FormCheckboxCreateInput>;
  /** Delete currently connected FormCheckbox document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormCheckbox document */
  update?: InputMaybe<FormCheckboxUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormCheckbox document */
  upsert?: InputMaybe<FormCheckboxUpsertWithNestedWhereUniqueInput>;
};

export type FormCheckboxUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormCheckboxUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormCheckboxWhereUniqueInput;
};

export type FormCheckboxUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormCheckboxUpdateInput;
  /** Unique document search */
  where: FormCheckboxWhereUniqueInput;
};

export type FormCheckboxUpsertInput = {
  /** Create document if it didn't exist */
  create: FormCheckboxCreateInput;
  /** Update document if it exists */
  update: FormCheckboxUpdateInput;
};

export type FormCheckboxUpsertLocalizationInput = {
  create: FormCheckboxCreateLocalizationDataInput;
  locale: Locale;
  update: FormCheckboxUpdateLocalizationDataInput;
};

export type FormCheckboxUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormCheckboxUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormCheckboxWhereUniqueInput;
};

export type FormCheckboxUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormCheckboxUpsertInput;
  /** Unique document search */
  where: FormCheckboxWhereUniqueInput;
};

/** Identifies documents */
export type FormCheckboxWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormCheckboxWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References FormCheckbox record uniquely */
export type FormCheckboxWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormConnection = {
  __typename?: 'FormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormCreateInput = {
  cl7xpuwt6362n01t7fb5j4ba2?: InputMaybe<AssociationDetailsCreateManyInlineInput>;
  cl874pj0c0bi701umfajudrmv?: InputMaybe<SectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  event?: InputMaybe<FormEventCreateOneInlineInput>;
  fields?: InputMaybe<FormfieldsUnionCreateManyInlineInput>;
  formName: Scalars['String'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormCreateLocalizationsInput>;
  page?: InputMaybe<PageCreateOneInlineInput>;
  submissions?: InputMaybe<SubmissionCreateManyInlineInput>;
  /** submitButtonLabel input for default locale (en) */
  submitButtonLabel: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type FormCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  submitButtonLabel: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type FormCreateLocalizationInput = {
  /** Localization input */
  data: FormCreateLocalizationDataInput;
  locale: Locale;
};

export type FormCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormCreateLocalizationInput>>;
};

export type FormCreateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Create and connect multiple existing Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
};

export type FormCreateOneInlineInput = {
  /** Connect one existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
};

/** An edge in a connection. */
export type FormEdge = {
  __typename?: 'FormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Form;
};

export type FormEvent = Event;

export type FormEventConnectInput = {
  Event?: InputMaybe<EventConnectInput>;
};

export type FormEventCreateInput = {
  Event?: InputMaybe<EventCreateInput>;
};

export type FormEventCreateManyInlineInput = {
  /** Connect multiple existing FormEvent documents */
  connect?: InputMaybe<Array<FormEventWhereUniqueInput>>;
  /** Create and connect multiple existing FormEvent documents */
  create?: InputMaybe<Array<FormEventCreateInput>>;
};

export type FormEventCreateOneInlineInput = {
  /** Connect one existing FormEvent document */
  connect?: InputMaybe<FormEventWhereUniqueInput>;
  /** Create and connect one FormEvent document */
  create?: InputMaybe<FormEventCreateInput>;
};

export type FormEventUpdateInput = {
  Event?: InputMaybe<EventUpdateInput>;
};

export type FormEventUpdateManyInlineInput = {
  /** Connect multiple existing FormEvent documents */
  connect?: InputMaybe<Array<FormEventConnectInput>>;
  /** Create and connect multiple FormEvent documents */
  create?: InputMaybe<Array<FormEventCreateInput>>;
  /** Delete multiple FormEvent documents */
  delete?: InputMaybe<Array<FormEventWhereUniqueInput>>;
  /** Disconnect multiple FormEvent documents */
  disconnect?: InputMaybe<Array<FormEventWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormEvent documents */
  set?: InputMaybe<Array<FormEventWhereUniqueInput>>;
  /** Update multiple FormEvent documents */
  update?: InputMaybe<Array<FormEventUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormEvent documents */
  upsert?: InputMaybe<Array<FormEventUpsertWithNestedWhereUniqueInput>>;
};

export type FormEventUpdateManyWithNestedWhereInput = {
  Event?: InputMaybe<EventUpdateManyWithNestedWhereInput>;
};

export type FormEventUpdateOneInlineInput = {
  /** Connect existing FormEvent document */
  connect?: InputMaybe<FormEventWhereUniqueInput>;
  /** Create and connect one FormEvent document */
  create?: InputMaybe<FormEventCreateInput>;
  /** Delete currently connected FormEvent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormEvent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormEvent document */
  update?: InputMaybe<FormEventUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormEvent document */
  upsert?: InputMaybe<FormEventUpsertWithNestedWhereUniqueInput>;
};

export type FormEventUpdateWithNestedWhereUniqueInput = {
  Event?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
};

export type FormEventUpsertWithNestedWhereUniqueInput = {
  Event?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
};

export type FormEventWhereInput = {
  Event?: InputMaybe<EventWhereInput>;
};

export type FormEventWhereUniqueInput = {
  Event?: InputMaybe<EventWhereUniqueInput>;
};

export type FormInput = {
  __typename?: 'FormInput';
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormInput>;
  name: Scalars['String'];
  placeholder?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  type?: Maybe<FormInputType>;
};


export type FormInputLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormInputConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormInputWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormInputConnection = {
  __typename?: 'FormInputConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormInputEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormInputCreateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormInputCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<FormInputType>;
};

export type FormInputCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormInputCreateLocalizationInput = {
  /** Localization input */
  data: FormInputCreateLocalizationDataInput;
  locale: Locale;
};

export type FormInputCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormInputCreateLocalizationInput>>;
};

export type FormInputCreateManyInlineInput = {
  /** Create and connect multiple existing FormInput documents */
  create?: InputMaybe<Array<FormInputCreateInput>>;
};

export type FormInputCreateOneInlineInput = {
  /** Create and connect one FormInput document */
  create?: InputMaybe<FormInputCreateInput>;
};

export type FormInputCreateWithPositionInput = {
  /** Document to create */
  data: FormInputCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormInputEdge = {
  __typename?: 'FormInputEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormInput;
};

/** Identifies documents */
export type FormInputManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormInputWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormInputWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormInputWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<FormInputType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<FormInputType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<FormInputType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<FormInputType>>>;
};

export enum FormInputOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PlaceholderAsc = 'placeholder_ASC',
  PlaceholderDesc = 'placeholder_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC'
}

export type FormInputParent = Form | FormRow;

export type FormInputParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
};

export type FormInputParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
};

export type FormInputParentCreateManyInlineInput = {
  /** Connect multiple existing FormInputParent documents */
  connect?: InputMaybe<Array<FormInputParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormInputParent documents */
  create?: InputMaybe<Array<FormInputParentCreateInput>>;
};

export type FormInputParentCreateOneInlineInput = {
  /** Connect one existing FormInputParent document */
  connect?: InputMaybe<FormInputParentWhereUniqueInput>;
  /** Create and connect one FormInputParent document */
  create?: InputMaybe<FormInputParentCreateInput>;
};

export type FormInputParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
};

export type FormInputParentUpdateManyInlineInput = {
  /** Connect multiple existing FormInputParent documents */
  connect?: InputMaybe<Array<FormInputParentConnectInput>>;
  /** Create and connect multiple FormInputParent documents */
  create?: InputMaybe<Array<FormInputParentCreateInput>>;
  /** Delete multiple FormInputParent documents */
  delete?: InputMaybe<Array<FormInputParentWhereUniqueInput>>;
  /** Disconnect multiple FormInputParent documents */
  disconnect?: InputMaybe<Array<FormInputParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormInputParent documents */
  set?: InputMaybe<Array<FormInputParentWhereUniqueInput>>;
  /** Update multiple FormInputParent documents */
  update?: InputMaybe<Array<FormInputParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormInputParent documents */
  upsert?: InputMaybe<Array<FormInputParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormInputParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
};

export type FormInputParentUpdateOneInlineInput = {
  /** Connect existing FormInputParent document */
  connect?: InputMaybe<FormInputParentWhereUniqueInput>;
  /** Create and connect one FormInputParent document */
  create?: InputMaybe<FormInputParentCreateInput>;
  /** Delete currently connected FormInputParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormInputParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormInputParent document */
  update?: InputMaybe<FormInputParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormInputParent document */
  upsert?: InputMaybe<FormInputParentUpsertWithNestedWhereUniqueInput>;
};

export type FormInputParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
};

export type FormInputParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormInputParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
};

export type FormInputParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
};

export enum FormInputType {
  Email = 'EMAIL',
  Password = 'PASSWORD',
  Tel = 'TEL',
  Text = 'TEXT'
}

export type FormInputUpdateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormInputUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<FormInputType>;
};

export type FormInputUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormInputUpdateLocalizationInput = {
  data: FormInputUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormInputUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormInputCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormInputUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormInputUpsertLocalizationInput>>;
};

export type FormInputUpdateManyInlineInput = {
  /** Create and connect multiple FormInput component instances */
  create?: InputMaybe<Array<FormInputCreateWithPositionInput>>;
  /** Delete multiple FormInput documents */
  delete?: InputMaybe<Array<FormInputWhereUniqueInput>>;
  /** Update multiple FormInput component instances */
  update?: InputMaybe<Array<FormInputUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormInput component instances */
  upsert?: InputMaybe<Array<FormInputUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormInputUpdateManyInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormInputUpdateManyLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<FormInputType>;
};

export type FormInputUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormInputUpdateManyLocalizationInput = {
  data: FormInputUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormInputUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormInputUpdateManyLocalizationInput>>;
};

export type FormInputUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormInputUpdateManyInput;
  /** Document search */
  where: FormInputWhereInput;
};

export type FormInputUpdateOneInlineInput = {
  /** Create and connect one FormInput document */
  create?: InputMaybe<FormInputCreateInput>;
  /** Delete currently connected FormInput document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormInput document */
  update?: InputMaybe<FormInputUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormInput document */
  upsert?: InputMaybe<FormInputUpsertWithNestedWhereUniqueInput>;
};

export type FormInputUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormInputUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormInputWhereUniqueInput;
};

export type FormInputUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormInputUpdateInput;
  /** Unique document search */
  where: FormInputWhereUniqueInput;
};

export type FormInputUpsertInput = {
  /** Create document if it didn't exist */
  create: FormInputCreateInput;
  /** Update document if it exists */
  update: FormInputUpdateInput;
};

export type FormInputUpsertLocalizationInput = {
  create: FormInputCreateLocalizationDataInput;
  locale: Locale;
  update: FormInputUpdateLocalizationDataInput;
};

export type FormInputUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormInputUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormInputWhereUniqueInput;
};

export type FormInputUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormInputUpsertInput;
  /** Unique document search */
  where: FormInputWhereUniqueInput;
};

/** Identifies documents */
export type FormInputWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormInputWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormInputWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormInputWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  placeholder_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  placeholder_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  placeholder_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  placeholder_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  placeholder_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  placeholder_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  placeholder_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  placeholder_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  placeholder_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<FormInputType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<FormInputType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<FormInputType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<FormInputType>>>;
};

/** References FormInput record uniquely */
export type FormInputWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type FormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  formName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  submissions_every?: InputMaybe<SubmissionWhereInput>;
  submissions_none?: InputMaybe<SubmissionWhereInput>;
  submissions_some?: InputMaybe<SubmissionWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export type FormOption = {
  __typename?: 'FormOption';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormOption>;
  option?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  value: Scalars['String'];
};


export type FormOptionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormOptionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormOptionWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormOptionConnection = {
  __typename?: 'FormOptionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormOptionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormOptionCreateInput = {
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormOptionCreateLocalizationsInput>;
  /** option input for default locale (en) */
  option?: InputMaybe<Scalars['String']>;
  value: Scalars['String'];
};

export type FormOptionCreateLocalizationDataInput = {
  option?: InputMaybe<Scalars['String']>;
};

export type FormOptionCreateLocalizationInput = {
  /** Localization input */
  data: FormOptionCreateLocalizationDataInput;
  locale: Locale;
};

export type FormOptionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormOptionCreateLocalizationInput>>;
};

export type FormOptionCreateManyInlineInput = {
  /** Create and connect multiple existing FormOption documents */
  create?: InputMaybe<Array<FormOptionCreateInput>>;
};

export type FormOptionCreateOneInlineInput = {
  /** Create and connect one FormOption document */
  create?: InputMaybe<FormOptionCreateInput>;
};

export type FormOptionCreateWithPositionInput = {
  /** Document to create */
  data: FormOptionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormOptionEdge = {
  __typename?: 'FormOptionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormOption;
};

/** Identifies documents */
export type FormOptionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  value?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  value_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  value_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  value_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  value_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  value_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  value_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  value_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  value_starts_with?: InputMaybe<Scalars['String']>;
};

export enum FormOptionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OptionAsc = 'option_ASC',
  OptionDesc = 'option_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC'
}

export type FormOptionParent = FormSelect;

export type FormOptionParentConnectInput = {
  FormSelect?: InputMaybe<FormSelectConnectInput>;
};

export type FormOptionParentCreateInput = {
  FormSelect?: InputMaybe<FormSelectCreateInput>;
};

export type FormOptionParentCreateManyInlineInput = {
  /** Create and connect multiple existing FormOptionParent documents */
  create?: InputMaybe<Array<FormOptionParentCreateInput>>;
};

export type FormOptionParentCreateOneInlineInput = {
  /** Create and connect one FormOptionParent document */
  create?: InputMaybe<FormOptionParentCreateInput>;
};

export type FormOptionParentCreateWithPositionInput = {
  FormSelect?: InputMaybe<FormSelectCreateWithPositionInput>;
};

export type FormOptionParentUpdateInput = {
  FormSelect?: InputMaybe<FormSelectUpdateInput>;
};

export type FormOptionParentUpdateManyInlineInput = {
  /** Create and connect multiple FormOptionParent component instances */
  create?: InputMaybe<Array<FormOptionParentCreateWithPositionInput>>;
  /** Delete multiple FormOptionParent documents */
  delete?: InputMaybe<Array<FormOptionParentWhereUniqueInput>>;
  /** Update multiple FormOptionParent component instances */
  update?: InputMaybe<Array<FormOptionParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormOptionParent component instances */
  upsert?: InputMaybe<Array<FormOptionParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormOptionParentUpdateManyWithNestedWhereInput = {
  FormSelect?: InputMaybe<FormSelectUpdateManyWithNestedWhereInput>;
};

export type FormOptionParentUpdateOneInlineInput = {
  /** Create and connect one FormOptionParent document */
  create?: InputMaybe<FormOptionParentCreateInput>;
  /** Delete currently connected FormOptionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormOptionParent document */
  update?: InputMaybe<FormOptionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormOptionParent document */
  upsert?: InputMaybe<FormOptionParentUpsertWithNestedWhereUniqueInput>;
};

export type FormOptionParentUpdateWithNestedWhereUniqueAndPositionInput = {
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FormOptionParentUpdateWithNestedWhereUniqueInput = {
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueInput>;
};

export type FormOptionParentUpsertWithNestedWhereUniqueAndPositionInput = {
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FormOptionParentUpsertWithNestedWhereUniqueInput = {
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueInput>;
};

export type FormOptionParentWhereInput = {
  FormSelect?: InputMaybe<FormSelectWhereInput>;
};

export type FormOptionParentWhereUniqueInput = {
  FormSelect?: InputMaybe<FormSelectWhereUniqueInput>;
};

export type FormOptionUpdateInput = {
  /** Manage document localizations */
  localizations?: InputMaybe<FormOptionUpdateLocalizationsInput>;
  /** option input for default locale (en) */
  option?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type FormOptionUpdateLocalizationDataInput = {
  option?: InputMaybe<Scalars['String']>;
};

export type FormOptionUpdateLocalizationInput = {
  data: FormOptionUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormOptionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormOptionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormOptionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormOptionUpsertLocalizationInput>>;
};

export type FormOptionUpdateManyInlineInput = {
  /** Create and connect multiple FormOption component instances */
  create?: InputMaybe<Array<FormOptionCreateWithPositionInput>>;
  /** Delete multiple FormOption documents */
  delete?: InputMaybe<Array<FormOptionWhereUniqueInput>>;
  /** Update multiple FormOption component instances */
  update?: InputMaybe<Array<FormOptionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormOption component instances */
  upsert?: InputMaybe<Array<FormOptionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormOptionUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormOptionUpdateManyLocalizationsInput>;
  /** option input for default locale (en) */
  option?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type FormOptionUpdateManyLocalizationDataInput = {
  option?: InputMaybe<Scalars['String']>;
};

export type FormOptionUpdateManyLocalizationInput = {
  data: FormOptionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormOptionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormOptionUpdateManyLocalizationInput>>;
};

export type FormOptionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormOptionUpdateManyInput;
  /** Document search */
  where: FormOptionWhereInput;
};

export type FormOptionUpdateOneInlineInput = {
  /** Create and connect one FormOption document */
  create?: InputMaybe<FormOptionCreateInput>;
  /** Delete currently connected FormOption document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormOption document */
  update?: InputMaybe<FormOptionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormOption document */
  upsert?: InputMaybe<FormOptionUpsertWithNestedWhereUniqueInput>;
};

export type FormOptionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormOptionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormOptionWhereUniqueInput;
};

export type FormOptionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormOptionUpdateInput;
  /** Unique document search */
  where: FormOptionWhereUniqueInput;
};

export type FormOptionUpsertInput = {
  /** Create document if it didn't exist */
  create: FormOptionCreateInput;
  /** Update document if it exists */
  update: FormOptionUpdateInput;
};

export type FormOptionUpsertLocalizationInput = {
  create: FormOptionCreateLocalizationDataInput;
  locale: Locale;
  update: FormOptionUpdateLocalizationDataInput;
};

export type FormOptionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormOptionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormOptionWhereUniqueInput;
};

export type FormOptionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormOptionUpsertInput;
  /** Unique document search */
  where: FormOptionWhereUniqueInput;
};

/** Identifies documents */
export type FormOptionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormOptionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  option?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  option_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  option_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  option_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  option_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  option_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  option_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  option_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  option_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  option_starts_with?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  value_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  value_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  value_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  value_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  value_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  value_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  value_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  value_starts_with?: InputMaybe<Scalars['String']>;
};

/** References FormOption record uniquely */
export type FormOptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum FormOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FormNameAsc = 'formName_ASC',
  FormNameDesc = 'formName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubmitButtonLabelAsc = 'submitButtonLabel_ASC',
  SubmitButtonLabelDesc = 'submitButtonLabel_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FormRadio = {
  __typename?: 'FormRadio';
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormRadio>;
  name: Scalars['String'];
  required?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type FormRadioLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormRadioConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormRadioWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormRadioConnection = {
  __typename?: 'FormRadioConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormRadioEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormRadioCreateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormRadioCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormRadioCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export type FormRadioCreateLocalizationInput = {
  /** Localization input */
  data: FormRadioCreateLocalizationDataInput;
  locale: Locale;
};

export type FormRadioCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormRadioCreateLocalizationInput>>;
};

export type FormRadioCreateManyInlineInput = {
  /** Create and connect multiple existing FormRadio documents */
  create?: InputMaybe<Array<FormRadioCreateInput>>;
};

export type FormRadioCreateOneInlineInput = {
  /** Create and connect one FormRadio document */
  create?: InputMaybe<FormRadioCreateInput>;
};

export type FormRadioCreateWithPositionInput = {
  /** Document to create */
  data: FormRadioCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormRadioEdge = {
  __typename?: 'FormRadioEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormRadio;
};

/** Identifies documents */
export type FormRadioManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum FormRadioOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type FormRadioParent = Form | FormRow;

export type FormRadioParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
};

export type FormRadioParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
};

export type FormRadioParentCreateManyInlineInput = {
  /** Connect multiple existing FormRadioParent documents */
  connect?: InputMaybe<Array<FormRadioParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormRadioParent documents */
  create?: InputMaybe<Array<FormRadioParentCreateInput>>;
};

export type FormRadioParentCreateOneInlineInput = {
  /** Connect one existing FormRadioParent document */
  connect?: InputMaybe<FormRadioParentWhereUniqueInput>;
  /** Create and connect one FormRadioParent document */
  create?: InputMaybe<FormRadioParentCreateInput>;
};

export type FormRadioParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
};

export type FormRadioParentUpdateManyInlineInput = {
  /** Connect multiple existing FormRadioParent documents */
  connect?: InputMaybe<Array<FormRadioParentConnectInput>>;
  /** Create and connect multiple FormRadioParent documents */
  create?: InputMaybe<Array<FormRadioParentCreateInput>>;
  /** Delete multiple FormRadioParent documents */
  delete?: InputMaybe<Array<FormRadioParentWhereUniqueInput>>;
  /** Disconnect multiple FormRadioParent documents */
  disconnect?: InputMaybe<Array<FormRadioParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormRadioParent documents */
  set?: InputMaybe<Array<FormRadioParentWhereUniqueInput>>;
  /** Update multiple FormRadioParent documents */
  update?: InputMaybe<Array<FormRadioParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormRadioParent documents */
  upsert?: InputMaybe<Array<FormRadioParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormRadioParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
};

export type FormRadioParentUpdateOneInlineInput = {
  /** Connect existing FormRadioParent document */
  connect?: InputMaybe<FormRadioParentWhereUniqueInput>;
  /** Create and connect one FormRadioParent document */
  create?: InputMaybe<FormRadioParentCreateInput>;
  /** Delete currently connected FormRadioParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormRadioParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormRadioParent document */
  update?: InputMaybe<FormRadioParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormRadioParent document */
  upsert?: InputMaybe<FormRadioParentUpsertWithNestedWhereUniqueInput>;
};

export type FormRadioParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
};

export type FormRadioParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormRadioParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
};

export type FormRadioParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
};

export type FormRadioUpdateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormRadioUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormRadioUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormRadioUpdateLocalizationInput = {
  data: FormRadioUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormRadioUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormRadioCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormRadioUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormRadioUpsertLocalizationInput>>;
};

export type FormRadioUpdateManyInlineInput = {
  /** Create and connect multiple FormRadio component instances */
  create?: InputMaybe<Array<FormRadioCreateWithPositionInput>>;
  /** Delete multiple FormRadio documents */
  delete?: InputMaybe<Array<FormRadioWhereUniqueInput>>;
  /** Update multiple FormRadio component instances */
  update?: InputMaybe<Array<FormRadioUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormRadio component instances */
  upsert?: InputMaybe<Array<FormRadioUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormRadioUpdateManyInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormRadioUpdateManyLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormRadioUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormRadioUpdateManyLocalizationInput = {
  data: FormRadioUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormRadioUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormRadioUpdateManyLocalizationInput>>;
};

export type FormRadioUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormRadioUpdateManyInput;
  /** Document search */
  where: FormRadioWhereInput;
};

export type FormRadioUpdateOneInlineInput = {
  /** Create and connect one FormRadio document */
  create?: InputMaybe<FormRadioCreateInput>;
  /** Delete currently connected FormRadio document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormRadio document */
  update?: InputMaybe<FormRadioUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormRadio document */
  upsert?: InputMaybe<FormRadioUpsertWithNestedWhereUniqueInput>;
};

export type FormRadioUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormRadioUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormRadioWhereUniqueInput;
};

export type FormRadioUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormRadioUpdateInput;
  /** Unique document search */
  where: FormRadioWhereUniqueInput;
};

export type FormRadioUpsertInput = {
  /** Create document if it didn't exist */
  create: FormRadioCreateInput;
  /** Update document if it exists */
  update: FormRadioUpdateInput;
};

export type FormRadioUpsertLocalizationInput = {
  create: FormRadioCreateLocalizationDataInput;
  locale: Locale;
  update: FormRadioUpdateLocalizationDataInput;
};

export type FormRadioUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormRadioUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormRadioWhereUniqueInput;
};

export type FormRadioUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormRadioUpsertInput;
  /** Unique document search */
  where: FormRadioWhereUniqueInput;
};

/** Identifies documents */
export type FormRadioWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormRadioWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References FormRadio record uniquely */
export type FormRadioWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormRow = {
  __typename?: 'FormRow';
  fields: Array<FormRowfieldsUnion>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type FormRowFieldsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type FormRowConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormRowWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormRowConnection = {
  __typename?: 'FormRowConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormRowEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormRowCreateInput = {
  fields?: InputMaybe<FormRowfieldsUnionCreateManyInlineInput>;
};

export type FormRowCreateManyInlineInput = {
  /** Create and connect multiple existing FormRow documents */
  create?: InputMaybe<Array<FormRowCreateInput>>;
};

export type FormRowCreateOneInlineInput = {
  /** Create and connect one FormRow document */
  create?: InputMaybe<FormRowCreateInput>;
};

export type FormRowCreateWithPositionInput = {
  /** Document to create */
  data: FormRowCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormRowEdge = {
  __typename?: 'FormRowEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormRow;
};

/** Identifies documents */
export type FormRowManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormRowWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormRowWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormRowWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum FormRowOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type FormRowParent = Form;

export type FormRowParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type FormRowParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type FormRowParentCreateManyInlineInput = {
  /** Connect multiple existing FormRowParent documents */
  connect?: InputMaybe<Array<FormRowParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormRowParent documents */
  create?: InputMaybe<Array<FormRowParentCreateInput>>;
};

export type FormRowParentCreateOneInlineInput = {
  /** Connect one existing FormRowParent document */
  connect?: InputMaybe<FormRowParentWhereUniqueInput>;
  /** Create and connect one FormRowParent document */
  create?: InputMaybe<FormRowParentCreateInput>;
};

export type FormRowParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type FormRowParentUpdateManyInlineInput = {
  /** Connect multiple existing FormRowParent documents */
  connect?: InputMaybe<Array<FormRowParentConnectInput>>;
  /** Create and connect multiple FormRowParent documents */
  create?: InputMaybe<Array<FormRowParentCreateInput>>;
  /** Delete multiple FormRowParent documents */
  delete?: InputMaybe<Array<FormRowParentWhereUniqueInput>>;
  /** Disconnect multiple FormRowParent documents */
  disconnect?: InputMaybe<Array<FormRowParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormRowParent documents */
  set?: InputMaybe<Array<FormRowParentWhereUniqueInput>>;
  /** Update multiple FormRowParent documents */
  update?: InputMaybe<Array<FormRowParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormRowParent documents */
  upsert?: InputMaybe<Array<FormRowParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormRowParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type FormRowParentUpdateOneInlineInput = {
  /** Connect existing FormRowParent document */
  connect?: InputMaybe<FormRowParentWhereUniqueInput>;
  /** Create and connect one FormRowParent document */
  create?: InputMaybe<FormRowParentCreateInput>;
  /** Delete currently connected FormRowParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormRowParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormRowParent document */
  update?: InputMaybe<FormRowParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormRowParent document */
  upsert?: InputMaybe<FormRowParentUpsertWithNestedWhereUniqueInput>;
};

export type FormRowParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type FormRowParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormRowParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type FormRowParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type FormRowUpdateInput = {
  fields?: InputMaybe<FormRowfieldsUnionUpdateManyInlineInput>;
};

export type FormRowUpdateManyInlineInput = {
  /** Create and connect multiple FormRow component instances */
  create?: InputMaybe<Array<FormRowCreateWithPositionInput>>;
  /** Delete multiple FormRow documents */
  delete?: InputMaybe<Array<FormRowWhereUniqueInput>>;
  /** Update multiple FormRow component instances */
  update?: InputMaybe<Array<FormRowUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormRow component instances */
  upsert?: InputMaybe<Array<FormRowUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormRowUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type FormRowUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormRowUpdateManyInput;
  /** Document search */
  where: FormRowWhereInput;
};

export type FormRowUpdateOneInlineInput = {
  /** Create and connect one FormRow document */
  create?: InputMaybe<FormRowCreateInput>;
  /** Delete currently connected FormRow document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormRow document */
  update?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormRow document */
  upsert?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormRowUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormRowUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormRowWhereUniqueInput;
};

export type FormRowUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormRowUpdateInput;
  /** Unique document search */
  where: FormRowWhereUniqueInput;
};

export type FormRowUpsertInput = {
  /** Create document if it didn't exist */
  create: FormRowCreateInput;
  /** Update document if it exists */
  update: FormRowUpdateInput;
};

export type FormRowUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormRowUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormRowWhereUniqueInput;
};

export type FormRowUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormRowUpsertInput;
  /** Unique document search */
  where: FormRowWhereUniqueInput;
};

/** Identifies documents */
export type FormRowWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormRowWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormRowWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormRowWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References FormRow record uniquely */
export type FormRowWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormRowfieldsUnion = FormCheckbox | FormInput | FormRadio | FormSelect | FormTextarea;

export type FormRowfieldsUnionConnectInput = {
  FormCheckbox?: InputMaybe<FormCheckboxConnectInput>;
  FormInput?: InputMaybe<FormInputConnectInput>;
  FormRadio?: InputMaybe<FormRadioConnectInput>;
  FormSelect?: InputMaybe<FormSelectConnectInput>;
  FormTextarea?: InputMaybe<FormTextareaConnectInput>;
};

export type FormRowfieldsUnionCreateInput = {
  FormCheckbox?: InputMaybe<FormCheckboxCreateInput>;
  FormInput?: InputMaybe<FormInputCreateInput>;
  FormRadio?: InputMaybe<FormRadioCreateInput>;
  FormSelect?: InputMaybe<FormSelectCreateInput>;
  FormTextarea?: InputMaybe<FormTextareaCreateInput>;
};

export type FormRowfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FormRowfieldsUnion documents */
  create?: InputMaybe<Array<FormRowfieldsUnionCreateInput>>;
};

export type FormRowfieldsUnionCreateOneInlineInput = {
  /** Create and connect one FormRowfieldsUnion document */
  create?: InputMaybe<FormRowfieldsUnionCreateInput>;
};

export type FormRowfieldsUnionCreateWithPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxCreateWithPositionInput>;
  FormInput?: InputMaybe<FormInputCreateWithPositionInput>;
  FormRadio?: InputMaybe<FormRadioCreateWithPositionInput>;
  FormSelect?: InputMaybe<FormSelectCreateWithPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaCreateWithPositionInput>;
};

export type FormRowfieldsUnionUpdateInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateInput>;
  FormInput?: InputMaybe<FormInputUpdateInput>;
  FormRadio?: InputMaybe<FormRadioUpdateInput>;
  FormSelect?: InputMaybe<FormSelectUpdateInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateInput>;
};

export type FormRowfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple FormRowfieldsUnion component instances */
  create?: InputMaybe<Array<FormRowfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple FormRowfieldsUnion documents */
  delete?: InputMaybe<Array<FormRowfieldsUnionWhereUniqueInput>>;
  /** Update multiple FormRowfieldsUnion component instances */
  update?: InputMaybe<Array<FormRowfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormRowfieldsUnion component instances */
  upsert?: InputMaybe<Array<FormRowfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormRowfieldsUnionUpdateManyWithNestedWhereInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateManyWithNestedWhereInput>;
  FormInput?: InputMaybe<FormInputUpdateManyWithNestedWhereInput>;
  FormRadio?: InputMaybe<FormRadioUpdateManyWithNestedWhereInput>;
  FormSelect?: InputMaybe<FormSelectUpdateManyWithNestedWhereInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateManyWithNestedWhereInput>;
};

export type FormRowfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one FormRowfieldsUnion document */
  create?: InputMaybe<FormRowfieldsUnionCreateInput>;
  /** Delete currently connected FormRowfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormRowfieldsUnion document */
  update?: InputMaybe<FormRowfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormRowfieldsUnion document */
  upsert?: InputMaybe<FormRowfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type FormRowfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateWithNestedWhereUniqueAndPositionInput>;
  FormInput?: InputMaybe<FormInputUpdateWithNestedWhereUniqueAndPositionInput>;
  FormRadio?: InputMaybe<FormRadioUpdateWithNestedWhereUniqueAndPositionInput>;
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueAndPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FormRowfieldsUnionUpdateWithNestedWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateWithNestedWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputUpdateWithNestedWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioUpdateWithNestedWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateWithNestedWhereUniqueInput>;
};

export type FormRowfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpsertWithNestedWhereUniqueAndPositionInput>;
  FormInput?: InputMaybe<FormInputUpsertWithNestedWhereUniqueAndPositionInput>;
  FormRadio?: InputMaybe<FormRadioUpsertWithNestedWhereUniqueAndPositionInput>;
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueAndPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FormRowfieldsUnionUpsertWithNestedWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpsertWithNestedWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputUpsertWithNestedWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioUpsertWithNestedWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaUpsertWithNestedWhereUniqueInput>;
};

export type FormRowfieldsUnionWhereInput = {
  FormCheckbox?: InputMaybe<FormCheckboxWhereInput>;
  FormInput?: InputMaybe<FormInputWhereInput>;
  FormRadio?: InputMaybe<FormRadioWhereInput>;
  FormSelect?: InputMaybe<FormSelectWhereInput>;
  FormTextarea?: InputMaybe<FormTextareaWhereInput>;
};

export type FormRowfieldsUnionWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaWhereUniqueInput>;
};

export type FormSelect = {
  __typename?: 'FormSelect';
  choices: Array<FormOption>;
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormSelect>;
  name: Scalars['String'];
  required?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type FormSelectChoicesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FormOptionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormOptionWhereInput>;
};


export type FormSelectLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormSelectConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormSelectWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormSelectConnection = {
  __typename?: 'FormSelectConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormSelectEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormSelectCreateInput = {
  choices?: InputMaybe<FormOptionCreateManyInlineInput>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormSelectCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormSelectCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export type FormSelectCreateLocalizationInput = {
  /** Localization input */
  data: FormSelectCreateLocalizationDataInput;
  locale: Locale;
};

export type FormSelectCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormSelectCreateLocalizationInput>>;
};

export type FormSelectCreateManyInlineInput = {
  /** Create and connect multiple existing FormSelect documents */
  create?: InputMaybe<Array<FormSelectCreateInput>>;
};

export type FormSelectCreateOneInlineInput = {
  /** Create and connect one FormSelect document */
  create?: InputMaybe<FormSelectCreateInput>;
};

export type FormSelectCreateWithPositionInput = {
  /** Document to create */
  data: FormSelectCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormSelectEdge = {
  __typename?: 'FormSelectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormSelect;
};

/** Identifies documents */
export type FormSelectManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  choices_every?: InputMaybe<FormOptionWhereInput>;
  choices_none?: InputMaybe<FormOptionWhereInput>;
  choices_some?: InputMaybe<FormOptionWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum FormSelectOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type FormSelectParent = Form | FormRow;

export type FormSelectParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
};

export type FormSelectParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
};

export type FormSelectParentCreateManyInlineInput = {
  /** Connect multiple existing FormSelectParent documents */
  connect?: InputMaybe<Array<FormSelectParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormSelectParent documents */
  create?: InputMaybe<Array<FormSelectParentCreateInput>>;
};

export type FormSelectParentCreateOneInlineInput = {
  /** Connect one existing FormSelectParent document */
  connect?: InputMaybe<FormSelectParentWhereUniqueInput>;
  /** Create and connect one FormSelectParent document */
  create?: InputMaybe<FormSelectParentCreateInput>;
};

export type FormSelectParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
};

export type FormSelectParentUpdateManyInlineInput = {
  /** Connect multiple existing FormSelectParent documents */
  connect?: InputMaybe<Array<FormSelectParentConnectInput>>;
  /** Create and connect multiple FormSelectParent documents */
  create?: InputMaybe<Array<FormSelectParentCreateInput>>;
  /** Delete multiple FormSelectParent documents */
  delete?: InputMaybe<Array<FormSelectParentWhereUniqueInput>>;
  /** Disconnect multiple FormSelectParent documents */
  disconnect?: InputMaybe<Array<FormSelectParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormSelectParent documents */
  set?: InputMaybe<Array<FormSelectParentWhereUniqueInput>>;
  /** Update multiple FormSelectParent documents */
  update?: InputMaybe<Array<FormSelectParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormSelectParent documents */
  upsert?: InputMaybe<Array<FormSelectParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormSelectParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
};

export type FormSelectParentUpdateOneInlineInput = {
  /** Connect existing FormSelectParent document */
  connect?: InputMaybe<FormSelectParentWhereUniqueInput>;
  /** Create and connect one FormSelectParent document */
  create?: InputMaybe<FormSelectParentCreateInput>;
  /** Delete currently connected FormSelectParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormSelectParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormSelectParent document */
  update?: InputMaybe<FormSelectParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormSelectParent document */
  upsert?: InputMaybe<FormSelectParentUpsertWithNestedWhereUniqueInput>;
};

export type FormSelectParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
};

export type FormSelectParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormSelectParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
};

export type FormSelectParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
};

export type FormSelectUpdateInput = {
  choices?: InputMaybe<FormOptionUpdateManyInlineInput>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormSelectUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormSelectUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormSelectUpdateLocalizationInput = {
  data: FormSelectUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormSelectUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormSelectCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormSelectUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormSelectUpsertLocalizationInput>>;
};

export type FormSelectUpdateManyInlineInput = {
  /** Create and connect multiple FormSelect component instances */
  create?: InputMaybe<Array<FormSelectCreateWithPositionInput>>;
  /** Delete multiple FormSelect documents */
  delete?: InputMaybe<Array<FormSelectWhereUniqueInput>>;
  /** Update multiple FormSelect component instances */
  update?: InputMaybe<Array<FormSelectUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormSelect component instances */
  upsert?: InputMaybe<Array<FormSelectUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormSelectUpdateManyInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormSelectUpdateManyLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormSelectUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormSelectUpdateManyLocalizationInput = {
  data: FormSelectUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormSelectUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormSelectUpdateManyLocalizationInput>>;
};

export type FormSelectUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormSelectUpdateManyInput;
  /** Document search */
  where: FormSelectWhereInput;
};

export type FormSelectUpdateOneInlineInput = {
  /** Create and connect one FormSelect document */
  create?: InputMaybe<FormSelectCreateInput>;
  /** Delete currently connected FormSelect document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormSelect document */
  update?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormSelect document */
  upsert?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueInput>;
};

export type FormSelectUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormSelectUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormSelectWhereUniqueInput;
};

export type FormSelectUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormSelectUpdateInput;
  /** Unique document search */
  where: FormSelectWhereUniqueInput;
};

export type FormSelectUpsertInput = {
  /** Create document if it didn't exist */
  create: FormSelectCreateInput;
  /** Update document if it exists */
  update: FormSelectUpdateInput;
};

export type FormSelectUpsertLocalizationInput = {
  create: FormSelectCreateLocalizationDataInput;
  locale: Locale;
  update: FormSelectUpdateLocalizationDataInput;
};

export type FormSelectUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormSelectUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormSelectWhereUniqueInput;
};

export type FormSelectUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormSelectUpsertInput;
  /** Unique document search */
  where: FormSelectWhereUniqueInput;
};

/** Identifies documents */
export type FormSelectWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormSelectWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  choices_every?: InputMaybe<FormOptionWhereInput>;
  choices_none?: InputMaybe<FormOptionWhereInput>;
  choices_some?: InputMaybe<FormOptionWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References FormSelect record uniquely */
export type FormSelectWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormTextarea = {
  __typename?: 'FormTextarea';
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<FormTextarea>;
  name: Scalars['String'];
  placeholder?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type FormTextareaLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type FormTextareaConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormTextareaWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormTextareaConnection = {
  __typename?: 'FormTextareaConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormTextareaEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormTextareaCreateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<FormTextareaCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormTextareaCreateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormTextareaCreateLocalizationInput = {
  /** Localization input */
  data: FormTextareaCreateLocalizationDataInput;
  locale: Locale;
};

export type FormTextareaCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<FormTextareaCreateLocalizationInput>>;
};

export type FormTextareaCreateManyInlineInput = {
  /** Create and connect multiple existing FormTextarea documents */
  create?: InputMaybe<Array<FormTextareaCreateInput>>;
};

export type FormTextareaCreateOneInlineInput = {
  /** Create and connect one FormTextarea document */
  create?: InputMaybe<FormTextareaCreateInput>;
};

export type FormTextareaCreateWithPositionInput = {
  /** Document to create */
  data: FormTextareaCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormTextareaEdge = {
  __typename?: 'FormTextareaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormTextarea;
};

/** Identifies documents */
export type FormTextareaManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum FormTextareaOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PlaceholderAsc = 'placeholder_ASC',
  PlaceholderDesc = 'placeholder_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type FormTextareaParent = Form | FormRow;

export type FormTextareaParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
};

export type FormTextareaParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
};

export type FormTextareaParentCreateManyInlineInput = {
  /** Connect multiple existing FormTextareaParent documents */
  connect?: InputMaybe<Array<FormTextareaParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormTextareaParent documents */
  create?: InputMaybe<Array<FormTextareaParentCreateInput>>;
};

export type FormTextareaParentCreateOneInlineInput = {
  /** Connect one existing FormTextareaParent document */
  connect?: InputMaybe<FormTextareaParentWhereUniqueInput>;
  /** Create and connect one FormTextareaParent document */
  create?: InputMaybe<FormTextareaParentCreateInput>;
};

export type FormTextareaParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
};

export type FormTextareaParentUpdateManyInlineInput = {
  /** Connect multiple existing FormTextareaParent documents */
  connect?: InputMaybe<Array<FormTextareaParentConnectInput>>;
  /** Create and connect multiple FormTextareaParent documents */
  create?: InputMaybe<Array<FormTextareaParentCreateInput>>;
  /** Delete multiple FormTextareaParent documents */
  delete?: InputMaybe<Array<FormTextareaParentWhereUniqueInput>>;
  /** Disconnect multiple FormTextareaParent documents */
  disconnect?: InputMaybe<Array<FormTextareaParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormTextareaParent documents */
  set?: InputMaybe<Array<FormTextareaParentWhereUniqueInput>>;
  /** Update multiple FormTextareaParent documents */
  update?: InputMaybe<Array<FormTextareaParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormTextareaParent documents */
  upsert?: InputMaybe<Array<FormTextareaParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormTextareaParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
};

export type FormTextareaParentUpdateOneInlineInput = {
  /** Connect existing FormTextareaParent document */
  connect?: InputMaybe<FormTextareaParentWhereUniqueInput>;
  /** Create and connect one FormTextareaParent document */
  create?: InputMaybe<FormTextareaParentCreateInput>;
  /** Delete currently connected FormTextareaParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormTextareaParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormTextareaParent document */
  update?: InputMaybe<FormTextareaParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormTextareaParent document */
  upsert?: InputMaybe<FormTextareaParentUpsertWithNestedWhereUniqueInput>;
};

export type FormTextareaParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
};

export type FormTextareaParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
};

export type FormTextareaParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
};

export type FormTextareaParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
};

export type FormTextareaUpdateInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormTextareaUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormTextareaUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormTextareaUpdateLocalizationInput = {
  data: FormTextareaUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormTextareaUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormTextareaCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormTextareaUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormTextareaUpsertLocalizationInput>>;
};

export type FormTextareaUpdateManyInlineInput = {
  /** Create and connect multiple FormTextarea component instances */
  create?: InputMaybe<Array<FormTextareaCreateWithPositionInput>>;
  /** Delete multiple FormTextarea documents */
  delete?: InputMaybe<Array<FormTextareaWhereUniqueInput>>;
  /** Update multiple FormTextarea component instances */
  update?: InputMaybe<Array<FormTextareaUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormTextarea component instances */
  upsert?: InputMaybe<Array<FormTextareaUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormTextareaUpdateManyInput = {
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormTextareaUpdateManyLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
  /** placeholder input for default locale (en) */
  placeholder?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type FormTextareaUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
};

export type FormTextareaUpdateManyLocalizationInput = {
  data: FormTextareaUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormTextareaUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormTextareaUpdateManyLocalizationInput>>;
};

export type FormTextareaUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormTextareaUpdateManyInput;
  /** Document search */
  where: FormTextareaWhereInput;
};

export type FormTextareaUpdateOneInlineInput = {
  /** Create and connect one FormTextarea document */
  create?: InputMaybe<FormTextareaCreateInput>;
  /** Delete currently connected FormTextarea document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormTextarea document */
  update?: InputMaybe<FormTextareaUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormTextarea document */
  upsert?: InputMaybe<FormTextareaUpsertWithNestedWhereUniqueInput>;
};

export type FormTextareaUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormTextareaUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormTextareaWhereUniqueInput;
};

export type FormTextareaUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormTextareaUpdateInput;
  /** Unique document search */
  where: FormTextareaWhereUniqueInput;
};

export type FormTextareaUpsertInput = {
  /** Create document if it didn't exist */
  create: FormTextareaCreateInput;
  /** Update document if it exists */
  update: FormTextareaUpdateInput;
};

export type FormTextareaUpsertLocalizationInput = {
  create: FormTextareaCreateLocalizationDataInput;
  locale: Locale;
  update: FormTextareaUpdateLocalizationDataInput;
};

export type FormTextareaUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormTextareaUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormTextareaWhereUniqueInput;
};

export type FormTextareaUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormTextareaUpsertInput;
  /** Unique document search */
  where: FormTextareaWhereUniqueInput;
};

/** Identifies documents */
export type FormTextareaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormTextareaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  placeholder?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  placeholder_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  placeholder_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  placeholder_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  placeholder_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  placeholder_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  placeholder_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  placeholder_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  placeholder_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  placeholder_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References FormTextarea record uniquely */
export type FormTextareaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormUpdateInput = {
  cl7xpuwt6362n01t7fb5j4ba2?: InputMaybe<AssociationDetailsUpdateManyInlineInput>;
  cl874pj0c0bi701umfajudrmv?: InputMaybe<SectionUpdateManyInlineInput>;
  event?: InputMaybe<FormEventUpdateOneInlineInput>;
  fields?: InputMaybe<FormfieldsUnionUpdateManyInlineInput>;
  formName?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<FormUpdateLocalizationsInput>;
  page?: InputMaybe<PageUpdateOneInlineInput>;
  submissions?: InputMaybe<SubmissionUpdateManyInlineInput>;
  /** submitButtonLabel input for default locale (en) */
  submitButtonLabel?: InputMaybe<Scalars['String']>;
};

export type FormUpdateLocalizationDataInput = {
  submitButtonLabel?: InputMaybe<Scalars['String']>;
};

export type FormUpdateLocalizationInput = {
  data: FormUpdateLocalizationDataInput;
  locale: Locale;
};

export type FormUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<FormCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<FormUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<FormUpsertLocalizationInput>>;
};

export type FormUpdateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormConnectInput>>;
  /** Create and connect multiple Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
  /** Delete multiple Form documents */
  delete?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Disconnect multiple Form documents */
  disconnect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Form documents */
  set?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Update multiple Form documents */
  update?: InputMaybe<Array<FormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Form documents */
  upsert?: InputMaybe<Array<FormUpsertWithNestedWhereUniqueInput>>;
};

export type FormUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<FormUpdateManyLocalizationsInput>;
  /** submitButtonLabel input for default locale (en) */
  submitButtonLabel?: InputMaybe<Scalars['String']>;
};

export type FormUpdateManyLocalizationDataInput = {
  submitButtonLabel?: InputMaybe<Scalars['String']>;
};

export type FormUpdateManyLocalizationInput = {
  data: FormUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type FormUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<FormUpdateManyLocalizationInput>>;
};

export type FormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormUpdateManyInput;
  /** Document search */
  where: FormWhereInput;
};

export type FormUpdateOneInlineInput = {
  /** Connect existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
  /** Delete currently connected Form document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Form document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Form document */
  update?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Form document */
  upsert?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormUpdateInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

export type FormUpsertInput = {
  /** Create document if it didn't exist */
  create: FormCreateInput;
  /** Update document if it exists */
  update: FormUpdateInput;
};

export type FormUpsertLocalizationInput = {
  create: FormCreateLocalizationDataInput;
  locale: Locale;
  update: FormUpdateLocalizationDataInput;
};

export type FormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormUpsertInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type FormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  formName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  submissions_every?: InputMaybe<SubmissionWhereInput>;
  submissions_none?: InputMaybe<SubmissionWhereInput>;
  submissions_some?: InputMaybe<SubmissionWhereInput>;
  submitButtonLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  submitButtonLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  submitButtonLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  submitButtonLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  submitButtonLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  submitButtonLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  submitButtonLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  submitButtonLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  submitButtonLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  submitButtonLabel_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Form record uniquely */
export type FormWhereUniqueInput = {
  formName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

export type FormfieldsUnion = FormCheckbox | FormInput | FormRadio | FormRow | FormSelect | FormTextarea;

export type FormfieldsUnionConnectInput = {
  FormCheckbox?: InputMaybe<FormCheckboxConnectInput>;
  FormInput?: InputMaybe<FormInputConnectInput>;
  FormRadio?: InputMaybe<FormRadioConnectInput>;
  FormRow?: InputMaybe<FormRowConnectInput>;
  FormSelect?: InputMaybe<FormSelectConnectInput>;
  FormTextarea?: InputMaybe<FormTextareaConnectInput>;
};

export type FormfieldsUnionCreateInput = {
  FormCheckbox?: InputMaybe<FormCheckboxCreateInput>;
  FormInput?: InputMaybe<FormInputCreateInput>;
  FormRadio?: InputMaybe<FormRadioCreateInput>;
  FormRow?: InputMaybe<FormRowCreateInput>;
  FormSelect?: InputMaybe<FormSelectCreateInput>;
  FormTextarea?: InputMaybe<FormTextareaCreateInput>;
};

export type FormfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FormfieldsUnion documents */
  create?: InputMaybe<Array<FormfieldsUnionCreateInput>>;
};

export type FormfieldsUnionCreateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
};

export type FormfieldsUnionCreateWithPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxCreateWithPositionInput>;
  FormInput?: InputMaybe<FormInputCreateWithPositionInput>;
  FormRadio?: InputMaybe<FormRadioCreateWithPositionInput>;
  FormRow?: InputMaybe<FormRowCreateWithPositionInput>;
  FormSelect?: InputMaybe<FormSelectCreateWithPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaCreateWithPositionInput>;
};

export type FormfieldsUnionUpdateInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateInput>;
  FormInput?: InputMaybe<FormInputUpdateInput>;
  FormRadio?: InputMaybe<FormRadioUpdateInput>;
  FormRow?: InputMaybe<FormRowUpdateInput>;
  FormSelect?: InputMaybe<FormSelectUpdateInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateInput>;
};

export type FormfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple FormfieldsUnion component instances */
  create?: InputMaybe<Array<FormfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple FormfieldsUnion documents */
  delete?: InputMaybe<Array<FormfieldsUnionWhereUniqueInput>>;
  /** Update multiple FormfieldsUnion component instances */
  update?: InputMaybe<Array<FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormfieldsUnion component instances */
  upsert?: InputMaybe<Array<FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormfieldsUnionUpdateManyWithNestedWhereInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateManyWithNestedWhereInput>;
  FormInput?: InputMaybe<FormInputUpdateManyWithNestedWhereInput>;
  FormRadio?: InputMaybe<FormRadioUpdateManyWithNestedWhereInput>;
  FormRow?: InputMaybe<FormRowUpdateManyWithNestedWhereInput>;
  FormSelect?: InputMaybe<FormSelectUpdateManyWithNestedWhereInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateManyWithNestedWhereInput>;
};

export type FormfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
  /** Delete currently connected FormfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormfieldsUnion document */
  update?: InputMaybe<FormfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormfieldsUnion document */
  upsert?: InputMaybe<FormfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateWithNestedWhereUniqueAndPositionInput>;
  FormInput?: InputMaybe<FormInputUpdateWithNestedWhereUniqueAndPositionInput>;
  FormRadio?: InputMaybe<FormRadioUpdateWithNestedWhereUniqueAndPositionInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueAndPositionInput>;
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueAndPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpdateWithNestedWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputUpdateWithNestedWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioUpdateWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpdateWithNestedWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectUpdateWithNestedWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaUpdateWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpsertWithNestedWhereUniqueAndPositionInput>;
  FormInput?: InputMaybe<FormInputUpsertWithNestedWhereUniqueAndPositionInput>;
  FormRadio?: InputMaybe<FormRadioUpsertWithNestedWhereUniqueAndPositionInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueAndPositionInput>;
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueAndPositionInput>;
  FormTextarea?: InputMaybe<FormTextareaUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxUpsertWithNestedWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputUpsertWithNestedWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioUpsertWithNestedWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowUpsertWithNestedWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectUpsertWithNestedWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionWhereInput = {
  FormCheckbox?: InputMaybe<FormCheckboxWhereInput>;
  FormInput?: InputMaybe<FormInputWhereInput>;
  FormRadio?: InputMaybe<FormRadioWhereInput>;
  FormRow?: InputMaybe<FormRowWhereInput>;
  FormSelect?: InputMaybe<FormSelectWhereInput>;
  FormTextarea?: InputMaybe<FormTextareaWhereInput>;
};

export type FormfieldsUnionWhereUniqueInput = {
  FormCheckbox?: InputMaybe<FormCheckboxWhereUniqueInput>;
  FormInput?: InputMaybe<FormInputWhereUniqueInput>;
  FormRadio?: InputMaybe<FormRadioWhereUniqueInput>;
  FormRow?: InputMaybe<FormRowWhereUniqueInput>;
  FormSelect?: InputMaybe<FormSelectWhereUniqueInput>;
  FormTextarea?: InputMaybe<FormTextareaWhereUniqueInput>;
};

/** This Component is used to display the title of a section */
export type Headline = {
  __typename?: 'Headline';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Headline>;
  /** System stage field */
  stage: Stage;
  underline?: Maybe<Scalars['Boolean']>;
  underlineAlign?: Maybe<HeadlineUnderlineVariant>;
  value: Scalars['String'];
};


/** This Component is used to display the title of a section */
export type HeadlineLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

/** A connection to a list of items. */
export type HeadlineConnection = {
  __typename?: 'HeadlineConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HeadlineEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HeadlineCreateInput = {
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<HeadlineCreateLocalizationsInput>;
  underline?: InputMaybe<Scalars['Boolean']>;
  underlineAlign?: InputMaybe<HeadlineUnderlineVariant>;
  /** value input for default locale (en) */
  value: Scalars['String'];
};

export type HeadlineCreateLocalizationDataInput = {
  value: Scalars['String'];
};

export type HeadlineCreateLocalizationInput = {
  /** Localization input */
  data: HeadlineCreateLocalizationDataInput;
  locale: Locale;
};

export type HeadlineCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<HeadlineCreateLocalizationInput>>;
};

export type HeadlineCreateWithPositionInput = {
  /** Document to create */
  data: HeadlineCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type HeadlineEdge = {
  __typename?: 'HeadlineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Headline;
};

/** Identifies documents */
export type HeadlineManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  underline?: InputMaybe<Scalars['Boolean']>;
  underlineAlign?: InputMaybe<HeadlineUnderlineVariant>;
  /** All values that are contained in given list. */
  underlineAlign_in?: InputMaybe<Array<InputMaybe<HeadlineUnderlineVariant>>>;
  /** All values that are not equal to given value. */
  underlineAlign_not?: InputMaybe<HeadlineUnderlineVariant>;
  /** All values that are not contained in given list. */
  underlineAlign_not_in?: InputMaybe<Array<InputMaybe<HeadlineUnderlineVariant>>>;
  /** All values that are not equal to given value. */
  underline_not?: InputMaybe<Scalars['Boolean']>;
};

export enum HeadlineOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  UnderlineAlignAsc = 'underlineAlign_ASC',
  UnderlineAlignDesc = 'underlineAlign_DESC',
  UnderlineAsc = 'underline_ASC',
  UnderlineDesc = 'underline_DESC',
  ValueAsc = 'value_ASC',
  ValueDesc = 'value_DESC'
}

export enum HeadlineSizeVariant {
  Lg = 'LG',
  Md = 'MD',
  Xl = 'XL',
  Xs = 'XS',
  Xxl = 'XXL'
}

export enum HeadlineUnderlineVariant {
  Center = 'CENTER',
  Left = 'LEFT'
}

export type HeadlineUpdateInput = {
  /** Manage document localizations */
  localizations?: InputMaybe<HeadlineUpdateLocalizationsInput>;
  underline?: InputMaybe<Scalars['Boolean']>;
  underlineAlign?: InputMaybe<HeadlineUnderlineVariant>;
  /** value input for default locale (en) */
  value?: InputMaybe<Scalars['String']>;
};

export type HeadlineUpdateLocalizationDataInput = {
  value?: InputMaybe<Scalars['String']>;
};

export type HeadlineUpdateLocalizationInput = {
  data: HeadlineUpdateLocalizationDataInput;
  locale: Locale;
};

export type HeadlineUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<HeadlineCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<HeadlineUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<HeadlineUpsertLocalizationInput>>;
};

export type HeadlineUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<HeadlineUpdateManyLocalizationsInput>;
  underline?: InputMaybe<Scalars['Boolean']>;
  underlineAlign?: InputMaybe<HeadlineUnderlineVariant>;
  /** value input for default locale (en) */
  value?: InputMaybe<Scalars['String']>;
};

export type HeadlineUpdateManyLocalizationDataInput = {
  value?: InputMaybe<Scalars['String']>;
};

export type HeadlineUpdateManyLocalizationInput = {
  data: HeadlineUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type HeadlineUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<HeadlineUpdateManyLocalizationInput>>;
};

export type HeadlineUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HeadlineUpdateManyInput;
  /** Document search */
  where: HeadlineWhereInput;
};

export type HeadlineUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<HeadlineUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HeadlineWhereUniqueInput;
};

export type HeadlineUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HeadlineUpdateInput;
  /** Unique document search */
  where: HeadlineWhereUniqueInput;
};

export type HeadlineUpsertInput = {
  /** Create document if it didn't exist */
  create: HeadlineCreateInput;
  /** Update document if it exists */
  update: HeadlineUpdateInput;
};

export type HeadlineUpsertLocalizationInput = {
  create: HeadlineCreateLocalizationDataInput;
  locale: Locale;
  update: HeadlineUpdateLocalizationDataInput;
};

export type HeadlineUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<HeadlineUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HeadlineWhereUniqueInput;
};

export type HeadlineUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HeadlineUpsertInput;
  /** Unique document search */
  where: HeadlineWhereUniqueInput;
};

/** Identifies documents */
export type HeadlineWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeadlineWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  underline?: InputMaybe<Scalars['Boolean']>;
  underlineAlign?: InputMaybe<HeadlineUnderlineVariant>;
  /** All values that are contained in given list. */
  underlineAlign_in?: InputMaybe<Array<InputMaybe<HeadlineUnderlineVariant>>>;
  /** All values that are not equal to given value. */
  underlineAlign_not?: InputMaybe<HeadlineUnderlineVariant>;
  /** All values that are not contained in given list. */
  underlineAlign_not_in?: InputMaybe<Array<InputMaybe<HeadlineUnderlineVariant>>>;
  /** All values that are not equal to given value. */
  underline_not?: InputMaybe<Scalars['Boolean']>;
  value?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  value_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  value_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  value_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  value_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  value_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  value_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  value_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  value_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Headline record uniquely */
export type HeadlineWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export enum ImagePosition {
  Left = 'LEFT',
  Right = 'RIGHT'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type Layout = Node & {
  __typename?: 'Layout';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Layout>;
  /** List of Layout versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Layout>;
  navBar: Navigation;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutNavBarArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This component is not meant to be changed by the content manager since it contains critical properties allowing the proper rendering of the website. */
export type LayoutUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type LayoutConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LayoutWhereUniqueInput;
};

/** A connection to a list of items. */
export type LayoutConnection = {
  __typename?: 'LayoutConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LayoutEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LayoutCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<LayoutCreateLocalizationsInput>;
  navBar: NavigationCreateOneInlineInput;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type LayoutCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type LayoutCreateLocalizationInput = {
  /** Localization input */
  data: LayoutCreateLocalizationDataInput;
  locale: Locale;
};

export type LayoutCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<LayoutCreateLocalizationInput>>;
};

export type LayoutCreateManyInlineInput = {
  /** Connect multiple existing Layout documents */
  connect?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Create and connect multiple existing Layout documents */
  create?: InputMaybe<Array<LayoutCreateInput>>;
};

export type LayoutCreateOneInlineInput = {
  /** Connect one existing Layout document */
  connect?: InputMaybe<LayoutWhereUniqueInput>;
  /** Create and connect one Layout document */
  create?: InputMaybe<LayoutCreateInput>;
};

/** An edge in a connection. */
export type LayoutEdge = {
  __typename?: 'LayoutEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Layout;
};

/** Identifies documents */
export type LayoutManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_none?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_some?: InputMaybe<LayoutWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  navBar?: InputMaybe<NavigationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum LayoutOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type LayoutUpdateInput = {
  /** Manage document localizations */
  localizations?: InputMaybe<LayoutUpdateLocalizationsInput>;
  navBar?: InputMaybe<NavigationUpdateOneInlineInput>;
};

export type LayoutUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<LayoutCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type LayoutUpdateManyInlineInput = {
  /** Connect multiple existing Layout documents */
  connect?: InputMaybe<Array<LayoutConnectInput>>;
  /** Create and connect multiple Layout documents */
  create?: InputMaybe<Array<LayoutCreateInput>>;
  /** Delete multiple Layout documents */
  delete?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Disconnect multiple Layout documents */
  disconnect?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Layout documents */
  set?: InputMaybe<Array<LayoutWhereUniqueInput>>;
  /** Update multiple Layout documents */
  update?: InputMaybe<Array<LayoutUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Layout documents */
  upsert?: InputMaybe<Array<LayoutUpsertWithNestedWhereUniqueInput>>;
};

export type LayoutUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type LayoutUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LayoutUpdateManyInput;
  /** Document search */
  where: LayoutWhereInput;
};

export type LayoutUpdateOneInlineInput = {
  /** Connect existing Layout document */
  connect?: InputMaybe<LayoutWhereUniqueInput>;
  /** Create and connect one Layout document */
  create?: InputMaybe<LayoutCreateInput>;
  /** Delete currently connected Layout document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Layout document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Layout document */
  update?: InputMaybe<LayoutUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Layout document */
  upsert?: InputMaybe<LayoutUpsertWithNestedWhereUniqueInput>;
};

export type LayoutUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LayoutUpdateInput;
  /** Unique document search */
  where: LayoutWhereUniqueInput;
};

export type LayoutUpsertInput = {
  /** Create document if it didn't exist */
  create: LayoutCreateInput;
  /** Update document if it exists */
  update: LayoutUpdateInput;
};

export type LayoutUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LayoutUpsertInput;
  /** Unique document search */
  where: LayoutWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type LayoutWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type LayoutWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_none?: InputMaybe<LayoutWhereStageInput>;
  documentInStages_some?: InputMaybe<LayoutWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  navBar?: InputMaybe<NavigationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type LayoutWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LayoutWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<LayoutWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Layout record uniquely */
export type LayoutWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Link = {
  __typename?: 'Link';
  external?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  internal?: Maybe<LinkInternal>;
  isExternal: Scalars['Boolean'];
  label: Scalars['String'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Link>;
  /** System stage field */
  stage: Stage;
};


export type LinkInternalArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type LinkLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type LinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkConnection = {
  __typename?: 'LinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkCreateInput = {
  external?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<LinkInternalCreateOneInlineInput>;
  isExternal: Scalars['Boolean'];
  /** label input for default locale (en) */
  label: Scalars['String'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<LinkCreateLocalizationsInput>;
};

export type LinkCreateLocalizationDataInput = {
  label: Scalars['String'];
};

export type LinkCreateLocalizationInput = {
  /** Localization input */
  data: LinkCreateLocalizationDataInput;
  locale: Locale;
};

export type LinkCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<LinkCreateLocalizationInput>>;
};

export type LinkCreateManyInlineInput = {
  /** Create and connect multiple existing Link documents */
  create?: InputMaybe<Array<LinkCreateInput>>;
};

export type LinkCreateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
};

export type LinkCreateWithPositionInput = {
  /** Document to create */
  data: LinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkEdge = {
  __typename?: 'LinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Link;
};

export type LinkInternal = Event | Page | Project;

export type LinkInternalConnectInput = {
  Event?: InputMaybe<EventConnectInput>;
  Page?: InputMaybe<PageConnectInput>;
  Project?: InputMaybe<ProjectConnectInput>;
};

export type LinkInternalCreateInput = {
  Event?: InputMaybe<EventCreateInput>;
  Page?: InputMaybe<PageCreateInput>;
  Project?: InputMaybe<ProjectCreateInput>;
};

export type LinkInternalCreateManyInlineInput = {
  /** Connect multiple existing LinkInternal documents */
  connect?: InputMaybe<Array<LinkInternalWhereUniqueInput>>;
  /** Create and connect multiple existing LinkInternal documents */
  create?: InputMaybe<Array<LinkInternalCreateInput>>;
};

export type LinkInternalCreateOneInlineInput = {
  /** Connect one existing LinkInternal document */
  connect?: InputMaybe<LinkInternalWhereUniqueInput>;
  /** Create and connect one LinkInternal document */
  create?: InputMaybe<LinkInternalCreateInput>;
};

export type LinkInternalUpdateInput = {
  Event?: InputMaybe<EventUpdateInput>;
  Page?: InputMaybe<PageUpdateInput>;
  Project?: InputMaybe<ProjectUpdateInput>;
};

export type LinkInternalUpdateManyInlineInput = {
  /** Connect multiple existing LinkInternal documents */
  connect?: InputMaybe<Array<LinkInternalConnectInput>>;
  /** Create and connect multiple LinkInternal documents */
  create?: InputMaybe<Array<LinkInternalCreateInput>>;
  /** Delete multiple LinkInternal documents */
  delete?: InputMaybe<Array<LinkInternalWhereUniqueInput>>;
  /** Disconnect multiple LinkInternal documents */
  disconnect?: InputMaybe<Array<LinkInternalWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkInternal documents */
  set?: InputMaybe<Array<LinkInternalWhereUniqueInput>>;
  /** Update multiple LinkInternal documents */
  update?: InputMaybe<Array<LinkInternalUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkInternal documents */
  upsert?: InputMaybe<Array<LinkInternalUpsertWithNestedWhereUniqueInput>>;
};

export type LinkInternalUpdateManyWithNestedWhereInput = {
  Event?: InputMaybe<EventUpdateManyWithNestedWhereInput>;
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
  Project?: InputMaybe<ProjectUpdateManyWithNestedWhereInput>;
};

export type LinkInternalUpdateOneInlineInput = {
  /** Connect existing LinkInternal document */
  connect?: InputMaybe<LinkInternalWhereUniqueInput>;
  /** Create and connect one LinkInternal document */
  create?: InputMaybe<LinkInternalCreateInput>;
  /** Delete currently connected LinkInternal document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LinkInternal document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkInternal document */
  update?: InputMaybe<LinkInternalUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkInternal document */
  upsert?: InputMaybe<LinkInternalUpsertWithNestedWhereUniqueInput>;
};

export type LinkInternalUpdateWithNestedWhereUniqueInput = {
  Event?: InputMaybe<EventUpdateWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  Project?: InputMaybe<ProjectUpdateWithNestedWhereUniqueInput>;
};

export type LinkInternalUpsertWithNestedWhereUniqueInput = {
  Event?: InputMaybe<EventUpsertWithNestedWhereUniqueInput>;
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  Project?: InputMaybe<ProjectUpsertWithNestedWhereUniqueInput>;
};

export type LinkInternalWhereInput = {
  Event?: InputMaybe<EventWhereInput>;
  Page?: InputMaybe<PageWhereInput>;
  Project?: InputMaybe<ProjectWhereInput>;
};

export type LinkInternalWhereUniqueInput = {
  Event?: InputMaybe<EventWhereUniqueInput>;
  Page?: InputMaybe<PageWhereUniqueInput>;
  Project?: InputMaybe<ProjectWhereUniqueInput>;
};

/** Identifies documents */
export type LinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  external?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  external_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  external_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  external_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  external_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  external_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  external_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  external_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  external_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  external_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isExternal?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isExternal_not?: InputMaybe<Scalars['Boolean']>;
};

export enum LinkOrderByInput {
  ExternalAsc = 'external_ASC',
  ExternalDesc = 'external_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsExternalAsc = 'isExternal_ASC',
  IsExternalDesc = 'isExternal_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC'
}

export type LinkParent = Button;

export type LinkParentConnectInput = {
  Button?: InputMaybe<ButtonConnectInput>;
};

export type LinkParentCreateInput = {
  Button?: InputMaybe<ButtonCreateInput>;
};

export type LinkParentCreateManyInlineInput = {
  /** Create and connect multiple existing LinkParent documents */
  create?: InputMaybe<Array<LinkParentCreateInput>>;
};

export type LinkParentCreateOneInlineInput = {
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
};

export type LinkParentCreateWithPositionInput = {
  Button?: InputMaybe<ButtonCreateWithPositionInput>;
};

export type LinkParentUpdateInput = {
  Button?: InputMaybe<ButtonUpdateInput>;
};

export type LinkParentUpdateManyInlineInput = {
  /** Create and connect multiple LinkParent component instances */
  create?: InputMaybe<Array<LinkParentCreateWithPositionInput>>;
  /** Delete multiple LinkParent documents */
  delete?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Update multiple LinkParent component instances */
  update?: InputMaybe<Array<LinkParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LinkParent component instances */
  upsert?: InputMaybe<Array<LinkParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkParentUpdateManyWithNestedWhereInput = {
  Button?: InputMaybe<ButtonUpdateManyWithNestedWhereInput>;
};

export type LinkParentUpdateOneInlineInput = {
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
  /** Delete currently connected LinkParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkParent document */
  update?: InputMaybe<LinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkParent document */
  upsert?: InputMaybe<LinkParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Button?: InputMaybe<ButtonUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type LinkParentUpdateWithNestedWhereUniqueInput = {
  Button?: InputMaybe<ButtonUpdateWithNestedWhereUniqueInput>;
};

export type LinkParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Button?: InputMaybe<ButtonUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type LinkParentUpsertWithNestedWhereUniqueInput = {
  Button?: InputMaybe<ButtonUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentWhereInput = {
  Button?: InputMaybe<ButtonWhereInput>;
};

export type LinkParentWhereUniqueInput = {
  Button?: InputMaybe<ButtonWhereUniqueInput>;
};

export type LinkUpdateInput = {
  external?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<LinkInternalUpdateOneInlineInput>;
  isExternal?: InputMaybe<Scalars['Boolean']>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<LinkUpdateLocalizationsInput>;
};

export type LinkUpdateLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
};

export type LinkUpdateLocalizationInput = {
  data: LinkUpdateLocalizationDataInput;
  locale: Locale;
};

export type LinkUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<LinkCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<LinkUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<LinkUpsertLocalizationInput>>;
};

export type LinkUpdateManyInlineInput = {
  /** Create and connect multiple Link component instances */
  create?: InputMaybe<Array<LinkCreateWithPositionInput>>;
  /** Delete multiple Link documents */
  delete?: InputMaybe<Array<LinkWhereUniqueInput>>;
  /** Update multiple Link component instances */
  update?: InputMaybe<Array<LinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Link component instances */
  upsert?: InputMaybe<Array<LinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkUpdateManyInput = {
  isExternal?: InputMaybe<Scalars['Boolean']>;
  /** label input for default locale (en) */
  label?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<LinkUpdateManyLocalizationsInput>;
};

export type LinkUpdateManyLocalizationDataInput = {
  label?: InputMaybe<Scalars['String']>;
};

export type LinkUpdateManyLocalizationInput = {
  data: LinkUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type LinkUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<LinkUpdateManyLocalizationInput>>;
};

export type LinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkUpdateManyInput;
  /** Document search */
  where: LinkWhereInput;
};

export type LinkUpdateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
  /** Delete currently connected Link document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Link document */
  update?: InputMaybe<LinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Link document */
  upsert?: InputMaybe<LinkUpsertWithNestedWhereUniqueInput>;
};

export type LinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkUpdateInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkCreateInput;
  /** Update document if it exists */
  update: LinkUpdateInput;
};

export type LinkUpsertLocalizationInput = {
  create: LinkCreateLocalizationDataInput;
  locale: Locale;
  update: LinkUpdateLocalizationDataInput;
};

export type LinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkUpsertInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

/** Identifies documents */
export type LinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  external?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  external_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  external_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  external_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  external_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  external_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  external_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  external_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  external_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  external_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isExternal?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isExternal_not?: InputMaybe<Scalars['Boolean']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Link record uniquely */
export type LinkWhereUniqueInput = {
  external?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Locale system enumeration */
export enum Locale {
  De = 'de',
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

/** This model represents a member of the association. Members are categorized using the MemberType property */
export type Member = Node & {
  __typename?: 'Member';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** This field is specially meant for staff members. Describe here the position of a member */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<Member>;
  /** List of Member versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Member>;
  name: Scalars['String'];
  picture?: Maybe<Asset>;
  position?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  type?: Maybe<MemberType>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberPictureArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model represents a member of the association. Members are categorized using the MemberType property */
export type MemberUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type MemberConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: MemberWhereUniqueInput;
};

/** A connection to a list of items. */
export type MemberConnection = {
  __typename?: 'MemberConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<MemberEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type MemberCreateInput = {
  cl86gwrod1k7201t6d8tqfbnv?: InputMaybe<TeamSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<MemberCreateLocalizationsInput>;
  name: Scalars['String'];
  picture?: InputMaybe<AssetCreateOneInlineInput>;
  /** position input for default locale (en) */
  position?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<MemberType>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type MemberCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type MemberCreateLocalizationInput = {
  /** Localization input */
  data: MemberCreateLocalizationDataInput;
  locale: Locale;
};

export type MemberCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<MemberCreateLocalizationInput>>;
};

export type MemberCreateManyInlineInput = {
  /** Connect multiple existing Member documents */
  connect?: InputMaybe<Array<MemberWhereUniqueInput>>;
  /** Create and connect multiple existing Member documents */
  create?: InputMaybe<Array<MemberCreateInput>>;
};

export type MemberCreateOneInlineInput = {
  /** Connect one existing Member document */
  connect?: InputMaybe<MemberWhereUniqueInput>;
  /** Create and connect one Member document */
  create?: InputMaybe<MemberCreateInput>;
};

/** An edge in a connection. */
export type MemberEdge = {
  __typename?: 'MemberEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Member;
};

/** Identifies documents */
export type MemberManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MemberWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MemberWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MemberWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<MemberWhereStageInput>;
  documentInStages_none?: InputMaybe<MemberWhereStageInput>;
  documentInStages_some?: InputMaybe<MemberWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<MemberType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<MemberType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<MemberType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<MemberType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum MemberOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PositionAsc = 'position_ASC',
  PositionDesc = 'position_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** This model represents the different type of Member that exists.  STAFF: represents member occupying a post of reponsability. NORMAL:  represents a normal member with no position. ASPIRING: Is for member for whom the membership hasn't be approved yet. */
export enum MemberType {
  Aspiring = 'ASPIRING',
  Normal = 'NORMAL',
  Staff = 'STAFF'
}

export type MemberUpdateInput = {
  cl86gwrod1k7201t6d8tqfbnv?: InputMaybe<TeamSectionUpdateManyInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<MemberUpdateLocalizationsInput>;
  name?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<AssetUpdateOneInlineInput>;
  /** position input for default locale (en) */
  position?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<MemberType>;
};

export type MemberUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
};

export type MemberUpdateLocalizationInput = {
  data: MemberUpdateLocalizationDataInput;
  locale: Locale;
};

export type MemberUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<MemberCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<MemberUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<MemberUpsertLocalizationInput>>;
};

export type MemberUpdateManyInlineInput = {
  /** Connect multiple existing Member documents */
  connect?: InputMaybe<Array<MemberConnectInput>>;
  /** Create and connect multiple Member documents */
  create?: InputMaybe<Array<MemberCreateInput>>;
  /** Delete multiple Member documents */
  delete?: InputMaybe<Array<MemberWhereUniqueInput>>;
  /** Disconnect multiple Member documents */
  disconnect?: InputMaybe<Array<MemberWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Member documents */
  set?: InputMaybe<Array<MemberWhereUniqueInput>>;
  /** Update multiple Member documents */
  update?: InputMaybe<Array<MemberUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Member documents */
  upsert?: InputMaybe<Array<MemberUpsertWithNestedWhereUniqueInput>>;
};

export type MemberUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<MemberUpdateManyLocalizationsInput>;
  name?: InputMaybe<Scalars['String']>;
  /** position input for default locale (en) */
  position?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<MemberType>;
};

export type MemberUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
};

export type MemberUpdateManyLocalizationInput = {
  data: MemberUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type MemberUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<MemberUpdateManyLocalizationInput>>;
};

export type MemberUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: MemberUpdateManyInput;
  /** Document search */
  where: MemberWhereInput;
};

export type MemberUpdateOneInlineInput = {
  /** Connect existing Member document */
  connect?: InputMaybe<MemberWhereUniqueInput>;
  /** Create and connect one Member document */
  create?: InputMaybe<MemberCreateInput>;
  /** Delete currently connected Member document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Member document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Member document */
  update?: InputMaybe<MemberUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Member document */
  upsert?: InputMaybe<MemberUpsertWithNestedWhereUniqueInput>;
};

export type MemberUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: MemberUpdateInput;
  /** Unique document search */
  where: MemberWhereUniqueInput;
};

export type MemberUpsertInput = {
  /** Create document if it didn't exist */
  create: MemberCreateInput;
  /** Update document if it exists */
  update: MemberUpdateInput;
};

export type MemberUpsertLocalizationInput = {
  create: MemberCreateLocalizationDataInput;
  locale: Locale;
  update: MemberUpdateLocalizationDataInput;
};

export type MemberUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: MemberUpsertInput;
  /** Unique document search */
  where: MemberWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type MemberWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type MemberWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MemberWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MemberWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MemberWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<MemberWhereStageInput>;
  documentInStages_none?: InputMaybe<MemberWhereStageInput>;
  documentInStages_some?: InputMaybe<MemberWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<AssetWhereInput>;
  position?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  position_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  position_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  position_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  position_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  position_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  position_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  position_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  position_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  position_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  type?: InputMaybe<MemberType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<MemberType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<MemberType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<MemberType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type MemberWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MemberWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MemberWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MemberWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<MemberWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Member record uniquely */
export type MemberWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type MultiColumn = {
  __typename?: 'MultiColumn';
  columns: Array<Column>;
  /** The unique identifier */
  id: Scalars['ID'];
  numberOfColumnsOnDesktop?: Maybe<Scalars['Int']>;
  numberOfColumnsOnMobile?: Maybe<Scalars['Int']>;
  /** System stage field */
  stage: Stage;
};


export type MultiColumnColumnsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ColumnOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ColumnWhereInput>;
};

export type MultiColumnConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: MultiColumnWhereUniqueInput;
};

/** A connection to a list of items. */
export type MultiColumnConnection = {
  __typename?: 'MultiColumnConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<MultiColumnEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type MultiColumnCreateInput = {
  columns?: InputMaybe<ColumnCreateManyInlineInput>;
  numberOfColumnsOnDesktop?: InputMaybe<Scalars['Int']>;
  numberOfColumnsOnMobile?: InputMaybe<Scalars['Int']>;
};

export type MultiColumnCreateManyInlineInput = {
  /** Create and connect multiple existing MultiColumn documents */
  create?: InputMaybe<Array<MultiColumnCreateInput>>;
};

export type MultiColumnCreateOneInlineInput = {
  /** Create and connect one MultiColumn document */
  create?: InputMaybe<MultiColumnCreateInput>;
};

export type MultiColumnCreateWithPositionInput = {
  /** Document to create */
  data: MultiColumnCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type MultiColumnEdge = {
  __typename?: 'MultiColumnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: MultiColumn;
};

/** Identifies documents */
export type MultiColumnManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  columns_every?: InputMaybe<ColumnWhereInput>;
  columns_none?: InputMaybe<ColumnWhereInput>;
  columns_some?: InputMaybe<ColumnWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  numberOfColumnsOnDesktop?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  numberOfColumnsOnDesktop_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  numberOfColumnsOnDesktop_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  numberOfColumnsOnDesktop_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  numberOfColumnsOnDesktop_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  numberOfColumnsOnDesktop_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  numberOfColumnsOnDesktop_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  numberOfColumnsOnDesktop_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  numberOfColumnsOnMobile?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  numberOfColumnsOnMobile_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  numberOfColumnsOnMobile_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  numberOfColumnsOnMobile_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  numberOfColumnsOnMobile_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  numberOfColumnsOnMobile_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  numberOfColumnsOnMobile_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  numberOfColumnsOnMobile_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export enum MultiColumnOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NumberOfColumnsOnDesktopAsc = 'numberOfColumnsOnDesktop_ASC',
  NumberOfColumnsOnDesktopDesc = 'numberOfColumnsOnDesktop_DESC',
  NumberOfColumnsOnMobileAsc = 'numberOfColumnsOnMobile_ASC',
  NumberOfColumnsOnMobileDesc = 'numberOfColumnsOnMobile_DESC'
}

export type MultiColumnParent = SectionWithImage;

export type MultiColumnParentConnectInput = {
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
};

export type MultiColumnParentCreateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
};

export type MultiColumnParentCreateManyInlineInput = {
  /** Create and connect multiple existing MultiColumnParent documents */
  create?: InputMaybe<Array<MultiColumnParentCreateInput>>;
};

export type MultiColumnParentCreateOneInlineInput = {
  /** Create and connect one MultiColumnParent document */
  create?: InputMaybe<MultiColumnParentCreateInput>;
};

export type MultiColumnParentCreateWithPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
};

export type MultiColumnParentUpdateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
};

export type MultiColumnParentUpdateManyInlineInput = {
  /** Create and connect multiple MultiColumnParent component instances */
  create?: InputMaybe<Array<MultiColumnParentCreateWithPositionInput>>;
  /** Delete multiple MultiColumnParent documents */
  delete?: InputMaybe<Array<MultiColumnParentWhereUniqueInput>>;
  /** Update multiple MultiColumnParent component instances */
  update?: InputMaybe<Array<MultiColumnParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple MultiColumnParent component instances */
  upsert?: InputMaybe<Array<MultiColumnParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type MultiColumnParentUpdateManyWithNestedWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
};

export type MultiColumnParentUpdateOneInlineInput = {
  /** Create and connect one MultiColumnParent document */
  create?: InputMaybe<MultiColumnParentCreateInput>;
  /** Delete currently connected MultiColumnParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single MultiColumnParent document */
  update?: InputMaybe<MultiColumnParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single MultiColumnParent document */
  upsert?: InputMaybe<MultiColumnParentUpsertWithNestedWhereUniqueInput>;
};

export type MultiColumnParentUpdateWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type MultiColumnParentUpdateWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
};

export type MultiColumnParentUpsertWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type MultiColumnParentUpsertWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type MultiColumnParentWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
};

export type MultiColumnParentWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
};

export type MultiColumnUpdateInput = {
  columns?: InputMaybe<ColumnUpdateManyInlineInput>;
  numberOfColumnsOnDesktop?: InputMaybe<Scalars['Int']>;
  numberOfColumnsOnMobile?: InputMaybe<Scalars['Int']>;
};

export type MultiColumnUpdateManyInlineInput = {
  /** Create and connect multiple MultiColumn component instances */
  create?: InputMaybe<Array<MultiColumnCreateWithPositionInput>>;
  /** Delete multiple MultiColumn documents */
  delete?: InputMaybe<Array<MultiColumnWhereUniqueInput>>;
  /** Update multiple MultiColumn component instances */
  update?: InputMaybe<Array<MultiColumnUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple MultiColumn component instances */
  upsert?: InputMaybe<Array<MultiColumnUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type MultiColumnUpdateManyInput = {
  numberOfColumnsOnDesktop?: InputMaybe<Scalars['Int']>;
  numberOfColumnsOnMobile?: InputMaybe<Scalars['Int']>;
};

export type MultiColumnUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: MultiColumnUpdateManyInput;
  /** Document search */
  where: MultiColumnWhereInput;
};

export type MultiColumnUpdateOneInlineInput = {
  /** Create and connect one MultiColumn document */
  create?: InputMaybe<MultiColumnCreateInput>;
  /** Delete currently connected MultiColumn document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single MultiColumn document */
  update?: InputMaybe<MultiColumnUpdateWithNestedWhereUniqueInput>;
  /** Upsert single MultiColumn document */
  upsert?: InputMaybe<MultiColumnUpsertWithNestedWhereUniqueInput>;
};

export type MultiColumnUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<MultiColumnUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: MultiColumnWhereUniqueInput;
};

export type MultiColumnUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: MultiColumnUpdateInput;
  /** Unique document search */
  where: MultiColumnWhereUniqueInput;
};

export type MultiColumnUpsertInput = {
  /** Create document if it didn't exist */
  create: MultiColumnCreateInput;
  /** Update document if it exists */
  update: MultiColumnUpdateInput;
};

export type MultiColumnUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<MultiColumnUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: MultiColumnWhereUniqueInput;
};

export type MultiColumnUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: MultiColumnUpsertInput;
  /** Unique document search */
  where: MultiColumnWhereUniqueInput;
};

/** Identifies documents */
export type MultiColumnWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MultiColumnWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  columns_every?: InputMaybe<ColumnWhereInput>;
  columns_none?: InputMaybe<ColumnWhereInput>;
  columns_some?: InputMaybe<ColumnWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  numberOfColumnsOnDesktop?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  numberOfColumnsOnDesktop_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  numberOfColumnsOnDesktop_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  numberOfColumnsOnDesktop_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  numberOfColumnsOnDesktop_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  numberOfColumnsOnDesktop_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  numberOfColumnsOnDesktop_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  numberOfColumnsOnDesktop_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  numberOfColumnsOnMobile?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  numberOfColumnsOnMobile_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  numberOfColumnsOnMobile_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  numberOfColumnsOnMobile_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  numberOfColumnsOnMobile_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  numberOfColumnsOnMobile_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  numberOfColumnsOnMobile_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  numberOfColumnsOnMobile_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

/** References MultiColumn record uniquely */
export type MultiColumnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one associationDetails */
  createAssociationDetails?: Maybe<AssociationDetails>;
  /** Create one banner */
  createBanner?: Maybe<Banner>;
  /** Create one carousel */
  createCarousel?: Maybe<Carousel>;
  /** Create one category */
  createCategory?: Maybe<Category>;
  /** Create one collaborator */
  createCollaborator?: Maybe<Collaborator>;
  /** Create one event */
  createEvent?: Maybe<Event>;
  /** Create one form */
  createForm?: Maybe<Form>;
  /** Create one layout */
  createLayout?: Maybe<Layout>;
  /** Create one member */
  createMember?: Maybe<Member>;
  /** Create one page */
  createPage?: Maybe<Page>;
  /** Create one pageElementInfo */
  createPageElementInfo?: Maybe<PageElementInfo>;
  /** Create one pageRichTextWrapper */
  createPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Create one project */
  createProject?: Maybe<Project>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one section */
  createSection?: Maybe<Section>;
  /** Create one seo */
  createSeo?: Maybe<Seo>;
  /** Create one service */
  createService?: Maybe<Service>;
  /** Create one socialHandle */
  createSocialHandle?: Maybe<SocialHandle>;
  /** Create one submission */
  createSubmission?: Maybe<Submission>;
  /** Create one testimonial */
  createTestimonial?: Maybe<Testimonial>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one associationDetails from _all_ existing stages. Returns deleted document. */
  deleteAssociationDetails?: Maybe<AssociationDetails>;
  /** Delete one banner from _all_ existing stages. Returns deleted document. */
  deleteBanner?: Maybe<Banner>;
  /** Delete one carousel from _all_ existing stages. Returns deleted document. */
  deleteCarousel?: Maybe<Carousel>;
  /** Delete one category from _all_ existing stages. Returns deleted document. */
  deleteCategory?: Maybe<Category>;
  /** Delete one collaborator from _all_ existing stages. Returns deleted document. */
  deleteCollaborator?: Maybe<Collaborator>;
  /** Delete one event from _all_ existing stages. Returns deleted document. */
  deleteEvent?: Maybe<Event>;
  /** Delete one form from _all_ existing stages. Returns deleted document. */
  deleteForm?: Maybe<Form>;
  /** Delete one layout from _all_ existing stages. Returns deleted document. */
  deleteLayout?: Maybe<Layout>;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many AssociationDetails documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssociationDetailssConnection)
   */
  deleteManyAssociationDetailss: BatchPayload;
  /** Delete many AssociationDetails documents, return deleted documents */
  deleteManyAssociationDetailssConnection: AssociationDetailsConnection;
  /**
   * Delete many Banner documents
   * @deprecated Please use the new paginated many mutation (deleteManyBannersConnection)
   */
  deleteManyBanners: BatchPayload;
  /** Delete many Banner documents, return deleted documents */
  deleteManyBannersConnection: BannerConnection;
  /**
   * Delete many Carousel documents
   * @deprecated Please use the new paginated many mutation (deleteManyCarouselsConnection)
   */
  deleteManyCarousels: BatchPayload;
  /** Delete many Carousel documents, return deleted documents */
  deleteManyCarouselsConnection: CarouselConnection;
  /**
   * Delete many Category documents
   * @deprecated Please use the new paginated many mutation (deleteManyCategoriesConnection)
   */
  deleteManyCategories: BatchPayload;
  /** Delete many Category documents, return deleted documents */
  deleteManyCategoriesConnection: CategoryConnection;
  /**
   * Delete many Collaborator documents
   * @deprecated Please use the new paginated many mutation (deleteManyCollaboratorsConnection)
   */
  deleteManyCollaborators: BatchPayload;
  /** Delete many Collaborator documents, return deleted documents */
  deleteManyCollaboratorsConnection: CollaboratorConnection;
  /**
   * Delete many Event documents
   * @deprecated Please use the new paginated many mutation (deleteManyEventsConnection)
   */
  deleteManyEvents: BatchPayload;
  /** Delete many Event documents, return deleted documents */
  deleteManyEventsConnection: EventConnection;
  /**
   * Delete many Form documents
   * @deprecated Please use the new paginated many mutation (deleteManyFormsConnection)
   */
  deleteManyForms: BatchPayload;
  /** Delete many Form documents, return deleted documents */
  deleteManyFormsConnection: FormConnection;
  /**
   * Delete many Layout documents
   * @deprecated Please use the new paginated many mutation (deleteManyLayoutsConnection)
   */
  deleteManyLayouts: BatchPayload;
  /** Delete many Layout documents, return deleted documents */
  deleteManyLayoutsConnection: LayoutConnection;
  /**
   * Delete many Member documents
   * @deprecated Please use the new paginated many mutation (deleteManyMembersConnection)
   */
  deleteManyMembers: BatchPayload;
  /** Delete many Member documents, return deleted documents */
  deleteManyMembersConnection: MemberConnection;
  /**
   * Delete many PageElementInfo documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageElementInfosConnection)
   */
  deleteManyPageElementInfos: BatchPayload;
  /** Delete many PageElementInfo documents, return deleted documents */
  deleteManyPageElementInfosConnection: PageElementInfoConnection;
  /**
   * Delete many PageRichTextWrapper documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageRichTextWrappersConnection)
   */
  deleteManyPageRichTextWrappers: BatchPayload;
  /** Delete many PageRichTextWrapper documents, return deleted documents */
  deleteManyPageRichTextWrappersConnection: PageRichTextWrapperConnection;
  /**
   * Delete many Page documents
   * @deprecated Please use the new paginated many mutation (deleteManyPagesConnection)
   */
  deleteManyPages: BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: PageConnection;
  /**
   * Delete many Project documents
   * @deprecated Please use the new paginated many mutation (deleteManyProjectsConnection)
   */
  deleteManyProjects: BatchPayload;
  /** Delete many Project documents, return deleted documents */
  deleteManyProjectsConnection: ProjectConnection;
  /**
   * Delete many Section documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionsConnection)
   */
  deleteManySections: BatchPayload;
  /** Delete many Section documents, return deleted documents */
  deleteManySectionsConnection: SectionConnection;
  /**
   * Delete many Seo documents
   * @deprecated Please use the new paginated many mutation (deleteManySeosConnection)
   */
  deleteManySeos: BatchPayload;
  /** Delete many Seo documents, return deleted documents */
  deleteManySeosConnection: SeoConnection;
  /**
   * Delete many Service documents
   * @deprecated Please use the new paginated many mutation (deleteManyServicesConnection)
   */
  deleteManyServices: BatchPayload;
  /** Delete many Service documents, return deleted documents */
  deleteManyServicesConnection: ServiceConnection;
  /**
   * Delete many SocialHandle documents
   * @deprecated Please use the new paginated many mutation (deleteManySocialHandlesConnection)
   */
  deleteManySocialHandles: BatchPayload;
  /** Delete many SocialHandle documents, return deleted documents */
  deleteManySocialHandlesConnection: SocialHandleConnection;
  /**
   * Delete many Submission documents
   * @deprecated Please use the new paginated many mutation (deleteManySubmissionsConnection)
   */
  deleteManySubmissions: BatchPayload;
  /** Delete many Submission documents, return deleted documents */
  deleteManySubmissionsConnection: SubmissionConnection;
  /**
   * Delete many Testimonial documents
   * @deprecated Please use the new paginated many mutation (deleteManyTestimonialsConnection)
   */
  deleteManyTestimonials: BatchPayload;
  /** Delete many Testimonial documents, return deleted documents */
  deleteManyTestimonialsConnection: TestimonialConnection;
  /** Delete one member from _all_ existing stages. Returns deleted document. */
  deleteMember?: Maybe<Member>;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Page>;
  /** Delete one pageElementInfo from _all_ existing stages. Returns deleted document. */
  deletePageElementInfo?: Maybe<PageElementInfo>;
  /** Delete one pageRichTextWrapper from _all_ existing stages. Returns deleted document. */
  deletePageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Delete one project from _all_ existing stages. Returns deleted document. */
  deleteProject?: Maybe<Project>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one section from _all_ existing stages. Returns deleted document. */
  deleteSection?: Maybe<Section>;
  /** Delete one seo from _all_ existing stages. Returns deleted document. */
  deleteSeo?: Maybe<Seo>;
  /** Delete one service from _all_ existing stages. Returns deleted document. */
  deleteService?: Maybe<Service>;
  /** Delete one socialHandle from _all_ existing stages. Returns deleted document. */
  deleteSocialHandle?: Maybe<SocialHandle>;
  /** Delete one submission from _all_ existing stages. Returns deleted document. */
  deleteSubmission?: Maybe<Submission>;
  /** Delete one testimonial from _all_ existing stages. Returns deleted document. */
  deleteTestimonial?: Maybe<Testimonial>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one associationDetails */
  publishAssociationDetails?: Maybe<AssociationDetails>;
  /** Publish one banner */
  publishBanner?: Maybe<Banner>;
  /** Publish one carousel */
  publishCarousel?: Maybe<Carousel>;
  /** Publish one category */
  publishCategory?: Maybe<Category>;
  /** Publish one collaborator */
  publishCollaborator?: Maybe<Collaborator>;
  /** Publish one event */
  publishEvent?: Maybe<Event>;
  /** Publish one form */
  publishForm?: Maybe<Form>;
  /** Publish one layout */
  publishLayout?: Maybe<Layout>;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many AssociationDetails documents
   * @deprecated Please use the new paginated many mutation (publishManyAssociationDetailssConnection)
   */
  publishManyAssociationDetailss: BatchPayload;
  /** Publish many AssociationDetails documents */
  publishManyAssociationDetailssConnection: AssociationDetailsConnection;
  /**
   * Publish many Banner documents
   * @deprecated Please use the new paginated many mutation (publishManyBannersConnection)
   */
  publishManyBanners: BatchPayload;
  /** Publish many Banner documents */
  publishManyBannersConnection: BannerConnection;
  /**
   * Publish many Carousel documents
   * @deprecated Please use the new paginated many mutation (publishManyCarouselsConnection)
   */
  publishManyCarousels: BatchPayload;
  /** Publish many Carousel documents */
  publishManyCarouselsConnection: CarouselConnection;
  /**
   * Publish many Category documents
   * @deprecated Please use the new paginated many mutation (publishManyCategoriesConnection)
   */
  publishManyCategories: BatchPayload;
  /** Publish many Category documents */
  publishManyCategoriesConnection: CategoryConnection;
  /**
   * Publish many Collaborator documents
   * @deprecated Please use the new paginated many mutation (publishManyCollaboratorsConnection)
   */
  publishManyCollaborators: BatchPayload;
  /** Publish many Collaborator documents */
  publishManyCollaboratorsConnection: CollaboratorConnection;
  /**
   * Publish many Event documents
   * @deprecated Please use the new paginated many mutation (publishManyEventsConnection)
   */
  publishManyEvents: BatchPayload;
  /** Publish many Event documents */
  publishManyEventsConnection: EventConnection;
  /**
   * Publish many Form documents
   * @deprecated Please use the new paginated many mutation (publishManyFormsConnection)
   */
  publishManyForms: BatchPayload;
  /** Publish many Form documents */
  publishManyFormsConnection: FormConnection;
  /**
   * Publish many Layout documents
   * @deprecated Please use the new paginated many mutation (publishManyLayoutsConnection)
   */
  publishManyLayouts: BatchPayload;
  /** Publish many Layout documents */
  publishManyLayoutsConnection: LayoutConnection;
  /**
   * Publish many Member documents
   * @deprecated Please use the new paginated many mutation (publishManyMembersConnection)
   */
  publishManyMembers: BatchPayload;
  /** Publish many Member documents */
  publishManyMembersConnection: MemberConnection;
  /**
   * Publish many PageElementInfo documents
   * @deprecated Please use the new paginated many mutation (publishManyPageElementInfosConnection)
   */
  publishManyPageElementInfos: BatchPayload;
  /** Publish many PageElementInfo documents */
  publishManyPageElementInfosConnection: PageElementInfoConnection;
  /**
   * Publish many PageRichTextWrapper documents
   * @deprecated Please use the new paginated many mutation (publishManyPageRichTextWrappersConnection)
   */
  publishManyPageRichTextWrappers: BatchPayload;
  /** Publish many PageRichTextWrapper documents */
  publishManyPageRichTextWrappersConnection: PageRichTextWrapperConnection;
  /**
   * Publish many Page documents
   * @deprecated Please use the new paginated many mutation (publishManyPagesConnection)
   */
  publishManyPages: BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: PageConnection;
  /**
   * Publish many Project documents
   * @deprecated Please use the new paginated many mutation (publishManyProjectsConnection)
   */
  publishManyProjects: BatchPayload;
  /** Publish many Project documents */
  publishManyProjectsConnection: ProjectConnection;
  /**
   * Publish many Section documents
   * @deprecated Please use the new paginated many mutation (publishManySectionsConnection)
   */
  publishManySections: BatchPayload;
  /** Publish many Section documents */
  publishManySectionsConnection: SectionConnection;
  /**
   * Publish many Seo documents
   * @deprecated Please use the new paginated many mutation (publishManySeosConnection)
   */
  publishManySeos: BatchPayload;
  /** Publish many Seo documents */
  publishManySeosConnection: SeoConnection;
  /**
   * Publish many Service documents
   * @deprecated Please use the new paginated many mutation (publishManyServicesConnection)
   */
  publishManyServices: BatchPayload;
  /** Publish many Service documents */
  publishManyServicesConnection: ServiceConnection;
  /**
   * Publish many SocialHandle documents
   * @deprecated Please use the new paginated many mutation (publishManySocialHandlesConnection)
   */
  publishManySocialHandles: BatchPayload;
  /** Publish many SocialHandle documents */
  publishManySocialHandlesConnection: SocialHandleConnection;
  /**
   * Publish many Submission documents
   * @deprecated Please use the new paginated many mutation (publishManySubmissionsConnection)
   */
  publishManySubmissions: BatchPayload;
  /** Publish many Submission documents */
  publishManySubmissionsConnection: SubmissionConnection;
  /**
   * Publish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (publishManyTestimonialsConnection)
   */
  publishManyTestimonials: BatchPayload;
  /** Publish many Testimonial documents */
  publishManyTestimonialsConnection: TestimonialConnection;
  /** Publish one member */
  publishMember?: Maybe<Member>;
  /** Publish one page */
  publishPage?: Maybe<Page>;
  /** Publish one pageElementInfo */
  publishPageElementInfo?: Maybe<PageElementInfo>;
  /** Publish one pageRichTextWrapper */
  publishPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Publish one project */
  publishProject?: Maybe<Project>;
  /** Publish one section */
  publishSection?: Maybe<Section>;
  /** Publish one seo */
  publishSeo?: Maybe<Seo>;
  /** Publish one service */
  publishService?: Maybe<Service>;
  /** Publish one socialHandle */
  publishSocialHandle?: Maybe<SocialHandle>;
  /** Publish one submission */
  publishSubmission?: Maybe<Submission>;
  /** Publish one testimonial */
  publishTestimonial?: Maybe<Testimonial>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one associationDetails */
  schedulePublishAssociationDetails?: Maybe<AssociationDetails>;
  /** Schedule to publish one banner */
  schedulePublishBanner?: Maybe<Banner>;
  /** Schedule to publish one carousel */
  schedulePublishCarousel?: Maybe<Carousel>;
  /** Schedule to publish one category */
  schedulePublishCategory?: Maybe<Category>;
  /** Schedule to publish one collaborator */
  schedulePublishCollaborator?: Maybe<Collaborator>;
  /** Schedule to publish one event */
  schedulePublishEvent?: Maybe<Event>;
  /** Schedule to publish one form */
  schedulePublishForm?: Maybe<Form>;
  /** Schedule to publish one layout */
  schedulePublishLayout?: Maybe<Layout>;
  /** Schedule to publish one member */
  schedulePublishMember?: Maybe<Member>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Page>;
  /** Schedule to publish one pageElementInfo */
  schedulePublishPageElementInfo?: Maybe<PageElementInfo>;
  /** Schedule to publish one pageRichTextWrapper */
  schedulePublishPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Schedule to publish one project */
  schedulePublishProject?: Maybe<Project>;
  /** Schedule to publish one section */
  schedulePublishSection?: Maybe<Section>;
  /** Schedule to publish one seo */
  schedulePublishSeo?: Maybe<Seo>;
  /** Schedule to publish one service */
  schedulePublishService?: Maybe<Service>;
  /** Schedule to publish one socialHandle */
  schedulePublishSocialHandle?: Maybe<SocialHandle>;
  /** Schedule to publish one submission */
  schedulePublishSubmission?: Maybe<Submission>;
  /** Schedule to publish one testimonial */
  schedulePublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one associationDetails from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAssociationDetails?: Maybe<AssociationDetails>;
  /** Unpublish one banner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBanner?: Maybe<Banner>;
  /** Unpublish one carousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCarousel?: Maybe<Carousel>;
  /** Unpublish one category from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCategory?: Maybe<Category>;
  /** Unpublish one collaborator from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCollaborator?: Maybe<Collaborator>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEvent?: Maybe<Event>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishForm?: Maybe<Form>;
  /** Unpublish one layout from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishLayout?: Maybe<Layout>;
  /** Unpublish one member from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishMember?: Maybe<Member>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Page>;
  /** Unpublish one pageElementInfo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageElementInfo?: Maybe<PageElementInfo>;
  /** Unpublish one pageRichTextWrapper from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Unpublish one project from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProject?: Maybe<Project>;
  /** Unpublish one section from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSection?: Maybe<Section>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSeo?: Maybe<Seo>;
  /** Unpublish one service from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishService?: Maybe<Service>;
  /** Unpublish one socialHandle from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSocialHandle?: Maybe<SocialHandle>;
  /** Unpublish one submission from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSubmission?: Maybe<Submission>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one associationDetails from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAssociationDetails?: Maybe<AssociationDetails>;
  /** Unpublish one banner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBanner?: Maybe<Banner>;
  /** Unpublish one carousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCarousel?: Maybe<Carousel>;
  /** Unpublish one category from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCategory?: Maybe<Category>;
  /** Unpublish one collaborator from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCollaborator?: Maybe<Collaborator>;
  /** Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEvent?: Maybe<Event>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishForm?: Maybe<Form>;
  /** Unpublish one layout from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishLayout?: Maybe<Layout>;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many AssociationDetails documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssociationDetailssConnection)
   */
  unpublishManyAssociationDetailss: BatchPayload;
  /** Find many AssociationDetails documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssociationDetailssConnection: AssociationDetailsConnection;
  /**
   * Unpublish many Banner documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBannersConnection)
   */
  unpublishManyBanners: BatchPayload;
  /** Find many Banner documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBannersConnection: BannerConnection;
  /**
   * Unpublish many Carousel documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCarouselsConnection)
   */
  unpublishManyCarousels: BatchPayload;
  /** Find many Carousel documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCarouselsConnection: CarouselConnection;
  /**
   * Unpublish many Category documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCategoriesConnection)
   */
  unpublishManyCategories: BatchPayload;
  /** Find many Category documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCategoriesConnection: CategoryConnection;
  /**
   * Unpublish many Collaborator documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCollaboratorsConnection)
   */
  unpublishManyCollaborators: BatchPayload;
  /** Find many Collaborator documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCollaboratorsConnection: CollaboratorConnection;
  /**
   * Unpublish many Event documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEventsConnection)
   */
  unpublishManyEvents: BatchPayload;
  /** Find many Event documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEventsConnection: EventConnection;
  /**
   * Unpublish many Form documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFormsConnection)
   */
  unpublishManyForms: BatchPayload;
  /** Find many Form documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFormsConnection: FormConnection;
  /**
   * Unpublish many Layout documents
   * @deprecated Please use the new paginated many mutation (unpublishManyLayoutsConnection)
   */
  unpublishManyLayouts: BatchPayload;
  /** Find many Layout documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyLayoutsConnection: LayoutConnection;
  /**
   * Unpublish many Member documents
   * @deprecated Please use the new paginated many mutation (unpublishManyMembersConnection)
   */
  unpublishManyMembers: BatchPayload;
  /** Find many Member documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyMembersConnection: MemberConnection;
  /**
   * Unpublish many PageElementInfo documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageElementInfosConnection)
   */
  unpublishManyPageElementInfos: BatchPayload;
  /** Find many PageElementInfo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageElementInfosConnection: PageElementInfoConnection;
  /**
   * Unpublish many PageRichTextWrapper documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageRichTextWrappersConnection)
   */
  unpublishManyPageRichTextWrappers: BatchPayload;
  /** Find many PageRichTextWrapper documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageRichTextWrappersConnection: PageRichTextWrapperConnection;
  /**
   * Unpublish many Page documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPagesConnection)
   */
  unpublishManyPages: BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: PageConnection;
  /**
   * Unpublish many Project documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProjectsConnection)
   */
  unpublishManyProjects: BatchPayload;
  /** Find many Project documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProjectsConnection: ProjectConnection;
  /**
   * Unpublish many Section documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionsConnection)
   */
  unpublishManySections: BatchPayload;
  /** Find many Section documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionsConnection: SectionConnection;
  /**
   * Unpublish many Seo documents
   * @deprecated Please use the new paginated many mutation (unpublishManySeosConnection)
   */
  unpublishManySeos: BatchPayload;
  /** Find many Seo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySeosConnection: SeoConnection;
  /**
   * Unpublish many Service documents
   * @deprecated Please use the new paginated many mutation (unpublishManyServicesConnection)
   */
  unpublishManyServices: BatchPayload;
  /** Find many Service documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyServicesConnection: ServiceConnection;
  /**
   * Unpublish many SocialHandle documents
   * @deprecated Please use the new paginated many mutation (unpublishManySocialHandlesConnection)
   */
  unpublishManySocialHandles: BatchPayload;
  /** Find many SocialHandle documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySocialHandlesConnection: SocialHandleConnection;
  /**
   * Unpublish many Submission documents
   * @deprecated Please use the new paginated many mutation (unpublishManySubmissionsConnection)
   */
  unpublishManySubmissions: BatchPayload;
  /** Find many Submission documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySubmissionsConnection: SubmissionConnection;
  /**
   * Unpublish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (unpublishManyTestimonialsConnection)
   */
  unpublishManyTestimonials: BatchPayload;
  /** Find many Testimonial documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyTestimonialsConnection: TestimonialConnection;
  /** Unpublish one member from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishMember?: Maybe<Member>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Page>;
  /** Unpublish one pageElementInfo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageElementInfo?: Maybe<PageElementInfo>;
  /** Unpublish one pageRichTextWrapper from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Unpublish one project from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProject?: Maybe<Project>;
  /** Unpublish one section from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSection?: Maybe<Section>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSeo?: Maybe<Seo>;
  /** Unpublish one service from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishService?: Maybe<Service>;
  /** Unpublish one socialHandle from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSocialHandle?: Maybe<SocialHandle>;
  /** Unpublish one submission from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSubmission?: Maybe<Submission>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTestimonial?: Maybe<Testimonial>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one associationDetails */
  updateAssociationDetails?: Maybe<AssociationDetails>;
  /** Update one banner */
  updateBanner?: Maybe<Banner>;
  /** Update one carousel */
  updateCarousel?: Maybe<Carousel>;
  /** Update one category */
  updateCategory?: Maybe<Category>;
  /** Update one collaborator */
  updateCollaborator?: Maybe<Collaborator>;
  /** Update one event */
  updateEvent?: Maybe<Event>;
  /** Update one form */
  updateForm?: Maybe<Form>;
  /** Update one layout */
  updateLayout?: Maybe<Layout>;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many associationDetailss
   * @deprecated Please use the new paginated many mutation (updateManyAssociationDetailssConnection)
   */
  updateManyAssociationDetailss: BatchPayload;
  /** Update many AssociationDetails documents */
  updateManyAssociationDetailssConnection: AssociationDetailsConnection;
  /**
   * Update many banners
   * @deprecated Please use the new paginated many mutation (updateManyBannersConnection)
   */
  updateManyBanners: BatchPayload;
  /** Update many Banner documents */
  updateManyBannersConnection: BannerConnection;
  /**
   * Update many carousels
   * @deprecated Please use the new paginated many mutation (updateManyCarouselsConnection)
   */
  updateManyCarousels: BatchPayload;
  /** Update many Carousel documents */
  updateManyCarouselsConnection: CarouselConnection;
  /**
   * Update many categories
   * @deprecated Please use the new paginated many mutation (updateManyCategoriesConnection)
   */
  updateManyCategories: BatchPayload;
  /** Update many Category documents */
  updateManyCategoriesConnection: CategoryConnection;
  /**
   * Update many collaborators
   * @deprecated Please use the new paginated many mutation (updateManyCollaboratorsConnection)
   */
  updateManyCollaborators: BatchPayload;
  /** Update many Collaborator documents */
  updateManyCollaboratorsConnection: CollaboratorConnection;
  /**
   * Update many events
   * @deprecated Please use the new paginated many mutation (updateManyEventsConnection)
   */
  updateManyEvents: BatchPayload;
  /** Update many Event documents */
  updateManyEventsConnection: EventConnection;
  /**
   * Update many forms
   * @deprecated Please use the new paginated many mutation (updateManyFormsConnection)
   */
  updateManyForms: BatchPayload;
  /** Update many Form documents */
  updateManyFormsConnection: FormConnection;
  /**
   * Update many layouts
   * @deprecated Please use the new paginated many mutation (updateManyLayoutsConnection)
   */
  updateManyLayouts: BatchPayload;
  /** Update many Layout documents */
  updateManyLayoutsConnection: LayoutConnection;
  /**
   * Update many members
   * @deprecated Please use the new paginated many mutation (updateManyMembersConnection)
   */
  updateManyMembers: BatchPayload;
  /** Update many Member documents */
  updateManyMembersConnection: MemberConnection;
  /**
   * Update many pageElementInfos
   * @deprecated Please use the new paginated many mutation (updateManyPageElementInfosConnection)
   */
  updateManyPageElementInfos: BatchPayload;
  /** Update many PageElementInfo documents */
  updateManyPageElementInfosConnection: PageElementInfoConnection;
  /**
   * Update many pageRichTextWrappers
   * @deprecated Please use the new paginated many mutation (updateManyPageRichTextWrappersConnection)
   */
  updateManyPageRichTextWrappers: BatchPayload;
  /** Update many PageRichTextWrapper documents */
  updateManyPageRichTextWrappersConnection: PageRichTextWrapperConnection;
  /**
   * Update many pages
   * @deprecated Please use the new paginated many mutation (updateManyPagesConnection)
   */
  updateManyPages: BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: PageConnection;
  /**
   * Update many projects
   * @deprecated Please use the new paginated many mutation (updateManyProjectsConnection)
   */
  updateManyProjects: BatchPayload;
  /** Update many Project documents */
  updateManyProjectsConnection: ProjectConnection;
  /**
   * Update many sections
   * @deprecated Please use the new paginated many mutation (updateManySectionsConnection)
   */
  updateManySections: BatchPayload;
  /** Update many Section documents */
  updateManySectionsConnection: SectionConnection;
  /**
   * Update many seos
   * @deprecated Please use the new paginated many mutation (updateManySeosConnection)
   */
  updateManySeos: BatchPayload;
  /** Update many Seo documents */
  updateManySeosConnection: SeoConnection;
  /**
   * Update many services
   * @deprecated Please use the new paginated many mutation (updateManyServicesConnection)
   */
  updateManyServices: BatchPayload;
  /** Update many Service documents */
  updateManyServicesConnection: ServiceConnection;
  /**
   * Update many socialHandles
   * @deprecated Please use the new paginated many mutation (updateManySocialHandlesConnection)
   */
  updateManySocialHandles: BatchPayload;
  /** Update many SocialHandle documents */
  updateManySocialHandlesConnection: SocialHandleConnection;
  /**
   * Update many submissions
   * @deprecated Please use the new paginated many mutation (updateManySubmissionsConnection)
   */
  updateManySubmissions: BatchPayload;
  /** Update many Submission documents */
  updateManySubmissionsConnection: SubmissionConnection;
  /**
   * Update many testimonials
   * @deprecated Please use the new paginated many mutation (updateManyTestimonialsConnection)
   */
  updateManyTestimonials: BatchPayload;
  /** Update many Testimonial documents */
  updateManyTestimonialsConnection: TestimonialConnection;
  /** Update one member */
  updateMember?: Maybe<Member>;
  /** Update one page */
  updatePage?: Maybe<Page>;
  /** Update one pageElementInfo */
  updatePageElementInfo?: Maybe<PageElementInfo>;
  /** Update one pageRichTextWrapper */
  updatePageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Update one project */
  updateProject?: Maybe<Project>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one section */
  updateSection?: Maybe<Section>;
  /** Update one seo */
  updateSeo?: Maybe<Seo>;
  /** Update one service */
  updateService?: Maybe<Service>;
  /** Update one socialHandle */
  updateSocialHandle?: Maybe<SocialHandle>;
  /** Update one submission */
  updateSubmission?: Maybe<Submission>;
  /** Update one testimonial */
  updateTestimonial?: Maybe<Testimonial>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one associationDetails */
  upsertAssociationDetails?: Maybe<AssociationDetails>;
  /** Upsert one banner */
  upsertBanner?: Maybe<Banner>;
  /** Upsert one carousel */
  upsertCarousel?: Maybe<Carousel>;
  /** Upsert one category */
  upsertCategory?: Maybe<Category>;
  /** Upsert one collaborator */
  upsertCollaborator?: Maybe<Collaborator>;
  /** Upsert one event */
  upsertEvent?: Maybe<Event>;
  /** Upsert one form */
  upsertForm?: Maybe<Form>;
  /** Upsert one layout */
  upsertLayout?: Maybe<Layout>;
  /** Upsert one member */
  upsertMember?: Maybe<Member>;
  /** Upsert one page */
  upsertPage?: Maybe<Page>;
  /** Upsert one pageElementInfo */
  upsertPageElementInfo?: Maybe<PageElementInfo>;
  /** Upsert one pageRichTextWrapper */
  upsertPageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Upsert one project */
  upsertProject?: Maybe<Project>;
  /** Upsert one section */
  upsertSection?: Maybe<Section>;
  /** Upsert one seo */
  upsertSeo?: Maybe<Seo>;
  /** Upsert one service */
  upsertService?: Maybe<Service>;
  /** Upsert one socialHandle */
  upsertSocialHandle?: Maybe<SocialHandle>;
  /** Upsert one submission */
  upsertSubmission?: Maybe<Submission>;
  /** Upsert one testimonial */
  upsertTestimonial?: Maybe<Testimonial>;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateAssociationDetailsArgs = {
  data: AssociationDetailsCreateInput;
};


export type MutationCreateBannerArgs = {
  data: BannerCreateInput;
};


export type MutationCreateCarouselArgs = {
  data: CarouselCreateInput;
};


export type MutationCreateCategoryArgs = {
  data: CategoryCreateInput;
};


export type MutationCreateCollaboratorArgs = {
  data: CollaboratorCreateInput;
};


export type MutationCreateEventArgs = {
  data: EventCreateInput;
};


export type MutationCreateFormArgs = {
  data: FormCreateInput;
};


export type MutationCreateLayoutArgs = {
  data: LayoutCreateInput;
};


export type MutationCreateMemberArgs = {
  data: MemberCreateInput;
};


export type MutationCreatePageArgs = {
  data: PageCreateInput;
};


export type MutationCreatePageElementInfoArgs = {
  data: PageElementInfoCreateInput;
};


export type MutationCreatePageRichTextWrapperArgs = {
  data: PageRichTextWrapperCreateInput;
};


export type MutationCreateProjectArgs = {
  data: ProjectCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateSectionArgs = {
  data: SectionCreateInput;
};


export type MutationCreateSeoArgs = {
  data: SeoCreateInput;
};


export type MutationCreateServiceArgs = {
  data: ServiceCreateInput;
};


export type MutationCreateSocialHandleArgs = {
  data: SocialHandleCreateInput;
};


export type MutationCreateSubmissionArgs = {
  data: SubmissionCreateInput;
};


export type MutationCreateTestimonialArgs = {
  data: TestimonialCreateInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteAssociationDetailsArgs = {
  where: AssociationDetailsWhereUniqueInput;
};


export type MutationDeleteBannerArgs = {
  where: BannerWhereUniqueInput;
};


export type MutationDeleteCarouselArgs = {
  where: CarouselWhereUniqueInput;
};


export type MutationDeleteCategoryArgs = {
  where: CategoryWhereUniqueInput;
};


export type MutationDeleteCollaboratorArgs = {
  where: CollaboratorWhereUniqueInput;
};


export type MutationDeleteEventArgs = {
  where: EventWhereUniqueInput;
};


export type MutationDeleteFormArgs = {
  where: FormWhereUniqueInput;
};


export type MutationDeleteLayoutArgs = {
  where: LayoutWhereUniqueInput;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssociationDetailssArgs = {
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationDeleteManyAssociationDetailssConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationDeleteManyBannersArgs = {
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationDeleteManyBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationDeleteManyCarouselsArgs = {
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationDeleteManyCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationDeleteManyCategoriesArgs = {
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationDeleteManyCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationDeleteManyCollaboratorsArgs = {
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationDeleteManyCollaboratorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationDeleteManyEventsArgs = {
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationDeleteManyFormsArgs = {
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyLayoutsArgs = {
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationDeleteManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationDeleteManyMembersArgs = {
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationDeleteManyMembersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationDeleteManyPageElementInfosArgs = {
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationDeleteManyPageElementInfosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationDeleteManyPageRichTextWrappersArgs = {
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationDeleteManyPageRichTextWrappersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationDeleteManyPagesArgs = {
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyProjectsArgs = {
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationDeleteManyProjectsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationDeleteManySectionsArgs = {
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationDeleteManySectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationDeleteManySeosArgs = {
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationDeleteManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationDeleteManyServicesArgs = {
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationDeleteManyServicesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationDeleteManySocialHandlesArgs = {
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationDeleteManySocialHandlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationDeleteManySubmissionsArgs = {
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationDeleteManySubmissionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationDeleteManyTestimonialsArgs = {
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteMemberArgs = {
  where: MemberWhereUniqueInput;
};


export type MutationDeletePageArgs = {
  where: PageWhereUniqueInput;
};


export type MutationDeletePageElementInfoArgs = {
  where: PageElementInfoWhereUniqueInput;
};


export type MutationDeletePageRichTextWrapperArgs = {
  where: PageRichTextWrapperWhereUniqueInput;
};


export type MutationDeleteProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteSectionArgs = {
  where: SectionWhereUniqueInput;
};


export type MutationDeleteSeoArgs = {
  where: SeoWhereUniqueInput;
};


export type MutationDeleteServiceArgs = {
  where: ServiceWhereUniqueInput;
};


export type MutationDeleteSocialHandleArgs = {
  where: SocialHandleWhereUniqueInput;
};


export type MutationDeleteSubmissionArgs = {
  where: SubmissionWhereUniqueInput;
};


export type MutationDeleteTestimonialArgs = {
  where: TestimonialWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishAssociationDetailsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssociationDetailsWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishBannerArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: BannerWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishCarouselArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: CarouselWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishCategoryArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: CategoryWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishCollaboratorArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: CollaboratorWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishEventArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishLayoutArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: LayoutWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssociationDetailssArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssociationDetailssConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyBannersArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<BannerManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BannerManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCarouselsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<CarouselManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CarouselManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCategoriesArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<CategoryManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CategoryManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCollaboratorsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCollaboratorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyEventsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<EventManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyFormsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyLayoutsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<LayoutManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<LayoutManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyMembersArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<MemberManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyMembersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<MemberManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPageElementInfosArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPageElementInfosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPageRichTextWrappersArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPageRichTextWrappersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPagesArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyProjectsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProjectManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyProjectsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProjectManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManySectionsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManySectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManySeosArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<SeoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SeoManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyServicesArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<ServiceManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyServicesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ServiceManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManySocialHandlesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationPublishManySocialHandlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationPublishManySubmissionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationPublishManySubmissionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationPublishManyTestimonialsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishMemberArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: MemberWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishPageElementInfoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: PageElementInfoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishPageRichTextWrapperArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: PageRichTextWrapperWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishProjectArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: ProjectWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishSectionArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: SectionWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishSeoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: SeoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishServiceArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: ServiceWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishSocialHandleArgs = {
  to?: Array<Stage>;
  where: SocialHandleWhereUniqueInput;
};


export type MutationPublishSubmissionArgs = {
  to?: Array<Stage>;
  where: SubmissionWhereUniqueInput;
};


export type MutationPublishTestimonialArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishAssociationDetailsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssociationDetailsWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishBannerArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BannerWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishCarouselArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CarouselWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishCategoryArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CategoryWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishCollaboratorArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CollaboratorWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishEventArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: EventWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishLayoutArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: LayoutWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishMemberArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: MemberWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishPageElementInfoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageElementInfoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishPageRichTextWrapperArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageRichTextWrapperWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishProjectArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProjectWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishSectionArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishSeoArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SeoWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishServiceArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ServiceWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishSocialHandleArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SocialHandleWhereUniqueInput;
};


export type MutationSchedulePublishSubmissionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SubmissionWhereUniqueInput;
};


export type MutationSchedulePublishTestimonialArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishAssociationDetailsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssociationDetailsWhereUniqueInput;
};


export type MutationScheduleUnpublishBannerArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: BannerWhereUniqueInput;
};


export type MutationScheduleUnpublishCarouselArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CarouselWhereUniqueInput;
};


export type MutationScheduleUnpublishCategoryArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CategoryWhereUniqueInput;
};


export type MutationScheduleUnpublishCollaboratorArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CollaboratorWhereUniqueInput;
};


export type MutationScheduleUnpublishEventArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: EventWhereUniqueInput;
};


export type MutationScheduleUnpublishFormArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: FormWhereUniqueInput;
};


export type MutationScheduleUnpublishLayoutArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: LayoutWhereUniqueInput;
};


export type MutationScheduleUnpublishMemberArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: MemberWhereUniqueInput;
};


export type MutationScheduleUnpublishPageArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageWhereUniqueInput;
};


export type MutationScheduleUnpublishPageElementInfoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageElementInfoWhereUniqueInput;
};


export type MutationScheduleUnpublishPageRichTextWrapperArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageRichTextWrapperWhereUniqueInput;
};


export type MutationScheduleUnpublishProjectArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: ProjectWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: SectionWhereUniqueInput;
};


export type MutationScheduleUnpublishSeoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: SeoWhereUniqueInput;
};


export type MutationScheduleUnpublishServiceArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: ServiceWhereUniqueInput;
};


export type MutationScheduleUnpublishSocialHandleArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SocialHandleWhereUniqueInput;
};


export type MutationScheduleUnpublishSubmissionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SubmissionWhereUniqueInput;
};


export type MutationScheduleUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishAssociationDetailsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssociationDetailsWhereUniqueInput;
};


export type MutationUnpublishBannerArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: BannerWhereUniqueInput;
};


export type MutationUnpublishCarouselArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CarouselWhereUniqueInput;
};


export type MutationUnpublishCategoryArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CategoryWhereUniqueInput;
};


export type MutationUnpublishCollaboratorArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: CollaboratorWhereUniqueInput;
};


export type MutationUnpublishEventArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: EventWhereUniqueInput;
};


export type MutationUnpublishFormArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: FormWhereUniqueInput;
};


export type MutationUnpublishLayoutArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: LayoutWhereUniqueInput;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssociationDetailssArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationUnpublishManyAssociationDetailssConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationUnpublishManyBannersArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationUnpublishManyBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationUnpublishManyCarouselsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationUnpublishManyCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationUnpublishManyCategoriesArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationUnpublishManyCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationUnpublishManyCollaboratorsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationUnpublishManyCollaboratorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationUnpublishManyEventsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUnpublishManyFormsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyLayoutsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUnpublishManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUnpublishManyMembersArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationUnpublishManyMembersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationUnpublishManyPageElementInfosArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationUnpublishManyPageElementInfosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationUnpublishManyPageRichTextWrappersArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationUnpublishManyPageRichTextWrappersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationUnpublishManyPagesArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyProjectsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationUnpublishManyProjectsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationUnpublishManySectionsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationUnpublishManySectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationUnpublishManySeosArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUnpublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUnpublishManyServicesArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationUnpublishManyServicesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationUnpublishManySocialHandlesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationUnpublishManySocialHandlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationUnpublishManySubmissionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationUnpublishManySubmissionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishMemberArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: MemberWhereUniqueInput;
};


export type MutationUnpublishPageArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageWhereUniqueInput;
};


export type MutationUnpublishPageElementInfoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageElementInfoWhereUniqueInput;
};


export type MutationUnpublishPageRichTextWrapperArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: PageRichTextWrapperWhereUniqueInput;
};


export type MutationUnpublishProjectArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: ProjectWhereUniqueInput;
};


export type MutationUnpublishSectionArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: SectionWhereUniqueInput;
};


export type MutationUnpublishSeoArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: SeoWhereUniqueInput;
};


export type MutationUnpublishServiceArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: ServiceWhereUniqueInput;
};


export type MutationUnpublishSocialHandleArgs = {
  from?: Array<Stage>;
  where: SocialHandleWhereUniqueInput;
};


export type MutationUnpublishSubmissionArgs = {
  from?: Array<Stage>;
  where: SubmissionWhereUniqueInput;
};


export type MutationUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateAssociationDetailsArgs = {
  data: AssociationDetailsUpdateInput;
  where: AssociationDetailsWhereUniqueInput;
};


export type MutationUpdateBannerArgs = {
  data: BannerUpdateInput;
  where: BannerWhereUniqueInput;
};


export type MutationUpdateCarouselArgs = {
  data: CarouselUpdateInput;
  where: CarouselWhereUniqueInput;
};


export type MutationUpdateCategoryArgs = {
  data: CategoryUpdateInput;
  where: CategoryWhereUniqueInput;
};


export type MutationUpdateCollaboratorArgs = {
  data: CollaboratorUpdateInput;
  where: CollaboratorWhereUniqueInput;
};


export type MutationUpdateEventArgs = {
  data: EventUpdateInput;
  where: EventWhereUniqueInput;
};


export type MutationUpdateFormArgs = {
  data: FormUpdateInput;
  where: FormWhereUniqueInput;
};


export type MutationUpdateLayoutArgs = {
  data: LayoutUpdateInput;
  where: LayoutWhereUniqueInput;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssociationDetailssArgs = {
  data: AssociationDetailsUpdateManyInput;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationUpdateManyAssociationDetailssConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssociationDetailsUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssociationDetailsManyWhereInput>;
};


export type MutationUpdateManyBannersArgs = {
  data: BannerUpdateManyInput;
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationUpdateManyBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BannerUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BannerManyWhereInput>;
};


export type MutationUpdateManyCarouselsArgs = {
  data: CarouselUpdateManyInput;
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationUpdateManyCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CarouselUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CarouselManyWhereInput>;
};


export type MutationUpdateManyCategoriesArgs = {
  data: CategoryUpdateManyInput;
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationUpdateManyCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CategoryUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CategoryManyWhereInput>;
};


export type MutationUpdateManyCollaboratorsArgs = {
  data: CollaboratorUpdateManyInput;
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationUpdateManyCollaboratorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CollaboratorUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorManyWhereInput>;
};


export type MutationUpdateManyEventsArgs = {
  data: EventUpdateManyInput;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: EventUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventManyWhereInput>;
};


export type MutationUpdateManyFormsArgs = {
  data: FormUpdateManyInput;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: FormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyLayoutsArgs = {
  data: LayoutUpdateManyInput;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUpdateManyLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: LayoutUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LayoutManyWhereInput>;
};


export type MutationUpdateManyMembersArgs = {
  data: MemberUpdateManyInput;
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationUpdateManyMembersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: MemberUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MemberManyWhereInput>;
};


export type MutationUpdateManyPageElementInfosArgs = {
  data: PageElementInfoUpdateManyInput;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationUpdateManyPageElementInfosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageElementInfoUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageElementInfoManyWhereInput>;
};


export type MutationUpdateManyPageRichTextWrappersArgs = {
  data: PageRichTextWrapperUpdateManyInput;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationUpdateManyPageRichTextWrappersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageRichTextWrapperUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageRichTextWrapperManyWhereInput>;
};


export type MutationUpdateManyPagesArgs = {
  data: PageUpdateManyInput;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyProjectsArgs = {
  data: ProjectUpdateManyInput;
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationUpdateManyProjectsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProjectUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectManyWhereInput>;
};


export type MutationUpdateManySectionsArgs = {
  data: SectionUpdateManyInput;
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationUpdateManySectionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionManyWhereInput>;
};


export type MutationUpdateManySeosArgs = {
  data: SeoUpdateManyInput;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUpdateManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SeoUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SeoManyWhereInput>;
};


export type MutationUpdateManyServicesArgs = {
  data: ServiceUpdateManyInput;
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationUpdateManyServicesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ServiceUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ServiceManyWhereInput>;
};


export type MutationUpdateManySocialHandlesArgs = {
  data: SocialHandleUpdateManyInput;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationUpdateManySocialHandlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SocialHandleUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialHandleManyWhereInput>;
};


export type MutationUpdateManySubmissionsArgs = {
  data: SubmissionUpdateManyInput;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationUpdateManySubmissionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SubmissionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SubmissionManyWhereInput>;
};


export type MutationUpdateManyTestimonialsArgs = {
  data: TestimonialUpdateManyInput;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: TestimonialUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateMemberArgs = {
  data: MemberUpdateInput;
  where: MemberWhereUniqueInput;
};


export type MutationUpdatePageArgs = {
  data: PageUpdateInput;
  where: PageWhereUniqueInput;
};


export type MutationUpdatePageElementInfoArgs = {
  data: PageElementInfoUpdateInput;
  where: PageElementInfoWhereUniqueInput;
};


export type MutationUpdatePageRichTextWrapperArgs = {
  data: PageRichTextWrapperUpdateInput;
  where: PageRichTextWrapperWhereUniqueInput;
};


export type MutationUpdateProjectArgs = {
  data: ProjectUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateSectionArgs = {
  data: SectionUpdateInput;
  where: SectionWhereUniqueInput;
};


export type MutationUpdateSeoArgs = {
  data: SeoUpdateInput;
  where: SeoWhereUniqueInput;
};


export type MutationUpdateServiceArgs = {
  data: ServiceUpdateInput;
  where: ServiceWhereUniqueInput;
};


export type MutationUpdateSocialHandleArgs = {
  data: SocialHandleUpdateInput;
  where: SocialHandleWhereUniqueInput;
};


export type MutationUpdateSubmissionArgs = {
  data: SubmissionUpdateInput;
  where: SubmissionWhereUniqueInput;
};


export type MutationUpdateTestimonialArgs = {
  data: TestimonialUpdateInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertAssociationDetailsArgs = {
  upsert: AssociationDetailsUpsertInput;
  where: AssociationDetailsWhereUniqueInput;
};


export type MutationUpsertBannerArgs = {
  upsert: BannerUpsertInput;
  where: BannerWhereUniqueInput;
};


export type MutationUpsertCarouselArgs = {
  upsert: CarouselUpsertInput;
  where: CarouselWhereUniqueInput;
};


export type MutationUpsertCategoryArgs = {
  upsert: CategoryUpsertInput;
  where: CategoryWhereUniqueInput;
};


export type MutationUpsertCollaboratorArgs = {
  upsert: CollaboratorUpsertInput;
  where: CollaboratorWhereUniqueInput;
};


export type MutationUpsertEventArgs = {
  upsert: EventUpsertInput;
  where: EventWhereUniqueInput;
};


export type MutationUpsertFormArgs = {
  upsert: FormUpsertInput;
  where: FormWhereUniqueInput;
};


export type MutationUpsertLayoutArgs = {
  upsert: LayoutUpsertInput;
  where: LayoutWhereUniqueInput;
};


export type MutationUpsertMemberArgs = {
  upsert: MemberUpsertInput;
  where: MemberWhereUniqueInput;
};


export type MutationUpsertPageArgs = {
  upsert: PageUpsertInput;
  where: PageWhereUniqueInput;
};


export type MutationUpsertPageElementInfoArgs = {
  upsert: PageElementInfoUpsertInput;
  where: PageElementInfoWhereUniqueInput;
};


export type MutationUpsertPageRichTextWrapperArgs = {
  upsert: PageRichTextWrapperUpsertInput;
  where: PageRichTextWrapperWhereUniqueInput;
};


export type MutationUpsertProjectArgs = {
  upsert: ProjectUpsertInput;
  where: ProjectWhereUniqueInput;
};


export type MutationUpsertSectionArgs = {
  upsert: SectionUpsertInput;
  where: SectionWhereUniqueInput;
};


export type MutationUpsertSeoArgs = {
  upsert: SeoUpsertInput;
  where: SeoWhereUniqueInput;
};


export type MutationUpsertServiceArgs = {
  upsert: ServiceUpsertInput;
  where: ServiceWhereUniqueInput;
};


export type MutationUpsertSocialHandleArgs = {
  upsert: SocialHandleUpsertInput;
  where: SocialHandleWhereUniqueInput;
};


export type MutationUpsertSubmissionArgs = {
  upsert: SubmissionUpsertInput;
  where: SubmissionWhereUniqueInput;
};


export type MutationUpsertTestimonialArgs = {
  upsert: TestimonialUpsertInput;
  where: TestimonialWhereUniqueInput;
};

export type Navigation = {
  __typename?: 'Navigation';
  ctas: Array<Button>;
  /** The unique identifier */
  id: Scalars['ID'];
  logo?: Maybe<Asset>;
  /** All the pages selected here will be shown on the main navigation menu of the website */
  pages: Array<Page>;
  /** System stage field */
  stage: Stage;
};


export type NavigationCtasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ButtonWhereInput>;
};


export type NavigationLogoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type NavigationPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageWhereInput>;
};

export type NavigationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: NavigationWhereUniqueInput;
};

/** A connection to a list of items. */
export type NavigationConnection = {
  __typename?: 'NavigationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<NavigationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type NavigationCreateInput = {
  ctas?: InputMaybe<ButtonCreateManyInlineInput>;
  logo?: InputMaybe<AssetCreateOneInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
};

export type NavigationCreateManyInlineInput = {
  /** Create and connect multiple existing Navigation documents */
  create?: InputMaybe<Array<NavigationCreateInput>>;
};

export type NavigationCreateOneInlineInput = {
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
};

export type NavigationCreateWithPositionInput = {
  /** Document to create */
  data: NavigationCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type NavigationEdge = {
  __typename?: 'NavigationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Navigation;
};

/** Identifies documents */
export type NavigationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  ctas_every?: InputMaybe<ButtonWhereInput>;
  ctas_none?: InputMaybe<ButtonWhereInput>;
  ctas_some?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
};

export enum NavigationOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type NavigationParent = Layout;

export type NavigationParentConnectInput = {
  Layout?: InputMaybe<LayoutConnectInput>;
};

export type NavigationParentCreateInput = {
  Layout?: InputMaybe<LayoutCreateInput>;
};

export type NavigationParentCreateManyInlineInput = {
  /** Connect multiple existing NavigationParent documents */
  connect?: InputMaybe<Array<NavigationParentWhereUniqueInput>>;
  /** Create and connect multiple existing NavigationParent documents */
  create?: InputMaybe<Array<NavigationParentCreateInput>>;
};

export type NavigationParentCreateOneInlineInput = {
  /** Connect one existing NavigationParent document */
  connect?: InputMaybe<NavigationParentWhereUniqueInput>;
  /** Create and connect one NavigationParent document */
  create?: InputMaybe<NavigationParentCreateInput>;
};

export type NavigationParentUpdateInput = {
  Layout?: InputMaybe<LayoutUpdateInput>;
};

export type NavigationParentUpdateManyInlineInput = {
  /** Connect multiple existing NavigationParent documents */
  connect?: InputMaybe<Array<NavigationParentConnectInput>>;
  /** Create and connect multiple NavigationParent documents */
  create?: InputMaybe<Array<NavigationParentCreateInput>>;
  /** Delete multiple NavigationParent documents */
  delete?: InputMaybe<Array<NavigationParentWhereUniqueInput>>;
  /** Disconnect multiple NavigationParent documents */
  disconnect?: InputMaybe<Array<NavigationParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing NavigationParent documents */
  set?: InputMaybe<Array<NavigationParentWhereUniqueInput>>;
  /** Update multiple NavigationParent documents */
  update?: InputMaybe<Array<NavigationParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple NavigationParent documents */
  upsert?: InputMaybe<Array<NavigationParentUpsertWithNestedWhereUniqueInput>>;
};

export type NavigationParentUpdateManyWithNestedWhereInput = {
  Layout?: InputMaybe<LayoutUpdateManyWithNestedWhereInput>;
};

export type NavigationParentUpdateOneInlineInput = {
  /** Connect existing NavigationParent document */
  connect?: InputMaybe<NavigationParentWhereUniqueInput>;
  /** Create and connect one NavigationParent document */
  create?: InputMaybe<NavigationParentCreateInput>;
  /** Delete currently connected NavigationParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected NavigationParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single NavigationParent document */
  update?: InputMaybe<NavigationParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single NavigationParent document */
  upsert?: InputMaybe<NavigationParentUpsertWithNestedWhereUniqueInput>;
};

export type NavigationParentUpdateWithNestedWhereUniqueInput = {
  Layout?: InputMaybe<LayoutUpdateWithNestedWhereUniqueInput>;
};

export type NavigationParentUpsertWithNestedWhereUniqueInput = {
  Layout?: InputMaybe<LayoutUpsertWithNestedWhereUniqueInput>;
};

export type NavigationParentWhereInput = {
  Layout?: InputMaybe<LayoutWhereInput>;
};

export type NavigationParentWhereUniqueInput = {
  Layout?: InputMaybe<LayoutWhereUniqueInput>;
};

export type NavigationUpdateInput = {
  ctas?: InputMaybe<ButtonUpdateManyInlineInput>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
};

export type NavigationUpdateManyInlineInput = {
  /** Create and connect multiple Navigation component instances */
  create?: InputMaybe<Array<NavigationCreateWithPositionInput>>;
  /** Delete multiple Navigation documents */
  delete?: InputMaybe<Array<NavigationWhereUniqueInput>>;
  /** Update multiple Navigation component instances */
  update?: InputMaybe<Array<NavigationUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Navigation component instances */
  upsert?: InputMaybe<Array<NavigationUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type NavigationUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type NavigationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: NavigationUpdateManyInput;
  /** Document search */
  where: NavigationWhereInput;
};

export type NavigationUpdateOneInlineInput = {
  /** Create and connect one Navigation document */
  create?: InputMaybe<NavigationCreateInput>;
  /** Delete currently connected Navigation document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Navigation document */
  update?: InputMaybe<NavigationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Navigation document */
  upsert?: InputMaybe<NavigationUpsertWithNestedWhereUniqueInput>;
};

export type NavigationUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<NavigationUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: NavigationWhereUniqueInput;
};

export type NavigationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: NavigationUpdateInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

export type NavigationUpsertInput = {
  /** Create document if it didn't exist */
  create: NavigationCreateInput;
  /** Update document if it exists */
  update: NavigationUpdateInput;
};

export type NavigationUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<NavigationUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: NavigationWhereUniqueInput;
};

export type NavigationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: NavigationUpsertInput;
  /** Unique document search */
  where: NavigationWhereUniqueInput;
};

/** Identifies documents */
export type NavigationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<NavigationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<NavigationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  ctas_every?: InputMaybe<ButtonWhereInput>;
  ctas_none?: InputMaybe<ButtonWhereInput>;
  ctas_some?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
};

/** References Navigation record uniquely */
export type NavigationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

/** Represents a page of the website. */
export type Page = Node & {
  __typename?: 'Page';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  form?: Maybe<Form>;
  hero?: Maybe<PageHero>;
  /** List of Page versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Page>;
  navigationLabel: Scalars['String'];
  pageElementInfo?: Maybe<PageElementInfo>;
  pageRichTextContent?: Maybe<PageRichTextWrapper>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections: Array<Section>;
  seo?: Maybe<Seo>;
  /** This field represents the link to which the navigation will send the user to. */
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Represents a page of the website. */
export type PageCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Represents a page of the website. */
export type PageCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Represents a page of the website. */
export type PageFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PageHeroArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Represents a page of the website. */
export type PageLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** Represents a page of the website. */
export type PagePageElementInfoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PagePageRichTextContentArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PagePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Represents a page of the website. */
export type PagePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Represents a page of the website. */
export type PageSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionWhereInput>;
};


/** Represents a page of the website. */
export type PageSeoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Represents a page of the website. */
export type PageUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Represents a page of the website. */
export type PageUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type PageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageCreateInput = {
  cl73cpmzq3ggu01uehjvgc91d?: InputMaybe<NavigationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  hero?: InputMaybe<PageHeroCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageCreateLocalizationsInput>;
  /** navigationLabel input for default locale (en) */
  navigationLabel: Scalars['String'];
  pageElementInfo?: InputMaybe<PageElementInfoCreateOneInlineInput>;
  pageRichTextContent?: InputMaybe<PageRichTextWrapperCreateOneInlineInput>;
  sections?: InputMaybe<SectionCreateManyInlineInput>;
  seo?: InputMaybe<SeoCreateOneInlineInput>;
  slug: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  navigationLabel: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageCreateLocalizationInput = {
  /** Localization input */
  data: PageCreateLocalizationDataInput;
  locale: Locale;
};

export type PageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
};

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
};

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Page;
};

export type PageElementInfo = Node & {
  __typename?: 'PageElementInfo';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageElementInfo>;
  /** List of PageElementInfo versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<PageElementInfo>;
  meta: Scalars['Json'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageElementInfoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageElementInfoCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageElementInfoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageElementInfoHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageElementInfoLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type PageElementInfoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageElementInfoPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageElementInfoScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageElementInfoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageElementInfoUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type PageElementInfoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageElementInfoWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageElementInfoConnection = {
  __typename?: 'PageElementInfoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageElementInfoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageElementInfoCreateInput = {
  cl87460gg0b9c01uh8q99dbgo?: InputMaybe<PageCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageElementInfoCreateLocalizationsInput>;
  /** meta input for default locale (en) */
  meta: Scalars['Json'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageElementInfoCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  meta: Scalars['Json'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageElementInfoCreateLocalizationInput = {
  /** Localization input */
  data: PageElementInfoCreateLocalizationDataInput;
  locale: Locale;
};

export type PageElementInfoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageElementInfoCreateLocalizationInput>>;
};

export type PageElementInfoCreateManyInlineInput = {
  /** Connect multiple existing PageElementInfo documents */
  connect?: InputMaybe<Array<PageElementInfoWhereUniqueInput>>;
  /** Create and connect multiple existing PageElementInfo documents */
  create?: InputMaybe<Array<PageElementInfoCreateInput>>;
};

export type PageElementInfoCreateOneInlineInput = {
  /** Connect one existing PageElementInfo document */
  connect?: InputMaybe<PageElementInfoWhereUniqueInput>;
  /** Create and connect one PageElementInfo document */
  create?: InputMaybe<PageElementInfoCreateInput>;
};

/** An edge in a connection. */
export type PageElementInfoEdge = {
  __typename?: 'PageElementInfoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageElementInfo;
};

/** Identifies documents */
export type PageElementInfoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageElementInfoWhereStageInput>;
  documentInStages_none?: InputMaybe<PageElementInfoWhereStageInput>;
  documentInStages_some?: InputMaybe<PageElementInfoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageElementInfoOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageElementInfoUpdateInput = {
  cl87460gg0b9c01uh8q99dbgo?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageElementInfoUpdateLocalizationsInput>;
  /** meta input for default locale (en) */
  meta?: InputMaybe<Scalars['Json']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
};

export type PageElementInfoUpdateLocalizationDataInput = {
  meta?: InputMaybe<Scalars['Json']>;
  title?: InputMaybe<Scalars['String']>;
};

export type PageElementInfoUpdateLocalizationInput = {
  data: PageElementInfoUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageElementInfoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageElementInfoCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageElementInfoUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageElementInfoUpsertLocalizationInput>>;
};

export type PageElementInfoUpdateManyInlineInput = {
  /** Connect multiple existing PageElementInfo documents */
  connect?: InputMaybe<Array<PageElementInfoConnectInput>>;
  /** Create and connect multiple PageElementInfo documents */
  create?: InputMaybe<Array<PageElementInfoCreateInput>>;
  /** Delete multiple PageElementInfo documents */
  delete?: InputMaybe<Array<PageElementInfoWhereUniqueInput>>;
  /** Disconnect multiple PageElementInfo documents */
  disconnect?: InputMaybe<Array<PageElementInfoWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageElementInfo documents */
  set?: InputMaybe<Array<PageElementInfoWhereUniqueInput>>;
  /** Update multiple PageElementInfo documents */
  update?: InputMaybe<Array<PageElementInfoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageElementInfo documents */
  upsert?: InputMaybe<Array<PageElementInfoUpsertWithNestedWhereUniqueInput>>;
};

export type PageElementInfoUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageElementInfoUpdateManyLocalizationsInput>;
  /** meta input for default locale (en) */
  meta?: InputMaybe<Scalars['Json']>;
};

export type PageElementInfoUpdateManyLocalizationDataInput = {
  meta?: InputMaybe<Scalars['Json']>;
};

export type PageElementInfoUpdateManyLocalizationInput = {
  data: PageElementInfoUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageElementInfoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageElementInfoUpdateManyLocalizationInput>>;
};

export type PageElementInfoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageElementInfoUpdateManyInput;
  /** Document search */
  where: PageElementInfoWhereInput;
};

export type PageElementInfoUpdateOneInlineInput = {
  /** Connect existing PageElementInfo document */
  connect?: InputMaybe<PageElementInfoWhereUniqueInput>;
  /** Create and connect one PageElementInfo document */
  create?: InputMaybe<PageElementInfoCreateInput>;
  /** Delete currently connected PageElementInfo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageElementInfo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageElementInfo document */
  update?: InputMaybe<PageElementInfoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageElementInfo document */
  upsert?: InputMaybe<PageElementInfoUpsertWithNestedWhereUniqueInput>;
};

export type PageElementInfoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageElementInfoUpdateInput;
  /** Unique document search */
  where: PageElementInfoWhereUniqueInput;
};

export type PageElementInfoUpsertInput = {
  /** Create document if it didn't exist */
  create: PageElementInfoCreateInput;
  /** Update document if it exists */
  update: PageElementInfoUpdateInput;
};

export type PageElementInfoUpsertLocalizationInput = {
  create: PageElementInfoCreateLocalizationDataInput;
  locale: Locale;
  update: PageElementInfoUpdateLocalizationDataInput;
};

export type PageElementInfoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageElementInfoUpsertInput;
  /** Unique document search */
  where: PageElementInfoWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageElementInfoWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageElementInfoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageElementInfoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageElementInfoWhereStageInput>;
  documentInStages_none?: InputMaybe<PageElementInfoWhereStageInput>;
  documentInStages_some?: InputMaybe<PageElementInfoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageElementInfoWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageElementInfoWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageElementInfoWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageElementInfoWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageElementInfoWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References PageElementInfo record uniquely */
export type PageElementInfoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PageHero = Banner | Carousel;

export type PageHeroConnectInput = {
  Banner?: InputMaybe<BannerConnectInput>;
  Carousel?: InputMaybe<CarouselConnectInput>;
};

export type PageHeroCreateInput = {
  Banner?: InputMaybe<BannerCreateInput>;
  Carousel?: InputMaybe<CarouselCreateInput>;
};

export type PageHeroCreateManyInlineInput = {
  /** Connect multiple existing PageHero documents */
  connect?: InputMaybe<Array<PageHeroWhereUniqueInput>>;
  /** Create and connect multiple existing PageHero documents */
  create?: InputMaybe<Array<PageHeroCreateInput>>;
};

export type PageHeroCreateOneInlineInput = {
  /** Connect one existing PageHero document */
  connect?: InputMaybe<PageHeroWhereUniqueInput>;
  /** Create and connect one PageHero document */
  create?: InputMaybe<PageHeroCreateInput>;
};

export type PageHeroUpdateInput = {
  Banner?: InputMaybe<BannerUpdateInput>;
  Carousel?: InputMaybe<CarouselUpdateInput>;
};

export type PageHeroUpdateManyInlineInput = {
  /** Connect multiple existing PageHero documents */
  connect?: InputMaybe<Array<PageHeroConnectInput>>;
  /** Create and connect multiple PageHero documents */
  create?: InputMaybe<Array<PageHeroCreateInput>>;
  /** Delete multiple PageHero documents */
  delete?: InputMaybe<Array<PageHeroWhereUniqueInput>>;
  /** Disconnect multiple PageHero documents */
  disconnect?: InputMaybe<Array<PageHeroWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageHero documents */
  set?: InputMaybe<Array<PageHeroWhereUniqueInput>>;
  /** Update multiple PageHero documents */
  update?: InputMaybe<Array<PageHeroUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageHero documents */
  upsert?: InputMaybe<Array<PageHeroUpsertWithNestedWhereUniqueInput>>;
};

export type PageHeroUpdateManyWithNestedWhereInput = {
  Banner?: InputMaybe<BannerUpdateManyWithNestedWhereInput>;
  Carousel?: InputMaybe<CarouselUpdateManyWithNestedWhereInput>;
};

export type PageHeroUpdateOneInlineInput = {
  /** Connect existing PageHero document */
  connect?: InputMaybe<PageHeroWhereUniqueInput>;
  /** Create and connect one PageHero document */
  create?: InputMaybe<PageHeroCreateInput>;
  /** Delete currently connected PageHero document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageHero document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageHero document */
  update?: InputMaybe<PageHeroUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageHero document */
  upsert?: InputMaybe<PageHeroUpsertWithNestedWhereUniqueInput>;
};

export type PageHeroUpdateWithNestedWhereUniqueInput = {
  Banner?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
  Carousel?: InputMaybe<CarouselUpdateWithNestedWhereUniqueInput>;
};

export type PageHeroUpsertWithNestedWhereUniqueInput = {
  Banner?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
  Carousel?: InputMaybe<CarouselUpsertWithNestedWhereUniqueInput>;
};

export type PageHeroWhereInput = {
  Banner?: InputMaybe<BannerWhereInput>;
  Carousel?: InputMaybe<CarouselWhereInput>;
};

export type PageHeroWhereUniqueInput = {
  Banner?: InputMaybe<BannerWhereUniqueInput>;
  Carousel?: InputMaybe<CarouselWhereUniqueInput>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageElementInfo?: InputMaybe<PageElementInfoWhereInput>;
  pageRichTextContent?: InputMaybe<PageRichTextWrapperWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sections_every?: InputMaybe<SectionWhereInput>;
  sections_none?: InputMaybe<SectionWhereInput>;
  sections_some?: InputMaybe<SectionWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NavigationLabelAsc = 'navigationLabel_ASC',
  NavigationLabelDesc = 'navigationLabel_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageRichTextContent = {
  __typename?: 'PageRichTextContent';
  content: RichText;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<PageRichTextContent>;
  /** System stage field */
  stage: Stage;
};


export type PageRichTextContentLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type PageRichTextContentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageRichTextContentWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageRichTextContentConnection = {
  __typename?: 'PageRichTextContentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageRichTextContentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageRichTextContentCreateInput = {
  /** content input for default locale (en) */
  content: Scalars['RichTextAST'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageRichTextContentCreateLocalizationsInput>;
};

export type PageRichTextContentCreateLocalizationDataInput = {
  content: Scalars['RichTextAST'];
};

export type PageRichTextContentCreateLocalizationInput = {
  /** Localization input */
  data: PageRichTextContentCreateLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextContentCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageRichTextContentCreateLocalizationInput>>;
};

export type PageRichTextContentCreateManyInlineInput = {
  /** Create and connect multiple existing PageRichTextContent documents */
  create?: InputMaybe<Array<PageRichTextContentCreateInput>>;
};

export type PageRichTextContentCreateOneInlineInput = {
  /** Create and connect one PageRichTextContent document */
  create?: InputMaybe<PageRichTextContentCreateInput>;
};

export type PageRichTextContentCreateWithPositionInput = {
  /** Document to create */
  data: PageRichTextContentCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type PageRichTextContentEdge = {
  __typename?: 'PageRichTextContentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageRichTextContent;
};

/** Identifies documents */
export type PageRichTextContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum PageRichTextContentOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type PageRichTextContentParent = Section;

export type PageRichTextContentParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type PageRichTextContentParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type PageRichTextContentParentCreateManyInlineInput = {
  /** Connect multiple existing PageRichTextContentParent documents */
  connect?: InputMaybe<Array<PageRichTextContentParentWhereUniqueInput>>;
  /** Create and connect multiple existing PageRichTextContentParent documents */
  create?: InputMaybe<Array<PageRichTextContentParentCreateInput>>;
};

export type PageRichTextContentParentCreateOneInlineInput = {
  /** Connect one existing PageRichTextContentParent document */
  connect?: InputMaybe<PageRichTextContentParentWhereUniqueInput>;
  /** Create and connect one PageRichTextContentParent document */
  create?: InputMaybe<PageRichTextContentParentCreateInput>;
};

export type PageRichTextContentParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type PageRichTextContentParentUpdateManyInlineInput = {
  /** Connect multiple existing PageRichTextContentParent documents */
  connect?: InputMaybe<Array<PageRichTextContentParentConnectInput>>;
  /** Create and connect multiple PageRichTextContentParent documents */
  create?: InputMaybe<Array<PageRichTextContentParentCreateInput>>;
  /** Delete multiple PageRichTextContentParent documents */
  delete?: InputMaybe<Array<PageRichTextContentParentWhereUniqueInput>>;
  /** Disconnect multiple PageRichTextContentParent documents */
  disconnect?: InputMaybe<Array<PageRichTextContentParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageRichTextContentParent documents */
  set?: InputMaybe<Array<PageRichTextContentParentWhereUniqueInput>>;
  /** Update multiple PageRichTextContentParent documents */
  update?: InputMaybe<Array<PageRichTextContentParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageRichTextContentParent documents */
  upsert?: InputMaybe<Array<PageRichTextContentParentUpsertWithNestedWhereUniqueInput>>;
};

export type PageRichTextContentParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type PageRichTextContentParentUpdateOneInlineInput = {
  /** Connect existing PageRichTextContentParent document */
  connect?: InputMaybe<PageRichTextContentParentWhereUniqueInput>;
  /** Create and connect one PageRichTextContentParent document */
  create?: InputMaybe<PageRichTextContentParentCreateInput>;
  /** Delete currently connected PageRichTextContentParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageRichTextContentParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageRichTextContentParent document */
  update?: InputMaybe<PageRichTextContentParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageRichTextContentParent document */
  upsert?: InputMaybe<PageRichTextContentParentUpsertWithNestedWhereUniqueInput>;
};

export type PageRichTextContentParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type PageRichTextContentParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type PageRichTextContentParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type PageRichTextContentParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type PageRichTextContentUpdateInput = {
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageRichTextContentUpdateLocalizationsInput>;
};

export type PageRichTextContentUpdateLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type PageRichTextContentUpdateLocalizationInput = {
  data: PageRichTextContentUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextContentUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageRichTextContentCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageRichTextContentUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageRichTextContentUpsertLocalizationInput>>;
};

export type PageRichTextContentUpdateManyInlineInput = {
  /** Create and connect multiple PageRichTextContent component instances */
  create?: InputMaybe<Array<PageRichTextContentCreateWithPositionInput>>;
  /** Delete multiple PageRichTextContent documents */
  delete?: InputMaybe<Array<PageRichTextContentWhereUniqueInput>>;
  /** Update multiple PageRichTextContent component instances */
  update?: InputMaybe<Array<PageRichTextContentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple PageRichTextContent component instances */
  upsert?: InputMaybe<Array<PageRichTextContentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type PageRichTextContentUpdateManyInput = {
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageRichTextContentUpdateManyLocalizationsInput>;
};

export type PageRichTextContentUpdateManyLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type PageRichTextContentUpdateManyLocalizationInput = {
  data: PageRichTextContentUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextContentUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageRichTextContentUpdateManyLocalizationInput>>;
};

export type PageRichTextContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageRichTextContentUpdateManyInput;
  /** Document search */
  where: PageRichTextContentWhereInput;
};

export type PageRichTextContentUpdateOneInlineInput = {
  /** Create and connect one PageRichTextContent document */
  create?: InputMaybe<PageRichTextContentCreateInput>;
  /** Delete currently connected PageRichTextContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageRichTextContent document */
  update?: InputMaybe<PageRichTextContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageRichTextContent document */
  upsert?: InputMaybe<PageRichTextContentUpsertWithNestedWhereUniqueInput>;
};

export type PageRichTextContentUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<PageRichTextContentUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PageRichTextContentWhereUniqueInput;
};

export type PageRichTextContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageRichTextContentUpdateInput;
  /** Unique document search */
  where: PageRichTextContentWhereUniqueInput;
};

export type PageRichTextContentUpsertInput = {
  /** Create document if it didn't exist */
  create: PageRichTextContentCreateInput;
  /** Update document if it exists */
  update: PageRichTextContentUpdateInput;
};

export type PageRichTextContentUpsertLocalizationInput = {
  create: PageRichTextContentCreateLocalizationDataInput;
  locale: Locale;
  update: PageRichTextContentUpdateLocalizationDataInput;
};

export type PageRichTextContentUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<PageRichTextContentUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PageRichTextContentWhereUniqueInput;
};

export type PageRichTextContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageRichTextContentUpsertInput;
  /** Unique document search */
  where: PageRichTextContentWhereUniqueInput;
};

/** Identifies documents */
export type PageRichTextContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageRichTextContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References PageRichTextContent record uniquely */
export type PageRichTextContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PageRichTextWrapper = Node & {
  __typename?: 'PageRichTextWrapper';
  content?: Maybe<PageRichTextWrapperContentRichText>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageRichTextWrapper>;
  /** List of PageRichTextWrapper versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<PageRichTextWrapper>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageRichTextWrapperCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageRichTextWrapperCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageRichTextWrapperDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageRichTextWrapperHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageRichTextWrapperLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type PageRichTextWrapperPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageRichTextWrapperPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageRichTextWrapperScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageRichTextWrapperUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageRichTextWrapperUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type PageRichTextWrapperConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageRichTextWrapperWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageRichTextWrapperConnection = {
  __typename?: 'PageRichTextWrapperConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageRichTextWrapperEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageRichTextWrapperContentRichText = {
  __typename?: 'PageRichTextWrapperContentRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<PageRichTextWrapperContentRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type PageRichTextWrapperContentRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type PageRichTextWrapperContentRichTextEmbeddedTypes = Collaborator | Event | Member | Page | Project | Service | SocialHandle;

export type PageRichTextWrapperCreateInput = {
  cl8fub8ow3ybz01t79r5zhxe0?: InputMaybe<PageCreateManyInlineInput>;
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageRichTextWrapperCreateLocalizationsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageRichTextWrapperCreateLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageRichTextWrapperCreateLocalizationInput = {
  /** Localization input */
  data: PageRichTextWrapperCreateLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextWrapperCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageRichTextWrapperCreateLocalizationInput>>;
};

export type PageRichTextWrapperCreateManyInlineInput = {
  /** Connect multiple existing PageRichTextWrapper documents */
  connect?: InputMaybe<Array<PageRichTextWrapperWhereUniqueInput>>;
  /** Create and connect multiple existing PageRichTextWrapper documents */
  create?: InputMaybe<Array<PageRichTextWrapperCreateInput>>;
};

export type PageRichTextWrapperCreateOneInlineInput = {
  /** Connect one existing PageRichTextWrapper document */
  connect?: InputMaybe<PageRichTextWrapperWhereUniqueInput>;
  /** Create and connect one PageRichTextWrapper document */
  create?: InputMaybe<PageRichTextWrapperCreateInput>;
};

/** An edge in a connection. */
export type PageRichTextWrapperEdge = {
  __typename?: 'PageRichTextWrapperEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageRichTextWrapper;
};

/** Identifies documents */
export type PageRichTextWrapperManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  documentInStages_none?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  documentInStages_some?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageRichTextWrapperOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageRichTextWrapperUpdateInput = {
  cl8fub8ow3ybz01t79r5zhxe0?: InputMaybe<PageUpdateManyInlineInput>;
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageRichTextWrapperUpdateLocalizationsInput>;
};

export type PageRichTextWrapperUpdateLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type PageRichTextWrapperUpdateLocalizationInput = {
  data: PageRichTextWrapperUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextWrapperUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageRichTextWrapperCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageRichTextWrapperUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageRichTextWrapperUpsertLocalizationInput>>;
};

export type PageRichTextWrapperUpdateManyInlineInput = {
  /** Connect multiple existing PageRichTextWrapper documents */
  connect?: InputMaybe<Array<PageRichTextWrapperConnectInput>>;
  /** Create and connect multiple PageRichTextWrapper documents */
  create?: InputMaybe<Array<PageRichTextWrapperCreateInput>>;
  /** Delete multiple PageRichTextWrapper documents */
  delete?: InputMaybe<Array<PageRichTextWrapperWhereUniqueInput>>;
  /** Disconnect multiple PageRichTextWrapper documents */
  disconnect?: InputMaybe<Array<PageRichTextWrapperWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageRichTextWrapper documents */
  set?: InputMaybe<Array<PageRichTextWrapperWhereUniqueInput>>;
  /** Update multiple PageRichTextWrapper documents */
  update?: InputMaybe<Array<PageRichTextWrapperUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageRichTextWrapper documents */
  upsert?: InputMaybe<Array<PageRichTextWrapperUpsertWithNestedWhereUniqueInput>>;
};

export type PageRichTextWrapperUpdateManyInput = {
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageRichTextWrapperUpdateManyLocalizationsInput>;
};

export type PageRichTextWrapperUpdateManyLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type PageRichTextWrapperUpdateManyLocalizationInput = {
  data: PageRichTextWrapperUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageRichTextWrapperUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageRichTextWrapperUpdateManyLocalizationInput>>;
};

export type PageRichTextWrapperUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageRichTextWrapperUpdateManyInput;
  /** Document search */
  where: PageRichTextWrapperWhereInput;
};

export type PageRichTextWrapperUpdateOneInlineInput = {
  /** Connect existing PageRichTextWrapper document */
  connect?: InputMaybe<PageRichTextWrapperWhereUniqueInput>;
  /** Create and connect one PageRichTextWrapper document */
  create?: InputMaybe<PageRichTextWrapperCreateInput>;
  /** Delete currently connected PageRichTextWrapper document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageRichTextWrapper document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageRichTextWrapper document */
  update?: InputMaybe<PageRichTextWrapperUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageRichTextWrapper document */
  upsert?: InputMaybe<PageRichTextWrapperUpsertWithNestedWhereUniqueInput>;
};

export type PageRichTextWrapperUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageRichTextWrapperUpdateInput;
  /** Unique document search */
  where: PageRichTextWrapperWhereUniqueInput;
};

export type PageRichTextWrapperUpsertInput = {
  /** Create document if it didn't exist */
  create: PageRichTextWrapperCreateInput;
  /** Update document if it exists */
  update: PageRichTextWrapperUpdateInput;
};

export type PageRichTextWrapperUpsertLocalizationInput = {
  create: PageRichTextWrapperCreateLocalizationDataInput;
  locale: Locale;
  update: PageRichTextWrapperUpdateLocalizationDataInput;
};

export type PageRichTextWrapperUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageRichTextWrapperUpsertInput;
  /** Unique document search */
  where: PageRichTextWrapperWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageRichTextWrapperWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageRichTextWrapperWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageRichTextWrapperWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  documentInStages_none?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  documentInStages_some?: InputMaybe<PageRichTextWrapperWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageRichTextWrapperWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageRichTextWrapperWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageRichTextWrapperWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageRichTextWrapperWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageRichTextWrapperWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References PageRichTextWrapper record uniquely */
export type PageRichTextWrapperWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PageUpdateInput = {
  cl73cpmzq3ggu01uehjvgc91d?: InputMaybe<NavigationUpdateManyInlineInput>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  hero?: InputMaybe<PageHeroUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageUpdateLocalizationsInput>;
  /** navigationLabel input for default locale (en) */
  navigationLabel?: InputMaybe<Scalars['String']>;
  pageElementInfo?: InputMaybe<PageElementInfoUpdateOneInlineInput>;
  pageRichTextContent?: InputMaybe<PageRichTextWrapperUpdateOneInlineInput>;
  sections?: InputMaybe<SectionUpdateManyInlineInput>;
  seo?: InputMaybe<SeoUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']>;
};

export type PageUpdateLocalizationDataInput = {
  navigationLabel?: InputMaybe<Scalars['String']>;
};

export type PageUpdateLocalizationInput = {
  data: PageUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageUpsertLocalizationInput>>;
};

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput;
  /** Document search */
  where: PageWhereInput;
};

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertLocalizationInput = {
  create: PageCreateLocalizationDataInput;
  locale: Locale;
  update: PageUpdateLocalizationDataInput;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  navigationLabel?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  navigationLabel_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  navigationLabel_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  navigationLabel_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  navigationLabel_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  navigationLabel_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  navigationLabel_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  navigationLabel_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  navigationLabel_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  navigationLabel_starts_with?: InputMaybe<Scalars['String']>;
  pageElementInfo?: InputMaybe<PageElementInfoWhereInput>;
  pageRichTextContent?: InputMaybe<PageRichTextWrapperWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sections_every?: InputMaybe<SectionWhereInput>;
  sections_none?: InputMaybe<SectionWhereInput>;
  sections_some?: InputMaybe<SectionWhereInput>;
  seo?: InputMaybe<SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Paragraph = {
  __typename?: 'Paragraph';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Paragraph>;
  /** System stage field */
  stage: Stage;
  value: RichText;
};


export type ParagraphLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type ParagraphConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ParagraphWhereUniqueInput;
};

/** A connection to a list of items. */
export type ParagraphConnection = {
  __typename?: 'ParagraphConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ParagraphEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ParagraphCreateInput = {
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ParagraphCreateLocalizationsInput>;
  /** value input for default locale (en) */
  value: Scalars['RichTextAST'];
};

export type ParagraphCreateLocalizationDataInput = {
  value: Scalars['RichTextAST'];
};

export type ParagraphCreateLocalizationInput = {
  /** Localization input */
  data: ParagraphCreateLocalizationDataInput;
  locale: Locale;
};

export type ParagraphCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ParagraphCreateLocalizationInput>>;
};

export type ParagraphCreateManyInlineInput = {
  /** Create and connect multiple existing Paragraph documents */
  create?: InputMaybe<Array<ParagraphCreateInput>>;
};

export type ParagraphCreateOneInlineInput = {
  /** Create and connect one Paragraph document */
  create?: InputMaybe<ParagraphCreateInput>;
};

export type ParagraphCreateWithPositionInput = {
  /** Document to create */
  data: ParagraphCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ParagraphEdge = {
  __typename?: 'ParagraphEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Paragraph;
};

/** Identifies documents */
export type ParagraphManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum ParagraphOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ParagraphParent = Column | SectionWithImage;

export type ParagraphParentConnectInput = {
  Column?: InputMaybe<ColumnConnectInput>;
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
};

export type ParagraphParentCreateInput = {
  Column?: InputMaybe<ColumnCreateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
};

export type ParagraphParentCreateManyInlineInput = {
  /** Create and connect multiple existing ParagraphParent documents */
  create?: InputMaybe<Array<ParagraphParentCreateInput>>;
};

export type ParagraphParentCreateOneInlineInput = {
  /** Create and connect one ParagraphParent document */
  create?: InputMaybe<ParagraphParentCreateInput>;
};

export type ParagraphParentCreateWithPositionInput = {
  Column?: InputMaybe<ColumnCreateWithPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
};

export type ParagraphParentUpdateInput = {
  Column?: InputMaybe<ColumnUpdateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
};

export type ParagraphParentUpdateManyInlineInput = {
  /** Create and connect multiple ParagraphParent component instances */
  create?: InputMaybe<Array<ParagraphParentCreateWithPositionInput>>;
  /** Delete multiple ParagraphParent documents */
  delete?: InputMaybe<Array<ParagraphParentWhereUniqueInput>>;
  /** Update multiple ParagraphParent component instances */
  update?: InputMaybe<Array<ParagraphParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ParagraphParent component instances */
  upsert?: InputMaybe<Array<ParagraphParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ParagraphParentUpdateManyWithNestedWhereInput = {
  Column?: InputMaybe<ColumnUpdateManyWithNestedWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
};

export type ParagraphParentUpdateOneInlineInput = {
  /** Create and connect one ParagraphParent document */
  create?: InputMaybe<ParagraphParentCreateInput>;
  /** Delete currently connected ParagraphParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ParagraphParent document */
  update?: InputMaybe<ParagraphParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ParagraphParent document */
  upsert?: InputMaybe<ParagraphParentUpsertWithNestedWhereUniqueInput>;
};

export type ParagraphParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Column?: InputMaybe<ColumnUpdateWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ParagraphParentUpdateWithNestedWhereUniqueInput = {
  Column?: InputMaybe<ColumnUpdateWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
};

export type ParagraphParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Column?: InputMaybe<ColumnUpsertWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ParagraphParentUpsertWithNestedWhereUniqueInput = {
  Column?: InputMaybe<ColumnUpsertWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type ParagraphParentWhereInput = {
  Column?: InputMaybe<ColumnWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
};

export type ParagraphParentWhereUniqueInput = {
  Column?: InputMaybe<ColumnWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
};

export type ParagraphUpdateInput = {
  /** Manage document localizations */
  localizations?: InputMaybe<ParagraphUpdateLocalizationsInput>;
  /** value input for default locale (en) */
  value?: InputMaybe<Scalars['RichTextAST']>;
};

export type ParagraphUpdateLocalizationDataInput = {
  value?: InputMaybe<Scalars['RichTextAST']>;
};

export type ParagraphUpdateLocalizationInput = {
  data: ParagraphUpdateLocalizationDataInput;
  locale: Locale;
};

export type ParagraphUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ParagraphCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ParagraphUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ParagraphUpsertLocalizationInput>>;
};

export type ParagraphUpdateManyInlineInput = {
  /** Create and connect multiple Paragraph component instances */
  create?: InputMaybe<Array<ParagraphCreateWithPositionInput>>;
  /** Delete multiple Paragraph documents */
  delete?: InputMaybe<Array<ParagraphWhereUniqueInput>>;
  /** Update multiple Paragraph component instances */
  update?: InputMaybe<Array<ParagraphUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Paragraph component instances */
  upsert?: InputMaybe<Array<ParagraphUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ParagraphUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: InputMaybe<ParagraphUpdateManyLocalizationsInput>;
  /** value input for default locale (en) */
  value?: InputMaybe<Scalars['RichTextAST']>;
};

export type ParagraphUpdateManyLocalizationDataInput = {
  value?: InputMaybe<Scalars['RichTextAST']>;
};

export type ParagraphUpdateManyLocalizationInput = {
  data: ParagraphUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ParagraphUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ParagraphUpdateManyLocalizationInput>>;
};

export type ParagraphUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ParagraphUpdateManyInput;
  /** Document search */
  where: ParagraphWhereInput;
};

export type ParagraphUpdateOneInlineInput = {
  /** Create and connect one Paragraph document */
  create?: InputMaybe<ParagraphCreateInput>;
  /** Delete currently connected Paragraph document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Paragraph document */
  update?: InputMaybe<ParagraphUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Paragraph document */
  upsert?: InputMaybe<ParagraphUpsertWithNestedWhereUniqueInput>;
};

export type ParagraphUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ParagraphUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ParagraphWhereUniqueInput;
};

export type ParagraphUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ParagraphUpdateInput;
  /** Unique document search */
  where: ParagraphWhereUniqueInput;
};

export type ParagraphUpsertInput = {
  /** Create document if it didn't exist */
  create: ParagraphCreateInput;
  /** Update document if it exists */
  update: ParagraphUpdateInput;
};

export type ParagraphUpsertLocalizationInput = {
  create: ParagraphCreateLocalizationDataInput;
  locale: Locale;
  update: ParagraphUpdateLocalizationDataInput;
};

export type ParagraphUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ParagraphUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ParagraphWhereUniqueInput;
};

export type ParagraphUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ParagraphUpsertInput;
  /** Unique document search */
  where: ParagraphWhereUniqueInput;
};

/** Identifies documents */
export type ParagraphWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ParagraphWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References Paragraph record uniquely */
export type ParagraphWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Project = Node & {
  __typename?: 'Project';
  categories: Array<Category>;
  collaborators: Array<Collaborator>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: ProjectDescriptionRichText;
  /** Get the document in other stages */
  documentInStages: Array<Project>;
  end?: Maybe<Scalars['Date']>;
  events: Array<Event>;
  featuredImage: Asset;
  gallery: Array<Asset>;
  /** List of Project versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Project>;
  locations: Array<Location>;
  name: Scalars['String'];
  projectStatus?: Maybe<ProjectStatus>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** This field is important, as it allows to give a brief description of the project and this will helps for search and filtering of  */
  shortDescription: Scalars['String'];
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  start: Scalars['Date'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ProjectCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CategoryWhereInput>;
};


export type ProjectCollaboratorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollaboratorWhereInput>;
};


export type ProjectCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ProjectCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ProjectDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProjectEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EventWhereInput>;
};


export type ProjectFeaturedImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ProjectGalleryArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type ProjectHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProjectLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type ProjectPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ProjectPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ProjectScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProjectUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ProjectUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ProjectConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProjectWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProjectEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProjectCreateInput = {
  categories?: InputMaybe<CategoryCreateManyInlineInput>;
  cl8757v580bzy01um8r36bo18?: InputMaybe<ProjectSectionCreateManyInlineInput>;
  collaborators?: InputMaybe<CollaboratorCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description: Scalars['RichTextAST'];
  end?: InputMaybe<Scalars['Date']>;
  events?: InputMaybe<EventCreateManyInlineInput>;
  featuredImage: AssetCreateOneInlineInput;
  gallery?: InputMaybe<AssetCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ProjectCreateLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name: Scalars['String'];
  projectStatus?: InputMaybe<ProjectStatus>;
  /** shortDescription input for default locale (en) */
  shortDescription: Scalars['String'];
  slug: Scalars['String'];
  start: Scalars['Date'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ProjectCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['RichTextAST'];
  shortDescription: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ProjectCreateLocalizationInput = {
  /** Localization input */
  data: ProjectCreateLocalizationDataInput;
  locale: Locale;
};

export type ProjectCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ProjectCreateLocalizationInput>>;
};

export type ProjectCreateManyInlineInput = {
  /** Connect multiple existing Project documents */
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  /** Create and connect multiple existing Project documents */
  create?: InputMaybe<Array<ProjectCreateInput>>;
};

export type ProjectCreateOneInlineInput = {
  /** Connect one existing Project document */
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  /** Create and connect one Project document */
  create?: InputMaybe<ProjectCreateInput>;
};

export type ProjectDescriptionRichText = {
  __typename?: 'ProjectDescriptionRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<ProjectDescriptionRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type ProjectDescriptionRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type ProjectDescriptionRichTextEmbeddedTypes = Asset | Category | Collaborator | Event | Member | Page | Project | Service | SocialHandle;

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Project;
};

/** Identifies documents */
export type ProjectManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  categories_every?: InputMaybe<CategoryWhereInput>;
  categories_none?: InputMaybe<CategoryWhereInput>;
  categories_some?: InputMaybe<CategoryWhereInput>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProjectWhereStageInput>;
  documentInStages_none?: InputMaybe<ProjectWhereStageInput>;
  documentInStages_some?: InputMaybe<ProjectWhereStageInput>;
  end?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['Date']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  featuredImage?: InputMaybe<AssetWhereInput>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projectStatus?: InputMaybe<ProjectStatus>;
  /** All values that are contained in given list. */
  projectStatus_in?: InputMaybe<Array<InputMaybe<ProjectStatus>>>;
  /** All values that are not equal to given value. */
  projectStatus_not?: InputMaybe<ProjectStatus>;
  /** All values that are not contained in given list. */
  projectStatus_not_in?: InputMaybe<Array<InputMaybe<ProjectStatus>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['Date']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ProjectOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  EndAsc = 'end_ASC',
  EndDesc = 'end_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ProjectStatusAsc = 'projectStatus_ASC',
  ProjectStatusDesc = 'projectStatus_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  StartAsc = 'start_ASC',
  StartDesc = 'start_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ProjectSection = {
  __typename?: 'ProjectSection';
  cta?: Maybe<Button>;
  headline: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<ProjectSection>;
  projects: Array<Project>;
  /** System stage field */
  stage: Stage;
};


export type ProjectSectionCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ProjectSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type ProjectSectionProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProjectSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProjectSectionConnection = {
  __typename?: 'ProjectSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProjectSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProjectSectionCreateInput = {
  cta?: InputMaybe<ButtonCreateOneInlineInput>;
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ProjectSectionCreateLocalizationsInput>;
  projects?: InputMaybe<ProjectCreateManyInlineInput>;
};

export type ProjectSectionCreateLocalizationDataInput = {
  headline: Scalars['String'];
};

export type ProjectSectionCreateLocalizationInput = {
  /** Localization input */
  data: ProjectSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type ProjectSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ProjectSectionCreateLocalizationInput>>;
};

export type ProjectSectionCreateManyInlineInput = {
  /** Create and connect multiple existing ProjectSection documents */
  create?: InputMaybe<Array<ProjectSectionCreateInput>>;
};

export type ProjectSectionCreateOneInlineInput = {
  /** Create and connect one ProjectSection document */
  create?: InputMaybe<ProjectSectionCreateInput>;
};

export type ProjectSectionCreateWithPositionInput = {
  /** Document to create */
  data: ProjectSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ProjectSectionEdge = {
  __typename?: 'ProjectSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProjectSection;
};

/** Identifies documents */
export type ProjectSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
};

export enum ProjectSectionOrderByInput {
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ProjectSectionParent = Section;

export type ProjectSectionParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type ProjectSectionParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type ProjectSectionParentCreateManyInlineInput = {
  /** Connect multiple existing ProjectSectionParent documents */
  connect?: InputMaybe<Array<ProjectSectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing ProjectSectionParent documents */
  create?: InputMaybe<Array<ProjectSectionParentCreateInput>>;
};

export type ProjectSectionParentCreateOneInlineInput = {
  /** Connect one existing ProjectSectionParent document */
  connect?: InputMaybe<ProjectSectionParentWhereUniqueInput>;
  /** Create and connect one ProjectSectionParent document */
  create?: InputMaybe<ProjectSectionParentCreateInput>;
};

export type ProjectSectionParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type ProjectSectionParentUpdateManyInlineInput = {
  /** Connect multiple existing ProjectSectionParent documents */
  connect?: InputMaybe<Array<ProjectSectionParentConnectInput>>;
  /** Create and connect multiple ProjectSectionParent documents */
  create?: InputMaybe<Array<ProjectSectionParentCreateInput>>;
  /** Delete multiple ProjectSectionParent documents */
  delete?: InputMaybe<Array<ProjectSectionParentWhereUniqueInput>>;
  /** Disconnect multiple ProjectSectionParent documents */
  disconnect?: InputMaybe<Array<ProjectSectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProjectSectionParent documents */
  set?: InputMaybe<Array<ProjectSectionParentWhereUniqueInput>>;
  /** Update multiple ProjectSectionParent documents */
  update?: InputMaybe<Array<ProjectSectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProjectSectionParent documents */
  upsert?: InputMaybe<Array<ProjectSectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type ProjectSectionParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type ProjectSectionParentUpdateOneInlineInput = {
  /** Connect existing ProjectSectionParent document */
  connect?: InputMaybe<ProjectSectionParentWhereUniqueInput>;
  /** Create and connect one ProjectSectionParent document */
  create?: InputMaybe<ProjectSectionParentCreateInput>;
  /** Delete currently connected ProjectSectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProjectSectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProjectSectionParent document */
  update?: InputMaybe<ProjectSectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProjectSectionParent document */
  upsert?: InputMaybe<ProjectSectionParentUpsertWithNestedWhereUniqueInput>;
};

export type ProjectSectionParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type ProjectSectionParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type ProjectSectionParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type ProjectSectionParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type ProjectSectionUpdateInput = {
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<ProjectSectionUpdateLocalizationsInput>;
  projects?: InputMaybe<ProjectUpdateManyInlineInput>;
};

export type ProjectSectionUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type ProjectSectionUpdateLocalizationInput = {
  data: ProjectSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type ProjectSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ProjectSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ProjectSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ProjectSectionUpsertLocalizationInput>>;
};

export type ProjectSectionUpdateManyInlineInput = {
  /** Create and connect multiple ProjectSection component instances */
  create?: InputMaybe<Array<ProjectSectionCreateWithPositionInput>>;
  /** Delete multiple ProjectSection documents */
  delete?: InputMaybe<Array<ProjectSectionWhereUniqueInput>>;
  /** Update multiple ProjectSection component instances */
  update?: InputMaybe<Array<ProjectSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProjectSection component instances */
  upsert?: InputMaybe<Array<ProjectSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProjectSectionUpdateManyInput = {
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<ProjectSectionUpdateManyLocalizationsInput>;
};

export type ProjectSectionUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type ProjectSectionUpdateManyLocalizationInput = {
  data: ProjectSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ProjectSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ProjectSectionUpdateManyLocalizationInput>>;
};

export type ProjectSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProjectSectionUpdateManyInput;
  /** Document search */
  where: ProjectSectionWhereInput;
};

export type ProjectSectionUpdateOneInlineInput = {
  /** Create and connect one ProjectSection document */
  create?: InputMaybe<ProjectSectionCreateInput>;
  /** Delete currently connected ProjectSection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProjectSection document */
  update?: InputMaybe<ProjectSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProjectSection document */
  upsert?: InputMaybe<ProjectSectionUpsertWithNestedWhereUniqueInput>;
};

export type ProjectSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ProjectSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProjectSectionWhereUniqueInput;
};

export type ProjectSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProjectSectionUpdateInput;
  /** Unique document search */
  where: ProjectSectionWhereUniqueInput;
};

export type ProjectSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: ProjectSectionCreateInput;
  /** Update document if it exists */
  update: ProjectSectionUpdateInput;
};

export type ProjectSectionUpsertLocalizationInput = {
  create: ProjectSectionCreateLocalizationDataInput;
  locale: Locale;
  update: ProjectSectionUpdateLocalizationDataInput;
};

export type ProjectSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ProjectSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProjectSectionWhereUniqueInput;
};

export type ProjectSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProjectSectionUpsertInput;
  /** Unique document search */
  where: ProjectSectionWhereUniqueInput;
};

/** Identifies documents */
export type ProjectSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProjectSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cta?: InputMaybe<ButtonWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  projects_every?: InputMaybe<ProjectWhereInput>;
  projects_none?: InputMaybe<ProjectWhereInput>;
  projects_some?: InputMaybe<ProjectWhereInput>;
};

/** References ProjectSection record uniquely */
export type ProjectSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Completion status of the project. RUNNING, PAUSED or TERMINATED */
export enum ProjectStatus {
  Paused = 'PAUSED',
  Running = 'RUNNING',
  Terminated = 'TERMINATED'
}

export type ProjectUpdateInput = {
  categories?: InputMaybe<CategoryUpdateManyInlineInput>;
  cl8757v580bzy01um8r36bo18?: InputMaybe<ProjectSectionUpdateManyInlineInput>;
  collaborators?: InputMaybe<CollaboratorUpdateManyInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  end?: InputMaybe<Scalars['Date']>;
  events?: InputMaybe<EventUpdateManyInlineInput>;
  featuredImage?: InputMaybe<AssetUpdateOneInlineInput>;
  gallery?: InputMaybe<AssetUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<ProjectUpdateLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name?: InputMaybe<Scalars['String']>;
  projectStatus?: InputMaybe<ProjectStatus>;
  /** shortDescription input for default locale (en) */
  shortDescription?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['Date']>;
};

export type ProjectUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  shortDescription?: InputMaybe<Scalars['String']>;
};

export type ProjectUpdateLocalizationInput = {
  data: ProjectUpdateLocalizationDataInput;
  locale: Locale;
};

export type ProjectUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ProjectCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ProjectUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertLocalizationInput>>;
};

export type ProjectUpdateManyInlineInput = {
  /** Connect multiple existing Project documents */
  connect?: InputMaybe<Array<ProjectConnectInput>>;
  /** Create and connect multiple Project documents */
  create?: InputMaybe<Array<ProjectCreateInput>>;
  /** Delete multiple Project documents */
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  /** Disconnect multiple Project documents */
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Project documents */
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  /** Update multiple Project documents */
  update?: InputMaybe<Array<ProjectUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Project documents */
  upsert?: InputMaybe<Array<ProjectUpsertWithNestedWhereUniqueInput>>;
};

export type ProjectUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  end?: InputMaybe<Scalars['Date']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<ProjectUpdateManyLocalizationsInput>;
  locations?: InputMaybe<Array<LocationInput>>;
  name?: InputMaybe<Scalars['String']>;
  projectStatus?: InputMaybe<ProjectStatus>;
  /** shortDescription input for default locale (en) */
  shortDescription?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['Date']>;
};

export type ProjectUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['RichTextAST']>;
  shortDescription?: InputMaybe<Scalars['String']>;
};

export type ProjectUpdateManyLocalizationInput = {
  data: ProjectUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ProjectUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ProjectUpdateManyLocalizationInput>>;
};

export type ProjectUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProjectUpdateManyInput;
  /** Document search */
  where: ProjectWhereInput;
};

export type ProjectUpdateOneInlineInput = {
  /** Connect existing Project document */
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  /** Create and connect one Project document */
  create?: InputMaybe<ProjectCreateInput>;
  /** Delete currently connected Project document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Project document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Project document */
  update?: InputMaybe<ProjectUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Project document */
  upsert?: InputMaybe<ProjectUpsertWithNestedWhereUniqueInput>;
};

export type ProjectUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProjectUpdateInput;
  /** Unique document search */
  where: ProjectWhereUniqueInput;
};

export type ProjectUpsertInput = {
  /** Create document if it didn't exist */
  create: ProjectCreateInput;
  /** Update document if it exists */
  update: ProjectUpdateInput;
};

export type ProjectUpsertLocalizationInput = {
  create: ProjectCreateLocalizationDataInput;
  locale: Locale;
  update: ProjectUpdateLocalizationDataInput;
};

export type ProjectUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProjectUpsertInput;
  /** Unique document search */
  where: ProjectWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProjectWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProjectWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  categories_every?: InputMaybe<CategoryWhereInput>;
  categories_none?: InputMaybe<CategoryWhereInput>;
  categories_some?: InputMaybe<CategoryWhereInput>;
  collaborators_every?: InputMaybe<CollaboratorWhereInput>;
  collaborators_none?: InputMaybe<CollaboratorWhereInput>;
  collaborators_some?: InputMaybe<CollaboratorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProjectWhereStageInput>;
  documentInStages_none?: InputMaybe<ProjectWhereStageInput>;
  documentInStages_some?: InputMaybe<ProjectWhereStageInput>;
  end?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  end_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  end_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  end_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  end_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  end_lte?: InputMaybe<Scalars['Date']>;
  /** All values that are not equal to given value. */
  end_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  end_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  events_every?: InputMaybe<EventWhereInput>;
  events_none?: InputMaybe<EventWhereInput>;
  events_some?: InputMaybe<EventWhereInput>;
  featuredImage?: InputMaybe<AssetWhereInput>;
  gallery_every?: InputMaybe<AssetWhereInput>;
  gallery_none?: InputMaybe<AssetWhereInput>;
  gallery_some?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  projectStatus?: InputMaybe<ProjectStatus>;
  /** All values that are contained in given list. */
  projectStatus_in?: InputMaybe<Array<InputMaybe<ProjectStatus>>>;
  /** All values that are not equal to given value. */
  projectStatus_not?: InputMaybe<ProjectStatus>;
  /** All values that are not contained in given list. */
  projectStatus_not_in?: InputMaybe<Array<InputMaybe<ProjectStatus>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  shortDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shortDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  shortDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shortDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shortDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shortDescription_starts_with?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  start?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  start_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  start_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  start_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  start_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  start_lte?: InputMaybe<Scalars['Date']>;
  /** All values that are not equal to given value. */
  start_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  start_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProjectWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProjectWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProjectWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProjectWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProjectWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Project record uniquely */
export type ProjectWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single associationDetails */
  associationDetails?: Maybe<AssociationDetails>;
  /** Retrieve document version */
  associationDetailsVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple associationDetailss */
  associationDetailss: Array<AssociationDetails>;
  /** Retrieve multiple associationDetailss using the Relay connection interface */
  associationDetailssConnection: AssociationDetailsConnection;
  /** Retrieve a single banner */
  banner?: Maybe<Banner>;
  /** Retrieve document version */
  bannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple banners */
  banners: Array<Banner>;
  /** Retrieve multiple banners using the Relay connection interface */
  bannersConnection: BannerConnection;
  /** Retrieve a single carousel */
  carousel?: Maybe<Carousel>;
  /** Retrieve document version */
  carouselVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple carousels */
  carousels: Array<Carousel>;
  /** Retrieve multiple carousels using the Relay connection interface */
  carouselsConnection: CarouselConnection;
  /** Retrieve multiple categories */
  categories: Array<Category>;
  /** Retrieve multiple categories using the Relay connection interface */
  categoriesConnection: CategoryConnection;
  /** Retrieve a single category */
  category?: Maybe<Category>;
  /** Retrieve document version */
  categoryVersion?: Maybe<DocumentVersion>;
  /** Retrieve a single collaborator */
  collaborator?: Maybe<Collaborator>;
  /** Retrieve document version */
  collaboratorVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple collaborators */
  collaborators: Array<Collaborator>;
  /** Retrieve multiple collaborators using the Relay connection interface */
  collaboratorsConnection: CollaboratorConnection;
  /** Retrieve a single event */
  event?: Maybe<Event>;
  /** Retrieve document version */
  eventVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple events */
  events: Array<Event>;
  /** Retrieve multiple events using the Relay connection interface */
  eventsConnection: EventConnection;
  /** Retrieve a single form */
  form?: Maybe<Form>;
  /** Retrieve document version */
  formVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple forms */
  forms: Array<Form>;
  /** Retrieve multiple forms using the Relay connection interface */
  formsConnection: FormConnection;
  /** Retrieve a single layout */
  layout?: Maybe<Layout>;
  /** Retrieve document version */
  layoutVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple layouts */
  layouts: Array<Layout>;
  /** Retrieve multiple layouts using the Relay connection interface */
  layoutsConnection: LayoutConnection;
  /** Retrieve a single member */
  member?: Maybe<Member>;
  /** Retrieve document version */
  memberVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple members */
  members: Array<Member>;
  /** Retrieve multiple members using the Relay connection interface */
  membersConnection: MemberConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve a single pageElementInfo */
  pageElementInfo?: Maybe<PageElementInfo>;
  /** Retrieve document version */
  pageElementInfoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageElementInfos */
  pageElementInfos: Array<PageElementInfo>;
  /** Retrieve multiple pageElementInfos using the Relay connection interface */
  pageElementInfosConnection: PageElementInfoConnection;
  /** Retrieve a single pageRichTextWrapper */
  pageRichTextWrapper?: Maybe<PageRichTextWrapper>;
  /** Retrieve document version */
  pageRichTextWrapperVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageRichTextWrappers */
  pageRichTextWrappers: Array<PageRichTextWrapper>;
  /** Retrieve multiple pageRichTextWrappers using the Relay connection interface */
  pageRichTextWrappersConnection: PageRichTextWrapperConnection;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve a single project */
  project?: Maybe<Project>;
  /** Retrieve document version */
  projectVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple projects */
  projects: Array<Project>;
  /** Retrieve multiple projects using the Relay connection interface */
  projectsConnection: ProjectConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single section */
  section?: Maybe<Section>;
  /** Retrieve document version */
  sectionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sections */
  sections: Array<Section>;
  /** Retrieve multiple sections using the Relay connection interface */
  sectionsConnection: SectionConnection;
  /** Retrieve a single seo */
  seo?: Maybe<Seo>;
  /** Retrieve document version */
  seoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple seos */
  seos: Array<Seo>;
  /** Retrieve multiple seos using the Relay connection interface */
  seosConnection: SeoConnection;
  /** Retrieve a single service */
  service?: Maybe<Service>;
  /** Retrieve document version */
  serviceVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple services */
  services: Array<Service>;
  /** Retrieve multiple services using the Relay connection interface */
  servicesConnection: ServiceConnection;
  /** Retrieve a single socialHandle */
  socialHandle?: Maybe<SocialHandle>;
  /** Retrieve document version */
  socialHandleVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple socialHandles */
  socialHandles: Array<SocialHandle>;
  /** Retrieve multiple socialHandles using the Relay connection interface */
  socialHandlesConnection: SocialHandleConnection;
  /** Retrieve a single submission */
  submission?: Maybe<Submission>;
  /** Retrieve document version */
  submissionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple submissions */
  submissions: Array<Submission>;
  /** Retrieve multiple submissions using the Relay connection interface */
  submissionsConnection: SubmissionConnection;
  /** Retrieve a single testimonial */
  testimonial?: Maybe<Testimonial>;
  /** Retrieve document version */
  testimonialVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple testimonials */
  testimonials: Array<Testimonial>;
  /** Retrieve multiple testimonials using the Relay connection interface */
  testimonialsConnection: TestimonialConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssociationDetailsArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssociationDetailsWhereUniqueInput;
};


export type QueryAssociationDetailsVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssociationDetailssArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssociationDetailsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssociationDetailsWhereInput>;
};


export type QueryAssociationDetailssConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssociationDetailsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssociationDetailsWhereInput>;
};


export type QueryBannerArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BannerWhereUniqueInput;
};


export type QueryBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BannerWhereInput>;
};


export type QueryBannersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BannerWhereInput>;
};


export type QueryCarouselArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CarouselWhereUniqueInput;
};


export type QueryCarouselVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCarouselsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CarouselWhereInput>;
};


export type QueryCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CarouselWhereInput>;
};


export type QueryCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CategoryWhereInput>;
};


export type QueryCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CategoryWhereInput>;
};


export type QueryCategoryArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CategoryWhereUniqueInput;
};


export type QueryCategoryVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCollaboratorArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CollaboratorWhereUniqueInput;
};


export type QueryCollaboratorVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCollaboratorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CollaboratorWhereInput>;
};


export type QueryCollaboratorsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollaboratorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CollaboratorWhereInput>;
};


export type QueryEventArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EventWhereUniqueInput;
};


export type QueryEventVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EventOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FormWhereUniqueInput;
};


export type QueryFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFormsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryLayoutArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: LayoutWhereUniqueInput;
};


export type QueryLayoutVersionArgs = {
  where: VersionWhereInput;
};


export type QueryLayoutsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LayoutOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<LayoutWhereInput>;
};


export type QueryLayoutsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<LayoutOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<LayoutWhereInput>;
};


export type QueryMemberArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: MemberWhereUniqueInput;
};


export type QueryMemberVersionArgs = {
  where: VersionWhereInput;
};


export type QueryMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MemberOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<MemberWhereInput>;
};


export type QueryMembersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MemberOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<MemberWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageWhereUniqueInput;
};


export type QueryPageElementInfoArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageElementInfoWhereUniqueInput;
};


export type QueryPageElementInfoVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageElementInfosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageElementInfoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageElementInfoWhereInput>;
};


export type QueryPageElementInfosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageElementInfoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageElementInfoWhereInput>;
};


export type QueryPageRichTextWrapperArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageRichTextWrapperWhereUniqueInput;
};


export type QueryPageRichTextWrapperVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageRichTextWrappersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageRichTextWrapperOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageRichTextWrapperWhereInput>;
};


export type QueryPageRichTextWrappersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageRichTextWrapperOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageRichTextWrapperWhereInput>;
};


export type QueryPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryProjectArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProjectWhereUniqueInput;
};


export type QueryProjectVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryProjectsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QuerySectionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionWhereUniqueInput;
};


export type QuerySectionVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionWhereInput>;
};


export type QuerySectionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionWhereInput>;
};


export type QuerySeoArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SeoWhereUniqueInput;
};


export type QuerySeoVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySeosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SeoWhereInput>;
};


export type QuerySeosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SeoWhereInput>;
};


export type QueryServiceArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ServiceWhereUniqueInput;
};


export type QueryServiceVersionArgs = {
  where: VersionWhereInput;
};


export type QueryServicesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ServiceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ServiceWhereInput>;
};


export type QueryServicesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ServiceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ServiceWhereInput>;
};


export type QuerySocialHandleArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SocialHandleWhereUniqueInput;
};


export type QuerySocialHandleVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySocialHandlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SocialHandleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SocialHandleWhereInput>;
};


export type QuerySocialHandlesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SocialHandleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SocialHandleWhereInput>;
};


export type QuerySubmissionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SubmissionWhereUniqueInput;
};


export type QuerySubmissionVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySubmissionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SubmissionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SubmissionWhereInput>;
};


export type QuerySubmissionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SubmissionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SubmissionWhereInput>;
};


export type QueryTestimonialArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: TestimonialWhereUniqueInput;
};


export type QueryTestimonialVersionArgs = {
  where: VersionWhereInput;
};


export type QueryTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Asset | AssociationDetails | Banner | Carousel | Category | Collaborator | Event | Form | Layout | Member | Page | PageElementInfo | PageRichTextWrapper | Project | Section | Seo | Service | SocialHandle | Submission | Testimonial;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Section = Node & {
  __typename?: 'Section';
  backgroundColor?: Maybe<BackgroundColorVariant>;
  component?: Maybe<SectioncomponentUnion>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Section>;
  form?: Maybe<Form>;
  /** List of Section versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  isFormMainComponent?: Maybe<Scalars['Boolean']>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Section>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionComponentArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SectionCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type SectionPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SectionPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type SectionUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionConnection = {
  __typename?: 'SectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCreateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cl874lcb90buv01uh3jgjgji0?: InputMaybe<PageCreateManyInlineInput>;
  component?: InputMaybe<SectioncomponentUnionCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  isFormMainComponent?: InputMaybe<Scalars['Boolean']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<SectionCreateLocalizationsInput>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCreateLocalizationInput = {
  /** Localization input */
  data: SectionCreateLocalizationDataInput;
  locale: Locale;
};

export type SectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<SectionCreateLocalizationInput>>;
};

export type SectionCreateManyInlineInput = {
  /** Connect multiple existing Section documents */
  connect?: InputMaybe<Array<SectionWhereUniqueInput>>;
  /** Create and connect multiple existing Section documents */
  create?: InputMaybe<Array<SectionCreateInput>>;
};

export type SectionCreateOneInlineInput = {
  /** Connect one existing Section document */
  connect?: InputMaybe<SectionWhereUniqueInput>;
  /** Create and connect one Section document */
  create?: InputMaybe<SectionCreateInput>;
};

/** An edge in a connection. */
export type SectionEdge = {
  __typename?: 'SectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Section;
};

/** Identifies documents */
export type SectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isFormMainComponent?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isFormMainComponent_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionOrderByInput {
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsFormMainComponentAsc = 'isFormMainComponent_ASC',
  IsFormMainComponentDesc = 'isFormMainComponent_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionUpdateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cl874lcb90buv01uh3jgjgji0?: InputMaybe<PageUpdateManyInlineInput>;
  component?: InputMaybe<SectioncomponentUnionUpdateOneInlineInput>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  isFormMainComponent?: InputMaybe<Scalars['Boolean']>;
  /** Manage document localizations */
  localizations?: InputMaybe<SectionUpdateLocalizationsInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type SectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<SectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type SectionUpdateManyInlineInput = {
  /** Connect multiple existing Section documents */
  connect?: InputMaybe<Array<SectionConnectInput>>;
  /** Create and connect multiple Section documents */
  create?: InputMaybe<Array<SectionCreateInput>>;
  /** Delete multiple Section documents */
  delete?: InputMaybe<Array<SectionWhereUniqueInput>>;
  /** Disconnect multiple Section documents */
  disconnect?: InputMaybe<Array<SectionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Section documents */
  set?: InputMaybe<Array<SectionWhereUniqueInput>>;
  /** Update multiple Section documents */
  update?: InputMaybe<Array<SectionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Section documents */
  upsert?: InputMaybe<Array<SectionUpsertWithNestedWhereUniqueInput>>;
};

export type SectionUpdateManyInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  isFormMainComponent?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type SectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionUpdateManyInput;
  /** Document search */
  where: SectionWhereInput;
};

export type SectionUpdateOneInlineInput = {
  /** Connect existing Section document */
  connect?: InputMaybe<SectionWhereUniqueInput>;
  /** Create and connect one Section document */
  create?: InputMaybe<SectionCreateInput>;
  /** Delete currently connected Section document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Section document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Section document */
  update?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Section document */
  upsert?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type SectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionUpdateInput;
  /** Unique document search */
  where: SectionWhereUniqueInput;
};

export type SectionUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCreateInput;
  /** Update document if it exists */
  update: SectionUpdateInput;
};

export type SectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionUpsertInput;
  /** Unique document search */
  where: SectionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isFormMainComponent?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isFormMainComponent_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Section record uniquely */
export type SectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionWithImage = {
  __typename?: 'SectionWithImage';
  backgroundColor?: Maybe<BackgroundColorVariant>;
  blocks: Array<SectionWithImagessblocksUnion>;
  cta?: Maybe<Button>;
  headline: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  imagePosition?: Maybe<ImagePosition>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<SectionWithImage>;
  /** System stage field */
  stage: Stage;
};


export type SectionWithImageBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type SectionWithImageCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionWithImageImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionWithImageLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type SectionWithImageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionWithImageWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionWithImageConnection = {
  __typename?: 'SectionWithImageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionWithImageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionWithImageCreateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  blocks?: InputMaybe<SectionWithImagessblocksUnionCreateManyInlineInput>;
  cta?: InputMaybe<ButtonCreateOneInlineInput>;
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  image?: InputMaybe<AssetCreateOneInlineInput>;
  imagePosition?: InputMaybe<ImagePosition>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<SectionWithImageCreateLocalizationsInput>;
};

export type SectionWithImageCreateLocalizationDataInput = {
  headline: Scalars['String'];
};

export type SectionWithImageCreateLocalizationInput = {
  /** Localization input */
  data: SectionWithImageCreateLocalizationDataInput;
  locale: Locale;
};

export type SectionWithImageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<SectionWithImageCreateLocalizationInput>>;
};

export type SectionWithImageCreateManyInlineInput = {
  /** Create and connect multiple existing SectionWithImage documents */
  create?: InputMaybe<Array<SectionWithImageCreateInput>>;
};

export type SectionWithImageCreateOneInlineInput = {
  /** Create and connect one SectionWithImage document */
  create?: InputMaybe<SectionWithImageCreateInput>;
};

export type SectionWithImageCreateWithPositionInput = {
  /** Document to create */
  data: SectionWithImageCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SectionWithImageEdge = {
  __typename?: 'SectionWithImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionWithImage;
};

/** Identifies documents */
export type SectionWithImageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  imagePosition?: InputMaybe<ImagePosition>;
  /** All values that are contained in given list. */
  imagePosition_in?: InputMaybe<Array<InputMaybe<ImagePosition>>>;
  /** All values that are not equal to given value. */
  imagePosition_not?: InputMaybe<ImagePosition>;
  /** All values that are not contained in given list. */
  imagePosition_not_in?: InputMaybe<Array<InputMaybe<ImagePosition>>>;
};

export enum SectionWithImageOrderByInput {
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImagePositionAsc = 'imagePosition_ASC',
  ImagePositionDesc = 'imagePosition_DESC'
}

export type SectionWithImageParent = Section;

export type SectionWithImageParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type SectionWithImageParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type SectionWithImageParentCreateManyInlineInput = {
  /** Connect multiple existing SectionWithImageParent documents */
  connect?: InputMaybe<Array<SectionWithImageParentWhereUniqueInput>>;
  /** Create and connect multiple existing SectionWithImageParent documents */
  create?: InputMaybe<Array<SectionWithImageParentCreateInput>>;
};

export type SectionWithImageParentCreateOneInlineInput = {
  /** Connect one existing SectionWithImageParent document */
  connect?: InputMaybe<SectionWithImageParentWhereUniqueInput>;
  /** Create and connect one SectionWithImageParent document */
  create?: InputMaybe<SectionWithImageParentCreateInput>;
};

export type SectionWithImageParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type SectionWithImageParentUpdateManyInlineInput = {
  /** Connect multiple existing SectionWithImageParent documents */
  connect?: InputMaybe<Array<SectionWithImageParentConnectInput>>;
  /** Create and connect multiple SectionWithImageParent documents */
  create?: InputMaybe<Array<SectionWithImageParentCreateInput>>;
  /** Delete multiple SectionWithImageParent documents */
  delete?: InputMaybe<Array<SectionWithImageParentWhereUniqueInput>>;
  /** Disconnect multiple SectionWithImageParent documents */
  disconnect?: InputMaybe<Array<SectionWithImageParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionWithImageParent documents */
  set?: InputMaybe<Array<SectionWithImageParentWhereUniqueInput>>;
  /** Update multiple SectionWithImageParent documents */
  update?: InputMaybe<Array<SectionWithImageParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionWithImageParent documents */
  upsert?: InputMaybe<Array<SectionWithImageParentUpsertWithNestedWhereUniqueInput>>;
};

export type SectionWithImageParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type SectionWithImageParentUpdateOneInlineInput = {
  /** Connect existing SectionWithImageParent document */
  connect?: InputMaybe<SectionWithImageParentWhereUniqueInput>;
  /** Create and connect one SectionWithImageParent document */
  create?: InputMaybe<SectionWithImageParentCreateInput>;
  /** Delete currently connected SectionWithImageParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionWithImageParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionWithImageParent document */
  update?: InputMaybe<SectionWithImageParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionWithImageParent document */
  upsert?: InputMaybe<SectionWithImageParentUpsertWithNestedWhereUniqueInput>;
};

export type SectionWithImageParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type SectionWithImageParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type SectionWithImageParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type SectionWithImageParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type SectionWithImageUpdateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  blocks?: InputMaybe<SectionWithImagessblocksUnionUpdateManyInlineInput>;
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  imagePosition?: InputMaybe<ImagePosition>;
  /** Manage document localizations */
  localizations?: InputMaybe<SectionWithImageUpdateLocalizationsInput>;
};

export type SectionWithImageUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionWithImageUpdateLocalizationInput = {
  data: SectionWithImageUpdateLocalizationDataInput;
  locale: Locale;
};

export type SectionWithImageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<SectionWithImageCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<SectionWithImageUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<SectionWithImageUpsertLocalizationInput>>;
};

export type SectionWithImageUpdateManyInlineInput = {
  /** Create and connect multiple SectionWithImage component instances */
  create?: InputMaybe<Array<SectionWithImageCreateWithPositionInput>>;
  /** Delete multiple SectionWithImage documents */
  delete?: InputMaybe<Array<SectionWithImageWhereUniqueInput>>;
  /** Update multiple SectionWithImage component instances */
  update?: InputMaybe<Array<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SectionWithImage component instances */
  upsert?: InputMaybe<Array<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SectionWithImageUpdateManyInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  imagePosition?: InputMaybe<ImagePosition>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<SectionWithImageUpdateManyLocalizationsInput>;
};

export type SectionWithImageUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionWithImageUpdateManyLocalizationInput = {
  data: SectionWithImageUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type SectionWithImageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<SectionWithImageUpdateManyLocalizationInput>>;
};

export type SectionWithImageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionWithImageUpdateManyInput;
  /** Document search */
  where: SectionWithImageWhereInput;
};

export type SectionWithImageUpdateOneInlineInput = {
  /** Create and connect one SectionWithImage document */
  create?: InputMaybe<SectionWithImageCreateInput>;
  /** Delete currently connected SectionWithImage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionWithImage document */
  update?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionWithImage document */
  upsert?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SectionWithImageUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SectionWithImageWhereUniqueInput;
};

export type SectionWithImageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionWithImageUpdateInput;
  /** Unique document search */
  where: SectionWithImageWhereUniqueInput;
};

export type SectionWithImageUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionWithImageCreateInput;
  /** Update document if it exists */
  update: SectionWithImageUpdateInput;
};

export type SectionWithImageUpsertLocalizationInput = {
  create: SectionWithImageCreateLocalizationDataInput;
  locale: Locale;
  update: SectionWithImageUpdateLocalizationDataInput;
};

export type SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SectionWithImageUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SectionWithImageWhereUniqueInput;
};

export type SectionWithImageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionWithImageUpsertInput;
  /** Unique document search */
  where: SectionWithImageWhereUniqueInput;
};

/** Identifies documents */
export type SectionWithImageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionWithImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  imagePosition?: InputMaybe<ImagePosition>;
  /** All values that are contained in given list. */
  imagePosition_in?: InputMaybe<Array<InputMaybe<ImagePosition>>>;
  /** All values that are not equal to given value. */
  imagePosition_not?: InputMaybe<ImagePosition>;
  /** All values that are not contained in given list. */
  imagePosition_not_in?: InputMaybe<Array<InputMaybe<ImagePosition>>>;
};

/** References SectionWithImage record uniquely */
export type SectionWithImageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionWithImagessblocksUnion = Accordion | CountUp | MultiColumn | Paragraph | Tab;

export type SectionWithImagessblocksUnionConnectInput = {
  Accordion?: InputMaybe<AccordionConnectInput>;
  CountUp?: InputMaybe<CountUpConnectInput>;
  MultiColumn?: InputMaybe<MultiColumnConnectInput>;
  Paragraph?: InputMaybe<ParagraphConnectInput>;
  Tab?: InputMaybe<TabConnectInput>;
};

export type SectionWithImagessblocksUnionCreateInput = {
  Accordion?: InputMaybe<AccordionCreateInput>;
  CountUp?: InputMaybe<CountUpCreateInput>;
  MultiColumn?: InputMaybe<MultiColumnCreateInput>;
  Paragraph?: InputMaybe<ParagraphCreateInput>;
  Tab?: InputMaybe<TabCreateInput>;
};

export type SectionWithImagessblocksUnionCreateManyInlineInput = {
  /** Create and connect multiple existing SectionWithImagessblocksUnion documents */
  create?: InputMaybe<Array<SectionWithImagessblocksUnionCreateInput>>;
};

export type SectionWithImagessblocksUnionCreateOneInlineInput = {
  /** Create and connect one SectionWithImagessblocksUnion document */
  create?: InputMaybe<SectionWithImagessblocksUnionCreateInput>;
};

export type SectionWithImagessblocksUnionCreateWithPositionInput = {
  Accordion?: InputMaybe<AccordionCreateWithPositionInput>;
  CountUp?: InputMaybe<CountUpCreateWithPositionInput>;
  MultiColumn?: InputMaybe<MultiColumnCreateWithPositionInput>;
  Paragraph?: InputMaybe<ParagraphCreateWithPositionInput>;
  Tab?: InputMaybe<TabCreateWithPositionInput>;
};

export type SectionWithImagessblocksUnionUpdateInput = {
  Accordion?: InputMaybe<AccordionUpdateInput>;
  CountUp?: InputMaybe<CountUpUpdateInput>;
  MultiColumn?: InputMaybe<MultiColumnUpdateInput>;
  Paragraph?: InputMaybe<ParagraphUpdateInput>;
  Tab?: InputMaybe<TabUpdateInput>;
};

export type SectionWithImagessblocksUnionUpdateManyInlineInput = {
  /** Create and connect multiple SectionWithImagessblocksUnion component instances */
  create?: InputMaybe<Array<SectionWithImagessblocksUnionCreateWithPositionInput>>;
  /** Delete multiple SectionWithImagessblocksUnion documents */
  delete?: InputMaybe<Array<SectionWithImagessblocksUnionWhereUniqueInput>>;
  /** Update multiple SectionWithImagessblocksUnion component instances */
  update?: InputMaybe<Array<SectionWithImagessblocksUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SectionWithImagessblocksUnion component instances */
  upsert?: InputMaybe<Array<SectionWithImagessblocksUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SectionWithImagessblocksUnionUpdateManyWithNestedWhereInput = {
  Accordion?: InputMaybe<AccordionUpdateManyWithNestedWhereInput>;
  CountUp?: InputMaybe<CountUpUpdateManyWithNestedWhereInput>;
  MultiColumn?: InputMaybe<MultiColumnUpdateManyWithNestedWhereInput>;
  Paragraph?: InputMaybe<ParagraphUpdateManyWithNestedWhereInput>;
  Tab?: InputMaybe<TabUpdateManyWithNestedWhereInput>;
};

export type SectionWithImagessblocksUnionUpdateOneInlineInput = {
  /** Create and connect one SectionWithImagessblocksUnion document */
  create?: InputMaybe<SectionWithImagessblocksUnionCreateInput>;
  /** Delete currently connected SectionWithImagessblocksUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionWithImagessblocksUnion document */
  update?: InputMaybe<SectionWithImagessblocksUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionWithImagessblocksUnion document */
  upsert?: InputMaybe<SectionWithImagessblocksUnionUpsertWithNestedWhereUniqueInput>;
};

export type SectionWithImagessblocksUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueAndPositionInput>;
  CountUp?: InputMaybe<CountUpUpdateWithNestedWhereUniqueAndPositionInput>;
  MultiColumn?: InputMaybe<MultiColumnUpdateWithNestedWhereUniqueAndPositionInput>;
  Paragraph?: InputMaybe<ParagraphUpdateWithNestedWhereUniqueAndPositionInput>;
  Tab?: InputMaybe<TabUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type SectionWithImagessblocksUnionUpdateWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpdateWithNestedWhereUniqueInput>;
  CountUp?: InputMaybe<CountUpUpdateWithNestedWhereUniqueInput>;
  MultiColumn?: InputMaybe<MultiColumnUpdateWithNestedWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphUpdateWithNestedWhereUniqueInput>;
  Tab?: InputMaybe<TabUpdateWithNestedWhereUniqueInput>;
};

export type SectionWithImagessblocksUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueAndPositionInput>;
  CountUp?: InputMaybe<CountUpUpsertWithNestedWhereUniqueAndPositionInput>;
  MultiColumn?: InputMaybe<MultiColumnUpsertWithNestedWhereUniqueAndPositionInput>;
  Paragraph?: InputMaybe<ParagraphUpsertWithNestedWhereUniqueAndPositionInput>;
  Tab?: InputMaybe<TabUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type SectionWithImagessblocksUnionUpsertWithNestedWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionUpsertWithNestedWhereUniqueInput>;
  CountUp?: InputMaybe<CountUpUpsertWithNestedWhereUniqueInput>;
  MultiColumn?: InputMaybe<MultiColumnUpsertWithNestedWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphUpsertWithNestedWhereUniqueInput>;
  Tab?: InputMaybe<TabUpsertWithNestedWhereUniqueInput>;
};

export type SectionWithImagessblocksUnionWhereInput = {
  Accordion?: InputMaybe<AccordionWhereInput>;
  CountUp?: InputMaybe<CountUpWhereInput>;
  MultiColumn?: InputMaybe<MultiColumnWhereInput>;
  Paragraph?: InputMaybe<ParagraphWhereInput>;
  Tab?: InputMaybe<TabWhereInput>;
};

export type SectionWithImagessblocksUnionWhereUniqueInput = {
  Accordion?: InputMaybe<AccordionWhereUniqueInput>;
  CountUp?: InputMaybe<CountUpWhereUniqueInput>;
  MultiColumn?: InputMaybe<MultiColumnWhereUniqueInput>;
  Paragraph?: InputMaybe<ParagraphWhereUniqueInput>;
  Tab?: InputMaybe<TabWhereUniqueInput>;
};

export type SectioncomponentUnion = CollaboratorSection | PageRichTextContent | ProjectSection | SectionWithImage | ServiceSection | TeamSection | TestimonialSection;

export type SectioncomponentUnionConnectInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionConnectInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentConnectInput>;
  ProjectSection?: InputMaybe<ProjectSectionConnectInput>;
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
  ServiceSection?: InputMaybe<ServiceSectionConnectInput>;
  TeamSection?: InputMaybe<TeamSectionConnectInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionConnectInput>;
};

export type SectioncomponentUnionCreateInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionCreateInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentCreateInput>;
  ProjectSection?: InputMaybe<ProjectSectionCreateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
  ServiceSection?: InputMaybe<ServiceSectionCreateInput>;
  TeamSection?: InputMaybe<TeamSectionCreateInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionCreateInput>;
};

export type SectioncomponentUnionCreateManyInlineInput = {
  /** Create and connect multiple existing SectioncomponentUnion documents */
  create?: InputMaybe<Array<SectioncomponentUnionCreateInput>>;
};

export type SectioncomponentUnionCreateOneInlineInput = {
  /** Create and connect one SectioncomponentUnion document */
  create?: InputMaybe<SectioncomponentUnionCreateInput>;
};

export type SectioncomponentUnionCreateWithPositionInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionCreateWithPositionInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentCreateWithPositionInput>;
  ProjectSection?: InputMaybe<ProjectSectionCreateWithPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
  ServiceSection?: InputMaybe<ServiceSectionCreateWithPositionInput>;
  TeamSection?: InputMaybe<TeamSectionCreateWithPositionInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionCreateWithPositionInput>;
};

export type SectioncomponentUnionUpdateInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpdateInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpdateInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpdateInput>;
};

export type SectioncomponentUnionUpdateManyInlineInput = {
  /** Create and connect multiple SectioncomponentUnion component instances */
  create?: InputMaybe<Array<SectioncomponentUnionCreateWithPositionInput>>;
  /** Delete multiple SectioncomponentUnion documents */
  delete?: InputMaybe<Array<SectioncomponentUnionWhereUniqueInput>>;
  /** Update multiple SectioncomponentUnion component instances */
  update?: InputMaybe<Array<SectioncomponentUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SectioncomponentUnion component instances */
  upsert?: InputMaybe<Array<SectioncomponentUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SectioncomponentUnionUpdateManyWithNestedWhereInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpdateManyWithNestedWhereInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpdateManyWithNestedWhereInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateManyWithNestedWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateManyWithNestedWhereInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateManyWithNestedWhereInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpdateManyWithNestedWhereInput>;
};

export type SectioncomponentUnionUpdateOneInlineInput = {
  /** Create and connect one SectioncomponentUnion document */
  create?: InputMaybe<SectioncomponentUnionCreateInput>;
  /** Delete currently connected SectioncomponentUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectioncomponentUnion document */
  update?: InputMaybe<SectioncomponentUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectioncomponentUnion document */
  upsert?: InputMaybe<SectioncomponentUnionUpsertWithNestedWhereUniqueInput>;
};

export type SectioncomponentUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpdateWithNestedWhereUniqueAndPositionInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpdateWithNestedWhereUniqueAndPositionInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateWithNestedWhereUniqueAndPositionInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateWithNestedWhereUniqueAndPositionInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type SectioncomponentUnionUpdateWithNestedWhereUniqueInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpdateWithNestedWhereUniqueInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpdateWithNestedWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpdateWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpdateWithNestedWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionUpdateWithNestedWhereUniqueInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpdateWithNestedWhereUniqueInput>;
};

export type SectioncomponentUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpsertWithNestedWhereUniqueAndPositionInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpsertWithNestedWhereUniqueAndPositionInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpsertWithNestedWhereUniqueAndPositionInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpsertWithNestedWhereUniqueAndPositionInput>;
  TeamSection?: InputMaybe<TeamSectionUpsertWithNestedWhereUniqueAndPositionInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type SectioncomponentUnionUpsertWithNestedWhereUniqueInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionUpsertWithNestedWhereUniqueInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentUpsertWithNestedWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionUpsertWithNestedWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionUpsertWithNestedWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionUpsertWithNestedWhereUniqueInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionUpsertWithNestedWhereUniqueInput>;
};

export type SectioncomponentUnionWhereInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionWhereInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentWhereInput>;
  ProjectSection?: InputMaybe<ProjectSectionWhereInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
  ServiceSection?: InputMaybe<ServiceSectionWhereInput>;
  TeamSection?: InputMaybe<TeamSectionWhereInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionWhereInput>;
};

export type SectioncomponentUnionWhereUniqueInput = {
  CollaboratorSection?: InputMaybe<CollaboratorSectionWhereUniqueInput>;
  PageRichTextContent?: InputMaybe<PageRichTextContentWhereUniqueInput>;
  ProjectSection?: InputMaybe<ProjectSectionWhereUniqueInput>;
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
  ServiceSection?: InputMaybe<ServiceSectionWhereUniqueInput>;
  TeamSection?: InputMaybe<TeamSectionWhereUniqueInput>;
  TestimonialSection?: InputMaybe<TestimonialSectionWhereUniqueInput>;
};

/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type Seo = Node & {
  __typename?: 'Seo';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** This is important for referencing. The more useful keywords are in this description the more change the page has to be found on search engines */
  description: Scalars['String'];
  /** Get the document in other stages */
  documentInStages: Array<Seo>;
  /** List of Seo versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** This image will be shown when someone shares the page. */
  image?: Maybe<Asset>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Seo>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** This represents the title shown on the tab bar in the navigator when a page is opened */
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** This model is important for search engine optimization. And should be added to all pages to optimize referenciation on search engines like google or Mozilla */
export type SeoUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type SeoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SeoWhereUniqueInput;
};

/** A connection to a list of items. */
export type SeoConnection = {
  __typename?: 'SeoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SeoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SeoCreateInput = {
  cl73dx15k3a0a01uh09453f7e?: InputMaybe<PageCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description: Scalars['String'];
  image?: InputMaybe<AssetCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<SeoCreateLocalizationsInput>;
  /** title input for default locale (en) */
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SeoCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SeoCreateLocalizationInput = {
  /** Localization input */
  data: SeoCreateLocalizationDataInput;
  locale: Locale;
};

export type SeoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<SeoCreateLocalizationInput>>;
};

export type SeoCreateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Create and connect multiple existing Seo documents */
  create?: InputMaybe<Array<SeoCreateInput>>;
};

export type SeoCreateOneInlineInput = {
  /** Connect one existing Seo document */
  connect?: InputMaybe<SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<SeoCreateInput>;
};

/** An edge in a connection. */
export type SeoEdge = {
  __typename?: 'SeoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Seo;
};

/** Identifies documents */
export type SeoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SeoWhereStageInput>;
  documentInStages_none?: InputMaybe<SeoWhereStageInput>;
  documentInStages_some?: InputMaybe<SeoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SeoOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SeoUpdateInput = {
  cl73dx15k3a0a01uh09453f7e?: InputMaybe<PageUpdateManyInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<SeoUpdateLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
};

export type SeoUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type SeoUpdateLocalizationInput = {
  data: SeoUpdateLocalizationDataInput;
  locale: Locale;
};

export type SeoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<SeoCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<SeoUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<SeoUpsertLocalizationInput>>;
};

export type SeoUpdateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<SeoConnectInput>>;
  /** Create and connect multiple Seo documents */
  create?: InputMaybe<Array<SeoCreateInput>>;
  /** Delete multiple Seo documents */
  delete?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Disconnect multiple Seo documents */
  disconnect?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Seo documents */
  set?: InputMaybe<Array<SeoWhereUniqueInput>>;
  /** Update multiple Seo documents */
  update?: InputMaybe<Array<SeoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Seo documents */
  upsert?: InputMaybe<Array<SeoUpsertWithNestedWhereUniqueInput>>;
};

export type SeoUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<SeoUpdateManyLocalizationsInput>;
};

export type SeoUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
};

export type SeoUpdateManyLocalizationInput = {
  data: SeoUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type SeoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<SeoUpdateManyLocalizationInput>>;
};

export type SeoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SeoUpdateManyInput;
  /** Document search */
  where: SeoWhereInput;
};

export type SeoUpdateOneInlineInput = {
  /** Connect existing Seo document */
  connect?: InputMaybe<SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<SeoCreateInput>;
  /** Delete currently connected Seo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Seo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Seo document */
  update?: InputMaybe<SeoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Seo document */
  upsert?: InputMaybe<SeoUpsertWithNestedWhereUniqueInput>;
};

export type SeoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SeoUpdateInput;
  /** Unique document search */
  where: SeoWhereUniqueInput;
};

export type SeoUpsertInput = {
  /** Create document if it didn't exist */
  create: SeoCreateInput;
  /** Update document if it exists */
  update: SeoUpdateInput;
};

export type SeoUpsertLocalizationInput = {
  create: SeoCreateLocalizationDataInput;
  locale: Locale;
  update: SeoUpdateLocalizationDataInput;
};

export type SeoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SeoUpsertInput;
  /** Unique document search */
  where: SeoWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SeoWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SeoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<SeoWhereStageInput>;
  documentInStages_none?: InputMaybe<SeoWhereStageInput>;
  documentInStages_some?: InputMaybe<SeoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SeoWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SeoWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SeoWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SeoWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SeoWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Seo record uniquely */
export type SeoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Service = Node & {
  __typename?: 'Service';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  /** Get the document in other stages */
  documentInStages: Array<Service>;
  /** List of Service versions */
  history: Array<Version>;
  /** go to this link to find icons you want to use https://react-icons.github.io/react-icons/ */
  icon?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Service>;
  name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ServiceCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ServiceCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ServiceDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ServiceHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ServiceImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ServiceLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type ServicePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ServicePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ServiceScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ServiceUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type ServiceUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ServiceConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ServiceWhereUniqueInput;
};

/** A connection to a list of items. */
export type ServiceConnection = {
  __typename?: 'ServiceConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ServiceEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ServiceCreateInput = {
  cl86gt6k01l7r01t37ipaewdx?: InputMaybe<ServiceSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** description input for default locale (en) */
  description: Scalars['String'];
  icon?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ServiceCreateLocalizationsInput>;
  /** name input for default locale (en) */
  name: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ServiceCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  name: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ServiceCreateLocalizationInput = {
  /** Localization input */
  data: ServiceCreateLocalizationDataInput;
  locale: Locale;
};

export type ServiceCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ServiceCreateLocalizationInput>>;
};

export type ServiceCreateManyInlineInput = {
  /** Connect multiple existing Service documents */
  connect?: InputMaybe<Array<ServiceWhereUniqueInput>>;
  /** Create and connect multiple existing Service documents */
  create?: InputMaybe<Array<ServiceCreateInput>>;
};

export type ServiceCreateOneInlineInput = {
  /** Connect one existing Service document */
  connect?: InputMaybe<ServiceWhereUniqueInput>;
  /** Create and connect one Service document */
  create?: InputMaybe<ServiceCreateInput>;
};

/** An edge in a connection. */
export type ServiceEdge = {
  __typename?: 'ServiceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Service;
};

/** Identifies documents */
export type ServiceManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ServiceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ServiceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ServiceWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ServiceWhereStageInput>;
  documentInStages_none?: InputMaybe<ServiceWhereStageInput>;
  documentInStages_some?: InputMaybe<ServiceWhereStageInput>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ServiceOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IconAsc = 'icon_ASC',
  IconDesc = 'icon_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ServiceSection = {
  __typename?: 'ServiceSection';
  backgroundColor?: Maybe<BackgroundColorVariant>;
  cta?: Maybe<Button>;
  headline: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<ServiceSection>;
  services: Array<Service>;
  /** System stage field */
  stage: Stage;
};


export type ServiceSectionCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ServiceSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type ServiceSectionServicesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ServiceOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ServiceWhereInput>;
};

export type ServiceSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ServiceSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type ServiceSectionConnection = {
  __typename?: 'ServiceSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ServiceSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ServiceSectionCreateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cta?: InputMaybe<ButtonCreateOneInlineInput>;
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<ServiceSectionCreateLocalizationsInput>;
  services?: InputMaybe<ServiceCreateManyInlineInput>;
};

export type ServiceSectionCreateLocalizationDataInput = {
  headline: Scalars['String'];
};

export type ServiceSectionCreateLocalizationInput = {
  /** Localization input */
  data: ServiceSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type ServiceSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<ServiceSectionCreateLocalizationInput>>;
};

export type ServiceSectionCreateManyInlineInput = {
  /** Create and connect multiple existing ServiceSection documents */
  create?: InputMaybe<Array<ServiceSectionCreateInput>>;
};

export type ServiceSectionCreateOneInlineInput = {
  /** Create and connect one ServiceSection document */
  create?: InputMaybe<ServiceSectionCreateInput>;
};

export type ServiceSectionCreateWithPositionInput = {
  /** Document to create */
  data: ServiceSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ServiceSectionEdge = {
  __typename?: 'ServiceSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ServiceSection;
};

/** Identifies documents */
export type ServiceSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  services_every?: InputMaybe<ServiceWhereInput>;
  services_none?: InputMaybe<ServiceWhereInput>;
  services_some?: InputMaybe<ServiceWhereInput>;
};

export enum ServiceSectionOrderByInput {
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ServiceSectionParent = Section;

export type ServiceSectionParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type ServiceSectionParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type ServiceSectionParentCreateManyInlineInput = {
  /** Connect multiple existing ServiceSectionParent documents */
  connect?: InputMaybe<Array<ServiceSectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing ServiceSectionParent documents */
  create?: InputMaybe<Array<ServiceSectionParentCreateInput>>;
};

export type ServiceSectionParentCreateOneInlineInput = {
  /** Connect one existing ServiceSectionParent document */
  connect?: InputMaybe<ServiceSectionParentWhereUniqueInput>;
  /** Create and connect one ServiceSectionParent document */
  create?: InputMaybe<ServiceSectionParentCreateInput>;
};

export type ServiceSectionParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type ServiceSectionParentUpdateManyInlineInput = {
  /** Connect multiple existing ServiceSectionParent documents */
  connect?: InputMaybe<Array<ServiceSectionParentConnectInput>>;
  /** Create and connect multiple ServiceSectionParent documents */
  create?: InputMaybe<Array<ServiceSectionParentCreateInput>>;
  /** Delete multiple ServiceSectionParent documents */
  delete?: InputMaybe<Array<ServiceSectionParentWhereUniqueInput>>;
  /** Disconnect multiple ServiceSectionParent documents */
  disconnect?: InputMaybe<Array<ServiceSectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ServiceSectionParent documents */
  set?: InputMaybe<Array<ServiceSectionParentWhereUniqueInput>>;
  /** Update multiple ServiceSectionParent documents */
  update?: InputMaybe<Array<ServiceSectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ServiceSectionParent documents */
  upsert?: InputMaybe<Array<ServiceSectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type ServiceSectionParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type ServiceSectionParentUpdateOneInlineInput = {
  /** Connect existing ServiceSectionParent document */
  connect?: InputMaybe<ServiceSectionParentWhereUniqueInput>;
  /** Create and connect one ServiceSectionParent document */
  create?: InputMaybe<ServiceSectionParentCreateInput>;
  /** Delete currently connected ServiceSectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ServiceSectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ServiceSectionParent document */
  update?: InputMaybe<ServiceSectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ServiceSectionParent document */
  upsert?: InputMaybe<ServiceSectionParentUpsertWithNestedWhereUniqueInput>;
};

export type ServiceSectionParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type ServiceSectionParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type ServiceSectionParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type ServiceSectionParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type ServiceSectionUpdateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<ServiceSectionUpdateLocalizationsInput>;
  services?: InputMaybe<ServiceUpdateManyInlineInput>;
};

export type ServiceSectionUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type ServiceSectionUpdateLocalizationInput = {
  data: ServiceSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type ServiceSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ServiceSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ServiceSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ServiceSectionUpsertLocalizationInput>>;
};

export type ServiceSectionUpdateManyInlineInput = {
  /** Create and connect multiple ServiceSection component instances */
  create?: InputMaybe<Array<ServiceSectionCreateWithPositionInput>>;
  /** Delete multiple ServiceSection documents */
  delete?: InputMaybe<Array<ServiceSectionWhereUniqueInput>>;
  /** Update multiple ServiceSection component instances */
  update?: InputMaybe<Array<ServiceSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ServiceSection component instances */
  upsert?: InputMaybe<Array<ServiceSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ServiceSectionUpdateManyInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<ServiceSectionUpdateManyLocalizationsInput>;
};

export type ServiceSectionUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type ServiceSectionUpdateManyLocalizationInput = {
  data: ServiceSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ServiceSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ServiceSectionUpdateManyLocalizationInput>>;
};

export type ServiceSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ServiceSectionUpdateManyInput;
  /** Document search */
  where: ServiceSectionWhereInput;
};

export type ServiceSectionUpdateOneInlineInput = {
  /** Create and connect one ServiceSection document */
  create?: InputMaybe<ServiceSectionCreateInput>;
  /** Delete currently connected ServiceSection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ServiceSection document */
  update?: InputMaybe<ServiceSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ServiceSection document */
  upsert?: InputMaybe<ServiceSectionUpsertWithNestedWhereUniqueInput>;
};

export type ServiceSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ServiceSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ServiceSectionWhereUniqueInput;
};

export type ServiceSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ServiceSectionUpdateInput;
  /** Unique document search */
  where: ServiceSectionWhereUniqueInput;
};

export type ServiceSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: ServiceSectionCreateInput;
  /** Update document if it exists */
  update: ServiceSectionUpdateInput;
};

export type ServiceSectionUpsertLocalizationInput = {
  create: ServiceSectionCreateLocalizationDataInput;
  locale: Locale;
  update: ServiceSectionUpdateLocalizationDataInput;
};

export type ServiceSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ServiceSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ServiceSectionWhereUniqueInput;
};

export type ServiceSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ServiceSectionUpsertInput;
  /** Unique document search */
  where: ServiceSectionWhereUniqueInput;
};

/** Identifies documents */
export type ServiceSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ServiceSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  services_every?: InputMaybe<ServiceWhereInput>;
  services_none?: InputMaybe<ServiceWhereInput>;
  services_some?: InputMaybe<ServiceWhereInput>;
};

/** References ServiceSection record uniquely */
export type ServiceSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ServiceUpdateInput = {
  cl86gt6k01l7r01t37ipaewdx?: InputMaybe<ServiceSectionUpdateManyInlineInput>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<ServiceUpdateLocalizationsInput>;
  /** name input for default locale (en) */
  name?: InputMaybe<Scalars['String']>;
};

export type ServiceUpdateLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type ServiceUpdateLocalizationInput = {
  data: ServiceUpdateLocalizationDataInput;
  locale: Locale;
};

export type ServiceUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<ServiceCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<ServiceUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<ServiceUpsertLocalizationInput>>;
};

export type ServiceUpdateManyInlineInput = {
  /** Connect multiple existing Service documents */
  connect?: InputMaybe<Array<ServiceConnectInput>>;
  /** Create and connect multiple Service documents */
  create?: InputMaybe<Array<ServiceCreateInput>>;
  /** Delete multiple Service documents */
  delete?: InputMaybe<Array<ServiceWhereUniqueInput>>;
  /** Disconnect multiple Service documents */
  disconnect?: InputMaybe<Array<ServiceWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Service documents */
  set?: InputMaybe<Array<ServiceWhereUniqueInput>>;
  /** Update multiple Service documents */
  update?: InputMaybe<Array<ServiceUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Service documents */
  upsert?: InputMaybe<Array<ServiceUpsertWithNestedWhereUniqueInput>>;
};

export type ServiceUpdateManyInput = {
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<ServiceUpdateManyLocalizationsInput>;
};

export type ServiceUpdateManyLocalizationDataInput = {
  description?: InputMaybe<Scalars['String']>;
};

export type ServiceUpdateManyLocalizationInput = {
  data: ServiceUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type ServiceUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<ServiceUpdateManyLocalizationInput>>;
};

export type ServiceUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ServiceUpdateManyInput;
  /** Document search */
  where: ServiceWhereInput;
};

export type ServiceUpdateOneInlineInput = {
  /** Connect existing Service document */
  connect?: InputMaybe<ServiceWhereUniqueInput>;
  /** Create and connect one Service document */
  create?: InputMaybe<ServiceCreateInput>;
  /** Delete currently connected Service document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Service document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Service document */
  update?: InputMaybe<ServiceUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Service document */
  upsert?: InputMaybe<ServiceUpsertWithNestedWhereUniqueInput>;
};

export type ServiceUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ServiceUpdateInput;
  /** Unique document search */
  where: ServiceWhereUniqueInput;
};

export type ServiceUpsertInput = {
  /** Create document if it didn't exist */
  create: ServiceCreateInput;
  /** Update document if it exists */
  update: ServiceUpdateInput;
};

export type ServiceUpsertLocalizationInput = {
  create: ServiceCreateLocalizationDataInput;
  locale: Locale;
  update: ServiceUpdateLocalizationDataInput;
};

export type ServiceUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ServiceUpsertInput;
  /** Unique document search */
  where: ServiceWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ServiceWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ServiceWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ServiceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ServiceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ServiceWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<ServiceWhereStageInput>;
  documentInStages_none?: InputMaybe<ServiceWhereStageInput>;
  documentInStages_some?: InputMaybe<ServiceWhereStageInput>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ServiceWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ServiceWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ServiceWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ServiceWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ServiceWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Service record uniquely */
export type ServiceWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Models information about a specific social media. */
export type SocialHandle = Node & {
  __typename?: 'SocialHandle';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SocialHandle>;
  /** List of SocialHandle versions */
  history: Array<Version>;
  icon: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  url: Scalars['String'];
};


/** Models information about a specific social media. */
export type SocialHandleCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Models information about a specific social media. */
export type SocialHandleDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Models information about a specific social media. */
export type SocialHandleHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Models information about a specific social media. */
export type SocialHandlePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Models information about a specific social media. */
export type SocialHandleScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Models information about a specific social media. */
export type SocialHandleUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type SocialHandleConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SocialHandleWhereUniqueInput;
};

/** A connection to a list of items. */
export type SocialHandleConnection = {
  __typename?: 'SocialHandleConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SocialHandleEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SocialHandleCreateInput = {
  cl8fvfusn3z4x01ul38uw0qao?: InputMaybe<AssociationDetailsCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  icon: Scalars['String'];
  label: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  url: Scalars['String'];
};

export type SocialHandleCreateManyInlineInput = {
  /** Connect multiple existing SocialHandle documents */
  connect?: InputMaybe<Array<SocialHandleWhereUniqueInput>>;
  /** Create and connect multiple existing SocialHandle documents */
  create?: InputMaybe<Array<SocialHandleCreateInput>>;
};

export type SocialHandleCreateOneInlineInput = {
  /** Connect one existing SocialHandle document */
  connect?: InputMaybe<SocialHandleWhereUniqueInput>;
  /** Create and connect one SocialHandle document */
  create?: InputMaybe<SocialHandleCreateInput>;
};

/** An edge in a connection. */
export type SocialHandleEdge = {
  __typename?: 'SocialHandleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SocialHandle;
};

/** Identifies documents */
export type SocialHandleManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SocialHandleWhereStageInput>;
  documentInStages_none?: InputMaybe<SocialHandleWhereStageInput>;
  documentInStages_some?: InputMaybe<SocialHandleWhereStageInput>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum SocialHandleOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IconAsc = 'icon_ASC',
  IconDesc = 'icon_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type SocialHandleUpdateInput = {
  cl8fvfusn3z4x01ul38uw0qao?: InputMaybe<AssociationDetailsUpdateManyInlineInput>;
  icon?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type SocialHandleUpdateManyInlineInput = {
  /** Connect multiple existing SocialHandle documents */
  connect?: InputMaybe<Array<SocialHandleConnectInput>>;
  /** Create and connect multiple SocialHandle documents */
  create?: InputMaybe<Array<SocialHandleCreateInput>>;
  /** Delete multiple SocialHandle documents */
  delete?: InputMaybe<Array<SocialHandleWhereUniqueInput>>;
  /** Disconnect multiple SocialHandle documents */
  disconnect?: InputMaybe<Array<SocialHandleWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SocialHandle documents */
  set?: InputMaybe<Array<SocialHandleWhereUniqueInput>>;
  /** Update multiple SocialHandle documents */
  update?: InputMaybe<Array<SocialHandleUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SocialHandle documents */
  upsert?: InputMaybe<Array<SocialHandleUpsertWithNestedWhereUniqueInput>>;
};

export type SocialHandleUpdateManyInput = {
  icon?: InputMaybe<Scalars['String']>;
};

export type SocialHandleUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SocialHandleUpdateManyInput;
  /** Document search */
  where: SocialHandleWhereInput;
};

export type SocialHandleUpdateOneInlineInput = {
  /** Connect existing SocialHandle document */
  connect?: InputMaybe<SocialHandleWhereUniqueInput>;
  /** Create and connect one SocialHandle document */
  create?: InputMaybe<SocialHandleCreateInput>;
  /** Delete currently connected SocialHandle document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SocialHandle document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SocialHandle document */
  update?: InputMaybe<SocialHandleUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialHandle document */
  upsert?: InputMaybe<SocialHandleUpsertWithNestedWhereUniqueInput>;
};

export type SocialHandleUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SocialHandleUpdateInput;
  /** Unique document search */
  where: SocialHandleWhereUniqueInput;
};

export type SocialHandleUpsertInput = {
  /** Create document if it didn't exist */
  create: SocialHandleCreateInput;
  /** Update document if it exists */
  update: SocialHandleUpdateInput;
};

export type SocialHandleUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SocialHandleUpsertInput;
  /** Unique document search */
  where: SocialHandleWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SocialHandleWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SocialHandleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialHandleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SocialHandleWhereStageInput>;
  documentInStages_none?: InputMaybe<SocialHandleWhereStageInput>;
  documentInStages_some?: InputMaybe<SocialHandleWhereStageInput>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SocialHandleWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialHandleWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialHandleWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialHandleWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SocialHandleWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SocialHandle record uniquely */
export type SocialHandleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type SocialNetworksHandle = {
  __typename?: 'SocialNetworksHandle';
  icon: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label: Scalars['String'];
  /** System stage field */
  stage: Stage;
  url: Scalars['String'];
};

/** A connection to a list of items. */
export type SocialNetworksHandleConnection = {
  __typename?: 'SocialNetworksHandleConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SocialNetworksHandleEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SocialNetworksHandleCreateInput = {
  icon: Scalars['String'];
  label: Scalars['String'];
  url: Scalars['String'];
};

export type SocialNetworksHandleCreateWithPositionInput = {
  /** Document to create */
  data: SocialNetworksHandleCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SocialNetworksHandleEdge = {
  __typename?: 'SocialNetworksHandleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SocialNetworksHandle;
};

/** Identifies documents */
export type SocialNetworksHandleManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum SocialNetworksHandleOrderByInput {
  IconAsc = 'icon_ASC',
  IconDesc = 'icon_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type SocialNetworksHandleUpdateInput = {
  icon?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type SocialNetworksHandleUpdateManyInput = {
  icon?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
};

export type SocialNetworksHandleUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SocialNetworksHandleUpdateManyInput;
  /** Document search */
  where: SocialNetworksHandleWhereInput;
};

export type SocialNetworksHandleUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SocialNetworksHandleUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialNetworksHandleWhereUniqueInput;
};

export type SocialNetworksHandleUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SocialNetworksHandleUpdateInput;
  /** Unique document search */
  where: SocialNetworksHandleWhereUniqueInput;
};

export type SocialNetworksHandleUpsertInput = {
  /** Create document if it didn't exist */
  create: SocialNetworksHandleCreateInput;
  /** Update document if it exists */
  update: SocialNetworksHandleUpdateInput;
};

export type SocialNetworksHandleUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SocialNetworksHandleUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialNetworksHandleWhereUniqueInput;
};

export type SocialNetworksHandleUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SocialNetworksHandleUpsertInput;
  /** Unique document search */
  where: SocialNetworksHandleWhereUniqueInput;
};

/** Identifies documents */
export type SocialNetworksHandleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialNetworksHandleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  icon_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  icon_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  icon_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  icon_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  icon_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  icon_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  icon_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  icon_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  icon_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References SocialNetworksHandle record uniquely */
export type SocialNetworksHandleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export type Style = {
  __typename?: 'Style';
  className: Array<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  marginBottom?: Maybe<Scalars['Int']>;
  marginTop?: Maybe<Scalars['Int']>;
  /** System stage field */
  stage: Stage;
};

/** A connection to a list of items. */
export type StyleConnection = {
  __typename?: 'StyleConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<StyleEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type StyleCreateInput = {
  className?: InputMaybe<Array<Scalars['String']>>;
  marginBottom?: InputMaybe<Scalars['Int']>;
  marginTop?: InputMaybe<Scalars['Int']>;
};

export type StyleCreateWithPositionInput = {
  /** Document to create */
  data: StyleCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type StyleEdge = {
  __typename?: 'StyleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Style;
};

/** Identifies documents */
export type StyleManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<StyleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<StyleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<StyleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  className?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  className_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  className_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  className_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  className_not?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  marginBottom?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  marginBottom_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  marginBottom_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  marginBottom_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  marginBottom_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  marginBottom_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  marginBottom_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  marginBottom_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  marginTop?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  marginTop_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  marginTop_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  marginTop_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  marginTop_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  marginTop_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  marginTop_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  marginTop_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export enum StyleOrderByInput {
  ClassNameAsc = 'className_ASC',
  ClassNameDesc = 'className_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MarginBottomAsc = 'marginBottom_ASC',
  MarginBottomDesc = 'marginBottom_DESC',
  MarginTopAsc = 'marginTop_ASC',
  MarginTopDesc = 'marginTop_DESC'
}

export type StyleUpdateInput = {
  className?: InputMaybe<Array<Scalars['String']>>;
  marginBottom?: InputMaybe<Scalars['Int']>;
  marginTop?: InputMaybe<Scalars['Int']>;
};

export type StyleUpdateManyInput = {
  className?: InputMaybe<Array<Scalars['String']>>;
  marginBottom?: InputMaybe<Scalars['Int']>;
  marginTop?: InputMaybe<Scalars['Int']>;
};

export type StyleUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: StyleUpdateManyInput;
  /** Document search */
  where: StyleWhereInput;
};

export type StyleUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<StyleUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: StyleWhereUniqueInput;
};

export type StyleUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: StyleUpdateInput;
  /** Unique document search */
  where: StyleWhereUniqueInput;
};

export type StyleUpsertInput = {
  /** Create document if it didn't exist */
  create: StyleCreateInput;
  /** Update document if it exists */
  update: StyleUpdateInput;
};

export type StyleUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<StyleUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: StyleWhereUniqueInput;
};

export type StyleUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: StyleUpsertInput;
  /** Unique document search */
  where: StyleWhereUniqueInput;
};

/** Identifies documents */
export type StyleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<StyleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<StyleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<StyleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  className?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  className_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  className_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  className_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  className_not?: InputMaybe<Array<Scalars['String']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  marginBottom?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  marginBottom_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  marginBottom_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  marginBottom_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  marginBottom_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  marginBottom_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  marginBottom_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  marginBottom_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  marginTop?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  marginTop_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  marginTop_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  marginTop_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  marginTop_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  marginTop_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  marginTop_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  marginTop_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

/** References Style record uniquely */
export type StyleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Submission = Node & {
  __typename?: 'Submission';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Submission>;
  form?: Maybe<Form>;
  formData: Scalars['Json'];
  /** List of Submission versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  isValid?: Maybe<Scalars['Boolean']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SubmissionCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SubmissionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SubmissionFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SubmissionHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SubmissionPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type SubmissionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SubmissionUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type SubmissionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SubmissionWhereUniqueInput;
};

/** A connection to a list of items. */
export type SubmissionConnection = {
  __typename?: 'SubmissionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SubmissionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SubmissionCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  formData: Scalars['Json'];
  isValid?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SubmissionCreateManyInlineInput = {
  /** Connect multiple existing Submission documents */
  connect?: InputMaybe<Array<SubmissionWhereUniqueInput>>;
  /** Create and connect multiple existing Submission documents */
  create?: InputMaybe<Array<SubmissionCreateInput>>;
};

export type SubmissionCreateOneInlineInput = {
  /** Connect one existing Submission document */
  connect?: InputMaybe<SubmissionWhereUniqueInput>;
  /** Create and connect one Submission document */
  create?: InputMaybe<SubmissionCreateInput>;
};

/** An edge in a connection. */
export type SubmissionEdge = {
  __typename?: 'SubmissionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Submission;
};

/** Identifies documents */
export type SubmissionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SubmissionWhereStageInput>;
  documentInStages_none?: InputMaybe<SubmissionWhereStageInput>;
  documentInStages_some?: InputMaybe<SubmissionWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isValid_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SubmissionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsValidAsc = 'isValid_ASC',
  IsValidDesc = 'isValid_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SubmissionUpdateInput = {
  form?: InputMaybe<FormUpdateOneInlineInput>;
  formData?: InputMaybe<Scalars['Json']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
};

export type SubmissionUpdateManyInlineInput = {
  /** Connect multiple existing Submission documents */
  connect?: InputMaybe<Array<SubmissionConnectInput>>;
  /** Create and connect multiple Submission documents */
  create?: InputMaybe<Array<SubmissionCreateInput>>;
  /** Delete multiple Submission documents */
  delete?: InputMaybe<Array<SubmissionWhereUniqueInput>>;
  /** Disconnect multiple Submission documents */
  disconnect?: InputMaybe<Array<SubmissionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Submission documents */
  set?: InputMaybe<Array<SubmissionWhereUniqueInput>>;
  /** Update multiple Submission documents */
  update?: InputMaybe<Array<SubmissionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Submission documents */
  upsert?: InputMaybe<Array<SubmissionUpsertWithNestedWhereUniqueInput>>;
};

export type SubmissionUpdateManyInput = {
  formData?: InputMaybe<Scalars['Json']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
};

export type SubmissionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SubmissionUpdateManyInput;
  /** Document search */
  where: SubmissionWhereInput;
};

export type SubmissionUpdateOneInlineInput = {
  /** Connect existing Submission document */
  connect?: InputMaybe<SubmissionWhereUniqueInput>;
  /** Create and connect one Submission document */
  create?: InputMaybe<SubmissionCreateInput>;
  /** Delete currently connected Submission document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Submission document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Submission document */
  update?: InputMaybe<SubmissionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Submission document */
  upsert?: InputMaybe<SubmissionUpsertWithNestedWhereUniqueInput>;
};

export type SubmissionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SubmissionUpdateInput;
  /** Unique document search */
  where: SubmissionWhereUniqueInput;
};

export type SubmissionUpsertInput = {
  /** Create document if it didn't exist */
  create: SubmissionCreateInput;
  /** Update document if it exists */
  update: SubmissionUpdateInput;
};

export type SubmissionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SubmissionUpsertInput;
  /** Unique document search */
  where: SubmissionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SubmissionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SubmissionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SubmissionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SubmissionWhereStageInput>;
  documentInStages_none?: InputMaybe<SubmissionWhereStageInput>;
  documentInStages_some?: InputMaybe<SubmissionWhereStageInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isValid?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isValid_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SubmissionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SubmissionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SubmissionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SubmissionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SubmissionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Submission record uniquely */
export type SubmissionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type Tab = {
  __typename?: 'Tab';
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  tabs: Array<TabItem>;
};


export type TabTabsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TabItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TabItemWhereInput>;
};

export type TabConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TabWhereUniqueInput;
};

/** A connection to a list of items. */
export type TabConnection = {
  __typename?: 'TabConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TabEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TabCreateInput = {
  tabs?: InputMaybe<TabItemCreateManyInlineInput>;
};

export type TabCreateManyInlineInput = {
  /** Create and connect multiple existing Tab documents */
  create?: InputMaybe<Array<TabCreateInput>>;
};

export type TabCreateOneInlineInput = {
  /** Create and connect one Tab document */
  create?: InputMaybe<TabCreateInput>;
};

export type TabCreateWithPositionInput = {
  /** Document to create */
  data: TabCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TabEdge = {
  __typename?: 'TabEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Tab;
};

export type TabItem = {
  __typename?: 'TabItem';
  content_old: Scalars['String'];
  description: RichText;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<TabItem>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
};


export type TabItemLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

export type TabItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TabItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type TabItemConnection = {
  __typename?: 'TabItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TabItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TabItemCreateInput = {
  /** content_old input for default locale (en) */
  content_old: Scalars['String'];
  /** description input for default locale (en) */
  description: Scalars['RichTextAST'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<TabItemCreateLocalizationsInput>;
  /** title input for default locale (en) */
  title: Scalars['String'];
};

export type TabItemCreateLocalizationDataInput = {
  content_old: Scalars['String'];
  description: Scalars['RichTextAST'];
  title: Scalars['String'];
};

export type TabItemCreateLocalizationInput = {
  /** Localization input */
  data: TabItemCreateLocalizationDataInput;
  locale: Locale;
};

export type TabItemCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<TabItemCreateLocalizationInput>>;
};

export type TabItemCreateManyInlineInput = {
  /** Create and connect multiple existing TabItem documents */
  create?: InputMaybe<Array<TabItemCreateInput>>;
};

export type TabItemCreateOneInlineInput = {
  /** Create and connect one TabItem document */
  create?: InputMaybe<TabItemCreateInput>;
};

export type TabItemCreateWithPositionInput = {
  /** Document to create */
  data: TabItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TabItemEdge = {
  __typename?: 'TabItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TabItem;
};

/** Identifies documents */
export type TabItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TabItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TabItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TabItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum TabItemOrderByInput {
  ContentOldAsc = 'content_old_ASC',
  ContentOldDesc = 'content_old_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type TabItemParent = Tab;

export type TabItemParentConnectInput = {
  Tab?: InputMaybe<TabConnectInput>;
};

export type TabItemParentCreateInput = {
  Tab?: InputMaybe<TabCreateInput>;
};

export type TabItemParentCreateManyInlineInput = {
  /** Create and connect multiple existing TabItemParent documents */
  create?: InputMaybe<Array<TabItemParentCreateInput>>;
};

export type TabItemParentCreateOneInlineInput = {
  /** Create and connect one TabItemParent document */
  create?: InputMaybe<TabItemParentCreateInput>;
};

export type TabItemParentCreateWithPositionInput = {
  Tab?: InputMaybe<TabCreateWithPositionInput>;
};

export type TabItemParentUpdateInput = {
  Tab?: InputMaybe<TabUpdateInput>;
};

export type TabItemParentUpdateManyInlineInput = {
  /** Create and connect multiple TabItemParent component instances */
  create?: InputMaybe<Array<TabItemParentCreateWithPositionInput>>;
  /** Delete multiple TabItemParent documents */
  delete?: InputMaybe<Array<TabItemParentWhereUniqueInput>>;
  /** Update multiple TabItemParent component instances */
  update?: InputMaybe<Array<TabItemParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TabItemParent component instances */
  upsert?: InputMaybe<Array<TabItemParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TabItemParentUpdateManyWithNestedWhereInput = {
  Tab?: InputMaybe<TabUpdateManyWithNestedWhereInput>;
};

export type TabItemParentUpdateOneInlineInput = {
  /** Create and connect one TabItemParent document */
  create?: InputMaybe<TabItemParentCreateInput>;
  /** Delete currently connected TabItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TabItemParent document */
  update?: InputMaybe<TabItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TabItemParent document */
  upsert?: InputMaybe<TabItemParentUpsertWithNestedWhereUniqueInput>;
};

export type TabItemParentUpdateWithNestedWhereUniqueAndPositionInput = {
  Tab?: InputMaybe<TabUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type TabItemParentUpdateWithNestedWhereUniqueInput = {
  Tab?: InputMaybe<TabUpdateWithNestedWhereUniqueInput>;
};

export type TabItemParentUpsertWithNestedWhereUniqueAndPositionInput = {
  Tab?: InputMaybe<TabUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type TabItemParentUpsertWithNestedWhereUniqueInput = {
  Tab?: InputMaybe<TabUpsertWithNestedWhereUniqueInput>;
};

export type TabItemParentWhereInput = {
  Tab?: InputMaybe<TabWhereInput>;
};

export type TabItemParentWhereUniqueInput = {
  Tab?: InputMaybe<TabWhereUniqueInput>;
};

export type TabItemUpdateInput = {
  /** content_old input for default locale (en) */
  content_old?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** Manage document localizations */
  localizations?: InputMaybe<TabItemUpdateLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
};

export type TabItemUpdateLocalizationDataInput = {
  content_old?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type TabItemUpdateLocalizationInput = {
  data: TabItemUpdateLocalizationDataInput;
  locale: Locale;
};

export type TabItemUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<TabItemCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<TabItemUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<TabItemUpsertLocalizationInput>>;
};

export type TabItemUpdateManyInlineInput = {
  /** Create and connect multiple TabItem component instances */
  create?: InputMaybe<Array<TabItemCreateWithPositionInput>>;
  /** Delete multiple TabItem documents */
  delete?: InputMaybe<Array<TabItemWhereUniqueInput>>;
  /** Update multiple TabItem component instances */
  update?: InputMaybe<Array<TabItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TabItem component instances */
  upsert?: InputMaybe<Array<TabItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TabItemUpdateManyInput = {
  /** content_old input for default locale (en) */
  content_old?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<TabItemUpdateManyLocalizationsInput>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
};

export type TabItemUpdateManyLocalizationDataInput = {
  content_old?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type TabItemUpdateManyLocalizationInput = {
  data: TabItemUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type TabItemUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<TabItemUpdateManyLocalizationInput>>;
};

export type TabItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TabItemUpdateManyInput;
  /** Document search */
  where: TabItemWhereInput;
};

export type TabItemUpdateOneInlineInput = {
  /** Create and connect one TabItem document */
  create?: InputMaybe<TabItemCreateInput>;
  /** Delete currently connected TabItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TabItem document */
  update?: InputMaybe<TabItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TabItem document */
  upsert?: InputMaybe<TabItemUpsertWithNestedWhereUniqueInput>;
};

export type TabItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TabItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TabItemWhereUniqueInput;
};

export type TabItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TabItemUpdateInput;
  /** Unique document search */
  where: TabItemWhereUniqueInput;
};

export type TabItemUpsertInput = {
  /** Create document if it didn't exist */
  create: TabItemCreateInput;
  /** Update document if it exists */
  update: TabItemUpdateInput;
};

export type TabItemUpsertLocalizationInput = {
  create: TabItemCreateLocalizationDataInput;
  locale: Locale;
  update: TabItemUpdateLocalizationDataInput;
};

export type TabItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TabItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TabItemWhereUniqueInput;
};

export type TabItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TabItemUpsertInput;
  /** Unique document search */
  where: TabItemWhereUniqueInput;
};

/** Identifies documents */
export type TabItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TabItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TabItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TabItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  content_old?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  content_old_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_old_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_old_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  content_old_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_old_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  content_old_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  content_old_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  content_old_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_old_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References TabItem record uniquely */
export type TabItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type TabManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TabWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TabWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TabWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  tabs_every?: InputMaybe<TabItemWhereInput>;
  tabs_none?: InputMaybe<TabItemWhereInput>;
  tabs_some?: InputMaybe<TabItemWhereInput>;
};

export enum TabOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type TabParent = SectionWithImage;

export type TabParentConnectInput = {
  SectionWithImage?: InputMaybe<SectionWithImageConnectInput>;
};

export type TabParentCreateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateInput>;
};

export type TabParentCreateManyInlineInput = {
  /** Create and connect multiple existing TabParent documents */
  create?: InputMaybe<Array<TabParentCreateInput>>;
};

export type TabParentCreateOneInlineInput = {
  /** Create and connect one TabParent document */
  create?: InputMaybe<TabParentCreateInput>;
};

export type TabParentCreateWithPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageCreateWithPositionInput>;
};

export type TabParentUpdateInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateInput>;
};

export type TabParentUpdateManyInlineInput = {
  /** Create and connect multiple TabParent component instances */
  create?: InputMaybe<Array<TabParentCreateWithPositionInput>>;
  /** Delete multiple TabParent documents */
  delete?: InputMaybe<Array<TabParentWhereUniqueInput>>;
  /** Update multiple TabParent component instances */
  update?: InputMaybe<Array<TabParentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TabParent component instances */
  upsert?: InputMaybe<Array<TabParentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TabParentUpdateManyWithNestedWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateManyWithNestedWhereInput>;
};

export type TabParentUpdateOneInlineInput = {
  /** Create and connect one TabParent document */
  create?: InputMaybe<TabParentCreateInput>;
  /** Delete currently connected TabParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TabParent document */
  update?: InputMaybe<TabParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TabParent document */
  upsert?: InputMaybe<TabParentUpsertWithNestedWhereUniqueInput>;
};

export type TabParentUpdateWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type TabParentUpdateWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpdateWithNestedWhereUniqueInput>;
};

export type TabParentUpsertWithNestedWhereUniqueAndPositionInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type TabParentUpsertWithNestedWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageUpsertWithNestedWhereUniqueInput>;
};

export type TabParentWhereInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereInput>;
};

export type TabParentWhereUniqueInput = {
  SectionWithImage?: InputMaybe<SectionWithImageWhereUniqueInput>;
};

export type TabUpdateInput = {
  tabs?: InputMaybe<TabItemUpdateManyInlineInput>;
};

export type TabUpdateManyInlineInput = {
  /** Create and connect multiple Tab component instances */
  create?: InputMaybe<Array<TabCreateWithPositionInput>>;
  /** Delete multiple Tab documents */
  delete?: InputMaybe<Array<TabWhereUniqueInput>>;
  /** Update multiple Tab component instances */
  update?: InputMaybe<Array<TabUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Tab component instances */
  upsert?: InputMaybe<Array<TabUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TabUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type TabUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TabUpdateManyInput;
  /** Document search */
  where: TabWhereInput;
};

export type TabUpdateOneInlineInput = {
  /** Create and connect one Tab document */
  create?: InputMaybe<TabCreateInput>;
  /** Delete currently connected Tab document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Tab document */
  update?: InputMaybe<TabUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Tab document */
  upsert?: InputMaybe<TabUpsertWithNestedWhereUniqueInput>;
};

export type TabUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TabUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TabWhereUniqueInput;
};

export type TabUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TabUpdateInput;
  /** Unique document search */
  where: TabWhereUniqueInput;
};

export type TabUpsertInput = {
  /** Create document if it didn't exist */
  create: TabCreateInput;
  /** Update document if it exists */
  update: TabUpdateInput;
};

export type TabUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TabUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TabWhereUniqueInput;
};

export type TabUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TabUpsertInput;
  /** Unique document search */
  where: TabWhereUniqueInput;
};

/** Identifies documents */
export type TabWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TabWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TabWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TabWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  tabs_every?: InputMaybe<TabItemWhereInput>;
  tabs_none?: InputMaybe<TabItemWhereInput>;
  tabs_some?: InputMaybe<TabItemWhereInput>;
};

/** References Tab record uniquely */
export type TabWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TeamSection = {
  __typename?: 'TeamSection';
  backgroundColor?: Maybe<BackgroundColorVariant>;
  cta?: Maybe<Button>;
  headline: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<TeamSection>;
  members: Array<Member>;
  /** System stage field */
  stage: Stage;
};


export type TeamSectionCtaArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TeamSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type TeamSectionMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<MemberOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MemberWhereInput>;
};

export type TeamSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TeamSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type TeamSectionConnection = {
  __typename?: 'TeamSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TeamSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TeamSectionCreateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cta?: InputMaybe<ButtonCreateOneInlineInput>;
  /** headline input for default locale (en) */
  headline: Scalars['String'];
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<TeamSectionCreateLocalizationsInput>;
  members?: InputMaybe<MemberCreateManyInlineInput>;
};

export type TeamSectionCreateLocalizationDataInput = {
  headline: Scalars['String'];
};

export type TeamSectionCreateLocalizationInput = {
  /** Localization input */
  data: TeamSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type TeamSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<TeamSectionCreateLocalizationInput>>;
};

export type TeamSectionCreateManyInlineInput = {
  /** Create and connect multiple existing TeamSection documents */
  create?: InputMaybe<Array<TeamSectionCreateInput>>;
};

export type TeamSectionCreateOneInlineInput = {
  /** Create and connect one TeamSection document */
  create?: InputMaybe<TeamSectionCreateInput>;
};

export type TeamSectionCreateWithPositionInput = {
  /** Document to create */
  data: TeamSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TeamSectionEdge = {
  __typename?: 'TeamSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TeamSection;
};

/** Identifies documents */
export type TeamSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  members_every?: InputMaybe<MemberWhereInput>;
  members_none?: InputMaybe<MemberWhereInput>;
  members_some?: InputMaybe<MemberWhereInput>;
};

export enum TeamSectionOrderByInput {
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type TeamSectionParent = Section;

export type TeamSectionParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type TeamSectionParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type TeamSectionParentCreateManyInlineInput = {
  /** Connect multiple existing TeamSectionParent documents */
  connect?: InputMaybe<Array<TeamSectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing TeamSectionParent documents */
  create?: InputMaybe<Array<TeamSectionParentCreateInput>>;
};

export type TeamSectionParentCreateOneInlineInput = {
  /** Connect one existing TeamSectionParent document */
  connect?: InputMaybe<TeamSectionParentWhereUniqueInput>;
  /** Create and connect one TeamSectionParent document */
  create?: InputMaybe<TeamSectionParentCreateInput>;
};

export type TeamSectionParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type TeamSectionParentUpdateManyInlineInput = {
  /** Connect multiple existing TeamSectionParent documents */
  connect?: InputMaybe<Array<TeamSectionParentConnectInput>>;
  /** Create and connect multiple TeamSectionParent documents */
  create?: InputMaybe<Array<TeamSectionParentCreateInput>>;
  /** Delete multiple TeamSectionParent documents */
  delete?: InputMaybe<Array<TeamSectionParentWhereUniqueInput>>;
  /** Disconnect multiple TeamSectionParent documents */
  disconnect?: InputMaybe<Array<TeamSectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TeamSectionParent documents */
  set?: InputMaybe<Array<TeamSectionParentWhereUniqueInput>>;
  /** Update multiple TeamSectionParent documents */
  update?: InputMaybe<Array<TeamSectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TeamSectionParent documents */
  upsert?: InputMaybe<Array<TeamSectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type TeamSectionParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type TeamSectionParentUpdateOneInlineInput = {
  /** Connect existing TeamSectionParent document */
  connect?: InputMaybe<TeamSectionParentWhereUniqueInput>;
  /** Create and connect one TeamSectionParent document */
  create?: InputMaybe<TeamSectionParentCreateInput>;
  /** Delete currently connected TeamSectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected TeamSectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single TeamSectionParent document */
  update?: InputMaybe<TeamSectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TeamSectionParent document */
  upsert?: InputMaybe<TeamSectionParentUpsertWithNestedWhereUniqueInput>;
};

export type TeamSectionParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type TeamSectionParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type TeamSectionParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type TeamSectionParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type TeamSectionUpdateInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  cta?: InputMaybe<ButtonUpdateOneInlineInput>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<TeamSectionUpdateLocalizationsInput>;
  members?: InputMaybe<MemberUpdateManyInlineInput>;
};

export type TeamSectionUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type TeamSectionUpdateLocalizationInput = {
  data: TeamSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type TeamSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<TeamSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<TeamSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<TeamSectionUpsertLocalizationInput>>;
};

export type TeamSectionUpdateManyInlineInput = {
  /** Create and connect multiple TeamSection component instances */
  create?: InputMaybe<Array<TeamSectionCreateWithPositionInput>>;
  /** Delete multiple TeamSection documents */
  delete?: InputMaybe<Array<TeamSectionWhereUniqueInput>>;
  /** Update multiple TeamSection component instances */
  update?: InputMaybe<Array<TeamSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TeamSection component instances */
  upsert?: InputMaybe<Array<TeamSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TeamSectionUpdateManyInput = {
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<TeamSectionUpdateManyLocalizationsInput>;
};

export type TeamSectionUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type TeamSectionUpdateManyLocalizationInput = {
  data: TeamSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type TeamSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<TeamSectionUpdateManyLocalizationInput>>;
};

export type TeamSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TeamSectionUpdateManyInput;
  /** Document search */
  where: TeamSectionWhereInput;
};

export type TeamSectionUpdateOneInlineInput = {
  /** Create and connect one TeamSection document */
  create?: InputMaybe<TeamSectionCreateInput>;
  /** Delete currently connected TeamSection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TeamSection document */
  update?: InputMaybe<TeamSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TeamSection document */
  upsert?: InputMaybe<TeamSectionUpsertWithNestedWhereUniqueInput>;
};

export type TeamSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TeamSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TeamSectionWhereUniqueInput;
};

export type TeamSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TeamSectionUpdateInput;
  /** Unique document search */
  where: TeamSectionWhereUniqueInput;
};

export type TeamSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: TeamSectionCreateInput;
  /** Update document if it exists */
  update: TeamSectionUpdateInput;
};

export type TeamSectionUpsertLocalizationInput = {
  create: TeamSectionCreateLocalizationDataInput;
  locale: Locale;
  update: TeamSectionUpdateLocalizationDataInput;
};

export type TeamSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TeamSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TeamSectionWhereUniqueInput;
};

export type TeamSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TeamSectionUpsertInput;
  /** Unique document search */
  where: TeamSectionWhereUniqueInput;
};

/** Identifies documents */
export type TeamSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TeamSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  backgroundColor?: InputMaybe<BackgroundColorVariant>;
  /** All values that are contained in given list. */
  backgroundColor_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  /** All values that are not equal to given value. */
  backgroundColor_not?: InputMaybe<BackgroundColorVariant>;
  /** All values that are not contained in given list. */
  backgroundColor_not_in?: InputMaybe<Array<InputMaybe<BackgroundColorVariant>>>;
  cta?: InputMaybe<ButtonWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  members_every?: InputMaybe<MemberWhereInput>;
  members_none?: InputMaybe<MemberWhereInput>;
  members_some?: InputMaybe<MemberWhereInput>;
};

/** References TeamSection record uniquely */
export type TeamSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Testimonial = Node & {
  __typename?: 'Testimonial';
  author: Scalars['String'];
  authorPicture: Asset;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Testimonial>;
  /** List of Testimonial versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Testimonial>;
  message: Scalars['String'];
  position: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type TestimonialAuthorPictureArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type TestimonialCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type TestimonialHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type TestimonialLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type TestimonialPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type TestimonialPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type TestimonialUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type TestimonialUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type TestimonialConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TestimonialWhereUniqueInput;
};

/** A connection to a list of items. */
export type TestimonialConnection = {
  __typename?: 'TestimonialConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TestimonialEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TestimonialCreateInput = {
  author: Scalars['String'];
  authorPicture: AssetCreateOneInlineInput;
  cl86gqzpm1l5u01t36jns6kpv?: InputMaybe<TestimonialSectionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<TestimonialCreateLocalizationsInput>;
  /** message input for default locale (en) */
  message: Scalars['String'];
  /** position input for default locale (en) */
  position: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type TestimonialCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  message: Scalars['String'];
  position: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type TestimonialCreateLocalizationInput = {
  /** Localization input */
  data: TestimonialCreateLocalizationDataInput;
  locale: Locale;
};

export type TestimonialCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<TestimonialCreateLocalizationInput>>;
};

export type TestimonialCreateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Create and connect multiple existing Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
};

export type TestimonialCreateOneInlineInput = {
  /** Connect one existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
};

/** An edge in a connection. */
export type TestimonialEdge = {
  __typename?: 'TestimonialEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Testimonial;
};

/** Identifies documents */
export type TestimonialManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  authorPicture?: InputMaybe<AssetWhereInput>;
  /** All values containing the given string. */
  author_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  author_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  author_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  author_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  author_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  author_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  author_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  author_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  author_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum TestimonialOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  PositionAsc = 'position_ASC',
  PositionDesc = 'position_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TestimonialSection = {
  __typename?: 'TestimonialSection';
  headline?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<TestimonialSection>;
  /** System stage field */
  stage: Stage;
  testimonials: Array<Testimonial>;
};


export type TestimonialSectionLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


export type TestimonialSectionTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};

export type TestimonialSectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TestimonialSectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type TestimonialSectionConnection = {
  __typename?: 'TestimonialSectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TestimonialSectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TestimonialSectionCreateInput = {
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<TestimonialSectionCreateLocalizationsInput>;
  testimonials?: InputMaybe<TestimonialCreateManyInlineInput>;
};

export type TestimonialSectionCreateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type TestimonialSectionCreateLocalizationInput = {
  /** Localization input */
  data: TestimonialSectionCreateLocalizationDataInput;
  locale: Locale;
};

export type TestimonialSectionCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<TestimonialSectionCreateLocalizationInput>>;
};

export type TestimonialSectionCreateManyInlineInput = {
  /** Create and connect multiple existing TestimonialSection documents */
  create?: InputMaybe<Array<TestimonialSectionCreateInput>>;
};

export type TestimonialSectionCreateOneInlineInput = {
  /** Create and connect one TestimonialSection document */
  create?: InputMaybe<TestimonialSectionCreateInput>;
};

export type TestimonialSectionCreateWithPositionInput = {
  /** Document to create */
  data: TestimonialSectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TestimonialSectionEdge = {
  __typename?: 'TestimonialSectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TestimonialSection;
};

/** Identifies documents */
export type TestimonialSectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
};

export enum TestimonialSectionOrderByInput {
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type TestimonialSectionParent = Section;

export type TestimonialSectionParentConnectInput = {
  Section?: InputMaybe<SectionConnectInput>;
};

export type TestimonialSectionParentCreateInput = {
  Section?: InputMaybe<SectionCreateInput>;
};

export type TestimonialSectionParentCreateManyInlineInput = {
  /** Connect multiple existing TestimonialSectionParent documents */
  connect?: InputMaybe<Array<TestimonialSectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing TestimonialSectionParent documents */
  create?: InputMaybe<Array<TestimonialSectionParentCreateInput>>;
};

export type TestimonialSectionParentCreateOneInlineInput = {
  /** Connect one existing TestimonialSectionParent document */
  connect?: InputMaybe<TestimonialSectionParentWhereUniqueInput>;
  /** Create and connect one TestimonialSectionParent document */
  create?: InputMaybe<TestimonialSectionParentCreateInput>;
};

export type TestimonialSectionParentUpdateInput = {
  Section?: InputMaybe<SectionUpdateInput>;
};

export type TestimonialSectionParentUpdateManyInlineInput = {
  /** Connect multiple existing TestimonialSectionParent documents */
  connect?: InputMaybe<Array<TestimonialSectionParentConnectInput>>;
  /** Create and connect multiple TestimonialSectionParent documents */
  create?: InputMaybe<Array<TestimonialSectionParentCreateInput>>;
  /** Delete multiple TestimonialSectionParent documents */
  delete?: InputMaybe<Array<TestimonialSectionParentWhereUniqueInput>>;
  /** Disconnect multiple TestimonialSectionParent documents */
  disconnect?: InputMaybe<Array<TestimonialSectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TestimonialSectionParent documents */
  set?: InputMaybe<Array<TestimonialSectionParentWhereUniqueInput>>;
  /** Update multiple TestimonialSectionParent documents */
  update?: InputMaybe<Array<TestimonialSectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TestimonialSectionParent documents */
  upsert?: InputMaybe<Array<TestimonialSectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type TestimonialSectionParentUpdateManyWithNestedWhereInput = {
  Section?: InputMaybe<SectionUpdateManyWithNestedWhereInput>;
};

export type TestimonialSectionParentUpdateOneInlineInput = {
  /** Connect existing TestimonialSectionParent document */
  connect?: InputMaybe<TestimonialSectionParentWhereUniqueInput>;
  /** Create and connect one TestimonialSectionParent document */
  create?: InputMaybe<TestimonialSectionParentCreateInput>;
  /** Delete currently connected TestimonialSectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected TestimonialSectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single TestimonialSectionParent document */
  update?: InputMaybe<TestimonialSectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TestimonialSectionParent document */
  upsert?: InputMaybe<TestimonialSectionParentUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialSectionParentUpdateWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpdateWithNestedWhereUniqueInput>;
};

export type TestimonialSectionParentUpsertWithNestedWhereUniqueInput = {
  Section?: InputMaybe<SectionUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialSectionParentWhereInput = {
  Section?: InputMaybe<SectionWhereInput>;
};

export type TestimonialSectionParentWhereUniqueInput = {
  Section?: InputMaybe<SectionWhereUniqueInput>;
};

export type TestimonialSectionUpdateInput = {
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Manage document localizations */
  localizations?: InputMaybe<TestimonialSectionUpdateLocalizationsInput>;
  testimonials?: InputMaybe<TestimonialUpdateManyInlineInput>;
};

export type TestimonialSectionUpdateLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type TestimonialSectionUpdateLocalizationInput = {
  data: TestimonialSectionUpdateLocalizationDataInput;
  locale: Locale;
};

export type TestimonialSectionUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<TestimonialSectionCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<TestimonialSectionUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<TestimonialSectionUpsertLocalizationInput>>;
};

export type TestimonialSectionUpdateManyInlineInput = {
  /** Create and connect multiple TestimonialSection component instances */
  create?: InputMaybe<Array<TestimonialSectionCreateWithPositionInput>>;
  /** Delete multiple TestimonialSection documents */
  delete?: InputMaybe<Array<TestimonialSectionWhereUniqueInput>>;
  /** Update multiple TestimonialSection component instances */
  update?: InputMaybe<Array<TestimonialSectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TestimonialSection component instances */
  upsert?: InputMaybe<Array<TestimonialSectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TestimonialSectionUpdateManyInput = {
  /** headline input for default locale (en) */
  headline?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<TestimonialSectionUpdateManyLocalizationsInput>;
};

export type TestimonialSectionUpdateManyLocalizationDataInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type TestimonialSectionUpdateManyLocalizationInput = {
  data: TestimonialSectionUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type TestimonialSectionUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<TestimonialSectionUpdateManyLocalizationInput>>;
};

export type TestimonialSectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TestimonialSectionUpdateManyInput;
  /** Document search */
  where: TestimonialSectionWhereInput;
};

export type TestimonialSectionUpdateOneInlineInput = {
  /** Create and connect one TestimonialSection document */
  create?: InputMaybe<TestimonialSectionCreateInput>;
  /** Delete currently connected TestimonialSection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TestimonialSection document */
  update?: InputMaybe<TestimonialSectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TestimonialSection document */
  upsert?: InputMaybe<TestimonialSectionUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialSectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TestimonialSectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TestimonialSectionWhereUniqueInput;
};

export type TestimonialSectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TestimonialSectionUpdateInput;
  /** Unique document search */
  where: TestimonialSectionWhereUniqueInput;
};

export type TestimonialSectionUpsertInput = {
  /** Create document if it didn't exist */
  create: TestimonialSectionCreateInput;
  /** Update document if it exists */
  update: TestimonialSectionUpdateInput;
};

export type TestimonialSectionUpsertLocalizationInput = {
  create: TestimonialSectionCreateLocalizationDataInput;
  locale: Locale;
  update: TestimonialSectionUpdateLocalizationDataInput;
};

export type TestimonialSectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TestimonialSectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TestimonialSectionWhereUniqueInput;
};

export type TestimonialSectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TestimonialSectionUpsertInput;
  /** Unique document search */
  where: TestimonialSectionWhereUniqueInput;
};

/** Identifies documents */
export type TestimonialSectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialSectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
};

/** References TestimonialSection record uniquely */
export type TestimonialSectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TestimonialUpdateInput = {
  author?: InputMaybe<Scalars['String']>;
  authorPicture?: InputMaybe<AssetUpdateOneInlineInput>;
  cl86gqzpm1l5u01t36jns6kpv?: InputMaybe<TestimonialSectionUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<TestimonialUpdateLocalizationsInput>;
  /** message input for default locale (en) */
  message?: InputMaybe<Scalars['String']>;
  /** position input for default locale (en) */
  position?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateLocalizationDataInput = {
  message?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateLocalizationInput = {
  data: TestimonialUpdateLocalizationDataInput;
  locale: Locale;
};

export type TestimonialUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<TestimonialCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<TestimonialUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<TestimonialUpsertLocalizationInput>>;
};

export type TestimonialUpdateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialConnectInput>>;
  /** Create and connect multiple Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
  /** Delete multiple Testimonial documents */
  delete?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Disconnect multiple Testimonial documents */
  disconnect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Testimonial documents */
  set?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Update multiple Testimonial documents */
  update?: InputMaybe<Array<TestimonialUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Testimonial documents */
  upsert?: InputMaybe<Array<TestimonialUpsertWithNestedWhereUniqueInput>>;
};

export type TestimonialUpdateManyInput = {
  author?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<TestimonialUpdateManyLocalizationsInput>;
  /** message input for default locale (en) */
  message?: InputMaybe<Scalars['String']>;
  /** position input for default locale (en) */
  position?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateManyLocalizationDataInput = {
  message?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateManyLocalizationInput = {
  data: TestimonialUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type TestimonialUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<TestimonialUpdateManyLocalizationInput>>;
};

export type TestimonialUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TestimonialUpdateManyInput;
  /** Document search */
  where: TestimonialWhereInput;
};

export type TestimonialUpdateOneInlineInput = {
  /** Connect existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
  /** Delete currently connected Testimonial document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Testimonial document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Testimonial document */
  update?: InputMaybe<TestimonialUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Testimonial document */
  upsert?: InputMaybe<TestimonialUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TestimonialUpdateInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

export type TestimonialUpsertInput = {
  /** Create document if it didn't exist */
  create: TestimonialCreateInput;
  /** Update document if it exists */
  update: TestimonialUpdateInput;
};

export type TestimonialUpsertLocalizationInput = {
  create: TestimonialCreateLocalizationDataInput;
  locale: Locale;
  update: TestimonialUpdateLocalizationDataInput;
};

export type TestimonialUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TestimonialUpsertInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type TestimonialWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type TestimonialWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  authorPicture?: InputMaybe<AssetWhereInput>;
  /** All values containing the given string. */
  author_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  author_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  author_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  author_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  author_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  author_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  author_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  author_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  author_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  message?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  message_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  message_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  position_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  position_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  position_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  position_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  position_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  position_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  position_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  position_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  position_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type TestimonialWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<TestimonialWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Testimonial record uniquely */
export type TestimonialWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum TextSizeVariant {
  Lg = 'LG',
  Md = 'MD',
  Sm = 'SM',
  Xl = 'XL'
}

export enum TextVariant {
  Black = 'BLACK',
  Primary = 'PRIMARY',
  Secondary = 'SECONDARY',
  White = 'WHITE'
}

export enum ThemeColor {
  Accent = 'ACCENT',
  Primary = 'PRIMARY',
  Secondary = 'SECONDARY'
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type AccordionFragment = { __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> };

export type TabFragment = { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> };

export type CountUpFragment = { __typename?: 'CountUp', to: number };

export type ParagraphFragment = { __typename?: 'Paragraph', value: { __typename?: 'RichText', raw: any } };

export type MultiColumnFragment = { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> };

type InternalLink_Event_Fragment = { __typename?: 'Event', id: string, slug: string, typename: 'Event' };

type InternalLink_Page_Fragment = { __typename?: 'Page', id: string, slug: string, typename: 'Page' };

type InternalLink_Project_Fragment = { __typename?: 'Project', id: string, slug: string, typename: 'Project' };

export type InternalLinkFragment = InternalLink_Event_Fragment | InternalLink_Page_Fragment | InternalLink_Project_Fragment;

export type LinkFragment = { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null };

export type ButtonFragment = { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null };

export type CollaboratorSectionFragment = { __typename?: 'CollaboratorSection', typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> };

export type ProjectSectionFragment = { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

export type SectionWithImageFragment = { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

export type ServiceSectionFragment = { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

export type TeamSectionFragment = { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

export type TestimonialSectionFragment = { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> };

export type AssetFragment = { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' };

export type BannerFragment = { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

export type CarouselFragment = { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> };

export type CategoryFragment = { __typename?: 'Category', name: string, description?: { __typename?: 'CategoryDescriptionRichText', text: string } | null, events: Array<{ __typename?: 'Event', id: string, slug: string }>, projects: Array<{ __typename?: 'Project', id: string, slug: string }> };

export type CollaboratorCardFragment = { __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null };

export type AssetFragmentFragment = { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' };

export type CollaboratorFragment = { __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any, references: Array<{ __typename?: 'Event', id: string, name: string, slug: string } | { __typename?: 'Project', id: string, name: string, slug: string }> } | null, projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, shortDescription: string, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, events: Array<{ __typename?: 'Event', id: string, slug: string, name: string, shortDescription?: string | null, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> };

export type EventCardFragment = { __typename?: 'Event', id: string, slug: string, name: string, start: any, end: any, shortDescription?: string | null, typename: 'Event', color?: { __typename?: 'Color', hex: any } | null, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } };

export type EventCalendarFragment = { __typename?: 'Event', id: string, slug: string, name: string, start: any, end: any, shortDescription?: string | null, typename: 'Event', color?: { __typename?: 'Color', hex: any } | null };

export type EventFragment = { __typename?: 'Event', id: string, slug: string, name: string, start: any, end: any, shortDescription?: string | null, typename: 'Event', categories: Array<{ __typename?: 'Category', id: string, name: string }>, collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string }>, color?: { __typename?: 'Color', hex: any } | null, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description: { __typename?: 'EventDescriptionRichText', json: any, references: Array<{ __typename?: 'Asset' } | { __typename?: 'Category' } | { __typename?: 'Collaborator', id: string, name: string } | { __typename?: 'Event', id: string, slug: string, name: string } | { __typename?: 'Member', id: string, name: string, picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string } | { __typename?: 'Project', id: string, slug: string, name: string, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null } | { __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string }> } };

export type FormInputFragment = { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' };

export type FormRadioFragment = { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' };

export type FormCheckboxFragment = { __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' };

export type FormTextareaFragment = { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' };

export type FormSelectFragment = { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> };

type FormFields_FormCheckbox_Fragment = { __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' };

type FormFields_FormInput_Fragment = { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' };

type FormFields_FormRadio_Fragment = { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' };

type FormFields_FormSelect_Fragment = { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> };

type FormFields_FormTextarea_Fragment = { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' };

export type FormFieldsFragment = FormFields_FormCheckbox_Fragment | FormFields_FormInput_Fragment | FormFields_FormRadio_Fragment | FormFields_FormSelect_Fragment | FormFields_FormTextarea_Fragment;

export type FormFragment = { __typename?: 'Form', id: string, submitButtonLabel: string, typename: 'Form', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormRow', typename: 'FormRow', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> };

export type LayoutFragment = { __typename?: 'Layout', id: string, typename: 'Layout', navBar: { __typename?: 'Navigation', logo?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, links: Array<{ __typename?: 'Page', id: string, navigationLabel: string, href: string }>, ctas: Array<{ __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null }> } };

export type MemberFragment = { __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null };

export type PageSlugFragment = { __typename?: 'Page', id: string, slug: string };

export type PageFragment = { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page', seo?: { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | null, hero?: { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> } | null, sections: Array<{ __typename?: 'Section', backgroundColor?: BackgroundColorVariant | null, isFormMainComponent?: boolean | null, component?: { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> } | { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' } | { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null }>, pageRichTextContent?: { __typename?: 'PageRichTextWrapper', content?: { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> } | null } | null };

type Hero_Banner_Fragment = { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

type Hero_Carousel_Fragment = { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> };

export type HeroFragment = Hero_Banner_Fragment | Hero_Carousel_Fragment;

type SectionComponentUnion_CollaboratorSection_Fragment = { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> };

type SectionComponentUnion_PageRichTextContent_Fragment = { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' };

type SectionComponentUnion_ProjectSection_Fragment = { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

type SectionComponentUnion_SectionWithImage_Fragment = { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

type SectionComponentUnion_ServiceSection_Fragment = { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

type SectionComponentUnion_TeamSection_Fragment = { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null };

type SectionComponentUnion_TestimonialSection_Fragment = { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> };

export type SectionComponentUnionFragment = SectionComponentUnion_CollaboratorSection_Fragment | SectionComponentUnion_PageRichTextContent_Fragment | SectionComponentUnion_ProjectSection_Fragment | SectionComponentUnion_SectionWithImage_Fragment | SectionComponentUnion_ServiceSection_Fragment | SectionComponentUnion_TeamSection_Fragment | SectionComponentUnion_TestimonialSection_Fragment;

export type ProjectSlugFragment = { __typename?: 'Project', id: string, slug: string, typename: 'Project' };

export type ProjectCardFragment = { __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } };

export type ProjectFragment = { __typename?: 'Project', id: string, createdAt: any, slug: string, name: string, start: any, end?: any | null, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', categories: Array<{ __typename?: 'Category', id: string, name: string }>, collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string }>, locations: Array<{ __typename?: 'Location', latitude: number, longitude: number }>, description: { __typename?: 'ProjectDescriptionRichText', json: any, typename: 'ProjectDescriptionRichText' }, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, gallery: Array<{ __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }>, events: Array<{ __typename?: 'Event', id: string, name: string, slug: string, start: any, end: any, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> };

export type PageRichTextContentFragment = { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> };

export type ProjectDescriptionRichTextFragment = { __typename?: 'ProjectDescriptionRichText', json: any, typename: 'ProjectDescriptionRichText' };

export type SeoFragment = { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null };

export type ServiceFragment = { __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null };

export type SocialHandleFragment = { __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string, typename: 'SocialHandle' };

export type TestimonialFragment = { __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } };

export type VkiiGeneralInformationFragment = { __typename?: 'AssociationDetails', id: string, slogan?: string | null, telephone: string, contactEmail: string, address: string, typename: 'AssociationDetails', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, location: { __typename?: 'Location', latitude: number, longitude: number }, socialHandles: Array<{ __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string, typename: 'SocialHandle' }>, form?: { __typename?: 'Form', id: string, submitButtonLabel: string, typename: 'Form', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormRow', typename: 'FormRow', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | null };

export type CreateSubmissionMutationVariables = Exact<{
  formData: Scalars['Json'];
  formId: Scalars['ID'];
}>;


export type CreateSubmissionMutation = { __typename?: 'Mutation', createSubmission?: { __typename?: 'Submission', id: string, form?: { __typename?: 'Form', formName: string } | null } | null };

export type GetCollaboratorCardsQueryVariables = Exact<{
  locale: Locale;
}>;


export type GetCollaboratorCardsQuery = { __typename?: 'Query', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> };

export type GetEventCardsQueryVariables = Exact<{
  locale: Locale;
  where?: InputMaybe<EventWhereInput>;
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EventOrderByInput>;
}>;


export type GetEventCardsQuery = { __typename?: 'Query', events: Array<{ __typename?: 'Event', id: string, slug: string, name: string, start: any, end: any, shortDescription?: string | null, typename: 'Event', color?: { __typename?: 'Color', hex: any } | null }> };

export type GetEventInfoQueryVariables = Exact<{
  locale: Locale;
  slug: Scalars['String'];
}>;


export type GetEventInfoQuery = { __typename?: 'Query', event?: { __typename?: 'Event', id: string, slug: string, name: string, start: any, end: any, shortDescription?: string | null, typename: 'Event', categories: Array<{ __typename?: 'Category', id: string, name: string }>, collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string }>, color?: { __typename?: 'Color', hex: any } | null, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description: { __typename?: 'EventDescriptionRichText', json: any, references: Array<{ __typename?: 'Asset' } | { __typename?: 'Category' } | { __typename?: 'Collaborator', id: string, name: string } | { __typename?: 'Event', id: string, slug: string, name: string } | { __typename?: 'Member', id: string, name: string, picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string } | { __typename?: 'Project', id: string, slug: string, name: string, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null } | { __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string }> } } | null };

export type GetNextEventsSlugQueryVariables = Exact<{
  locale: Locale;
  where?: InputMaybe<EventWhereInput>;
  orderBy?: InputMaybe<EventOrderByInput>;
}>;


export type GetNextEventsSlugQuery = { __typename?: 'Query', resources: Array<{ __typename?: 'Event', slug: string }> };

export type GetContactPageContentQueryVariables = Exact<{
  slug: Scalars['String'];
  locale: Locale;
}>;


export type GetContactPageContentQuery = { __typename?: 'Query', page?: { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page', seo?: { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | null, hero?: { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> } | null, sections: Array<{ __typename?: 'Section', backgroundColor?: BackgroundColorVariant | null, isFormMainComponent?: boolean | null, component?: { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> } | { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' } | { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null }>, pageRichTextContent?: { __typename?: 'PageRichTextWrapper', content?: { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> } | null } | null } | null, associationDetailss: Array<{ __typename?: 'AssociationDetails', id: string, slogan?: string | null, telephone: string, contactEmail: string, address: string, typename: 'AssociationDetails', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, location: { __typename?: 'Location', latitude: number, longitude: number }, socialHandles: Array<{ __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string, typename: 'SocialHandle' }>, form?: { __typename?: 'Form', id: string, submitButtonLabel: string, typename: 'Form', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormRow', typename: 'FormRow', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | null }> };

export type GetPageContentQueryVariables = Exact<{
  slug: Scalars['String'];
  locale: Locale;
}>;


export type GetPageContentQuery = { __typename?: 'Query', page?: { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page', seo?: { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | null, hero?: { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> } | null, sections: Array<{ __typename?: 'Section', backgroundColor?: BackgroundColorVariant | null, isFormMainComponent?: boolean | null, component?: { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> } | { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' } | { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null }>, pageRichTextContent?: { __typename?: 'PageRichTextWrapper', content?: { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> } | null } | null } | null };

export type GetPageLayoutQueryVariables = Exact<{
  locale: Locale;
}>;


export type GetPageLayoutQuery = { __typename?: 'Query', layouts: Array<{ __typename?: 'Layout', id: string, typename: 'Layout', navBar: { __typename?: 'Navigation', logo?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, links: Array<{ __typename?: 'Page', id: string, navigationLabel: string, href: string }>, ctas: Array<{ __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null }> } }>, associationDetailss: Array<{ __typename?: 'AssociationDetails', id: string, slogan?: string | null, telephone: string, contactEmail: string, address: string, typename: 'AssociationDetails', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, location: { __typename?: 'Location', latitude: number, longitude: number }, socialHandles: Array<{ __typename?: 'SocialHandle', id: string, label: string, icon: string, url: string, typename: 'SocialHandle' }>, form?: { __typename?: 'Form', id: string, submitButtonLabel: string, typename: 'Form', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormRow', typename: 'FormRow', fields: Array<{ __typename?: 'FormCheckbox', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormCheckbox' } | { __typename?: 'FormInput', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, type?: FormInputType | null, typename: 'FormInput' } | { __typename?: 'FormRadio', id: string, name: string, label?: string | null, required?: boolean | null, typename: 'FormRadio' } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | { __typename?: 'FormSelect', id: string, name: string, required?: boolean | null, typename: 'FormSelect', choices: Array<{ __typename?: 'FormOption', id: string, value: string, option?: string | null }> } | { __typename?: 'FormTextarea', id: string, name: string, label?: string | null, placeholder?: string | null, required?: boolean | null, typename: 'FormTextarea' }> } | null }> };

export type GetProjectsPageContentQueryVariables = Exact<{
  slug: Scalars['String'];
  locale: Locale;
}>;


export type GetProjectsPageContentQuery = { __typename?: 'Query', page?: { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page', seo?: { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | null, hero?: { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> } | null, sections: Array<{ __typename?: 'Section', backgroundColor?: BackgroundColorVariant | null, isFormMainComponent?: boolean | null, component?: { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> } | { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' } | { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null }>, pageRichTextContent?: { __typename?: 'PageRichTextWrapper', content?: { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> } | null } | null } | null, projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, categories: Array<{ __typename?: 'Category', id: string, name: string }>, collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string }> };

export type GetProjectsSimplePageContentQueryVariables = Exact<{
  slug: Scalars['String'];
  locale: Locale;
  projectSlug: Scalars['String'];
}>;


export type GetProjectsSimplePageContentQuery = { __typename?: 'Query', page?: { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page', seo?: { __typename?: 'Seo', id: string, title: string, description: string, typename: 'Seo', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null } | null, hero?: { __typename?: 'Banner', id: string, headline: string, description?: string | null, typename: 'Banner', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'Carousel', id: string, typename: 'Carousel', slides: Array<{ __typename?: 'CarouselSlide', id: string, headline: string, description: string, typename: 'CarouselSlide', image: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, cta: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } }> } | null, sections: Array<{ __typename?: 'Section', backgroundColor?: BackgroundColorVariant | null, isFormMainComponent?: boolean | null, component?: { __typename?: 'CollaboratorSection', id: string, typename: 'CollaboratorSection', collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string, type: CollaboratorType, typename: 'Collaborator', logo: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, description?: { __typename?: 'CollaboratorDescriptionRichText', json: any } | null }> } | { __typename?: 'PageRichTextContent', typename: 'PageRichTextContent' } | { __typename?: 'ProjectSection', id: string, headline: string, typename: 'ProjectSection', projects: Array<{ __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'SectionWithImage', id: string, imagePosition?: ImagePosition | null, backgroundColor?: BackgroundColorVariant | null, headline: string, typename: 'SectionWithImage', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null, blocks: Array<{ __typename?: 'Accordion', id: string, typename: 'Accordion', items: Array<{ __typename?: 'AccordionItem', summary: string, description: { __typename?: 'RichText', raw: any } }> } | { __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'MultiColumn', numberOfColumnsOnMobile?: number | null, numberOfColumnsOnDesktop?: number | null, typename: 'MultiColumn', columns: Array<{ __typename?: 'Column', title?: string | null, titleOnBottom?: boolean | null, blocks: Array<{ __typename?: 'CountUp', typename: 'CountUp', to: number } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } }> }> } | { __typename?: 'Paragraph', typename: 'Paragraph', value: { __typename?: 'RichText', raw: any } } | { __typename?: 'Tab', id: string, typename: 'Tab', tabs: Array<{ __typename?: 'TabItem', title: string, description: { __typename?: 'RichText', raw: any } }> }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'ServiceSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'ServiceSection', services: Array<{ __typename?: 'Service', id: string, name: string, description: string, icon?: string | null, typename: 'Service', image?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TeamSection', id: string, headline: string, backgroundColor?: BackgroundColorVariant | null, typename: 'TeamSection', members: Array<{ __typename?: 'Member', id: string, type?: MemberType | null, name: string, position?: string | null, description?: string | null, typename: 'Member', picture?: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } | null }>, cta?: { __typename?: 'Button', id: string, theme?: ThemeColor | null, variant?: ButtonVariant | null, typename: 'Button', link?: { __typename?: 'Link', id: string, label: string, isExternal: boolean, external?: string | null, typename: 'Link', internal?: { __typename?: 'Event', id: string, slug: string, typename: 'Event' } | { __typename?: 'Page', id: string, slug: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, typename: 'Project' } | null } | null } | null } | { __typename?: 'TestimonialSection', id: string, typename: 'TestimonialSection', title?: string | null, testimonials: Array<{ __typename?: 'Testimonial', id: string, author: string, position: string, message: string, typename: 'Testimonial', authorPicture: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null }>, pageRichTextContent?: { __typename?: 'PageRichTextWrapper', content?: { __typename?: 'PageRichTextWrapperContentRichText', json: any, typename: 'PageRichTextWrapperContentRichText', references: Array<{ __typename?: 'Collaborator', typename: 'Collaborator' } | { __typename?: 'Event', id: string, slug: string, name: string, typename: 'Event' } | { __typename?: 'Member', typename: 'Member' } | { __typename?: 'Page', id: string, slug: string, navigationLabel: string, typename: 'Page' } | { __typename?: 'Project', id: string, slug: string, name: string, typename: 'Project' } | { __typename?: 'Service', id: string, name: string, serviceIcon?: string | null, typename: 'Service' } | { __typename?: 'SocialHandle', id: string, icon: string, url: string, typename: 'SocialHandle' }> } | null } | null } | null, project?: { __typename?: 'Project', id: string, createdAt: any, slug: string, name: string, start: any, end?: any | null, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', categories: Array<{ __typename?: 'Category', id: string, name: string }>, collaborators: Array<{ __typename?: 'Collaborator', id: string, name: string }>, locations: Array<{ __typename?: 'Location', latitude: number, longitude: number }>, description: { __typename?: 'ProjectDescriptionRichText', json: any, typename: 'ProjectDescriptionRichText' }, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }, gallery: Array<{ __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' }>, events: Array<{ __typename?: 'Event', id: string, name: string, slug: string, start: any, end: any, featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } }> } | null, categories: Array<{ __typename?: 'Category', id: string, name: string }> };

export type FilterProjectQueryVariables = Exact<{
  locale: Locale;
  where?: InputMaybe<ProjectWhereInput>;
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
}>;


export type FilterProjectQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectConnection', edges: Array<{ __typename?: 'ProjectEdge', cursor: string, node: { __typename?: 'Project', id: string, slug: string, name: string, projectStatus?: ProjectStatus | null, shortDescription: string, typename: 'Project', featuredImage: { __typename?: 'Asset', id: string, fileName: string, url: string, width?: number | null, height?: number | null, typename: 'Asset' } } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: string | null, endCursor?: string | null, pageSize?: number | null } } };

export type GetProjectByCreatedAtQueryVariables = Exact<{
  locale: Locale;
  where?: InputMaybe<ProjectWhereInput>;
  orderBy?: InputMaybe<ProjectOrderByInput>;
}>;


export type GetProjectByCreatedAtQuery = { __typename?: 'Query', resources: Array<{ __typename?: 'Project', slug: string }> };

export type GetDynamicPageSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetDynamicPageSlugsQuery = { __typename?: 'Query', pages: Array<{ __typename?: 'Page', id: string, slug: string }> };
